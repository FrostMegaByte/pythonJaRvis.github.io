{
    "bpytop": [
        "bpytop.Config",
        "bpytop.Timer",
        "threading",
        "logging.handlers",
        "shutil",
        "psutil.cpu_count",
        "bpytop.Term",
        "logging.Formatter.__init__",
        "tty",
        "logging.Logger.debug",
        "logging.Handler.setFormatter",
        "bpytop.TimeIt",
        "logging.Logger.info",
        "logging",
        "nt._isdir",
        "<builtin>.print",
        "time.time",
        "bpytop.ProcCollector",
        "genericpath.isdir",
        "typing",
        "io",
        "logging.Handler.setLevel",
        "bpytop.Key",
        "ntpath.dirname",
        "bpytop.Raw",
        "re",
        "logging.Logger.exception",
        "bpytop.Config.__init__",
        "bpytop.Graph",
        "bpytop.Meter",
        "bpytop.Menu",
        "select",
        "math",
        "argparse",
        "signal",
        "collections",
        "bpytop.MemBox",
        "<builtin>.SystemExit",
        "posixpath.dirname",
        "bpytop.SubBox",
        "bpytop.Theme",
        "bpytop.Meters",
        "<builtin>.str",
        "logging.getLogger",
        "bpytop.Graphs",
        "bpytop.Nonblocking",
        "bpytop.Draw",
        "fcntl",
        "os",
        "subprocess",
        "<builtin>.getattr",
        "bpytop.NetBox",
        "bpytop.Fx",
        "os.makedirs",
        "random",
        "bpytop.get_cpu_core_mapping",
        "bpytop.Colors",
        "bpytop.Color",
        "logging.handlers.RotatingFileHandler.__init__",
        "bpytop.Init",
        "bpytop.Symbol",
        "bpytop.Box",
        "bpytop.NetCollector",
        "bpytop.ProcBox",
        "argparse.ArgumentParser.__init__",
        "argparse.ArgumentParser.parse_args",
        "ntpath.expanduser",
        "bpytop.Mv",
        "logging.Logger.warning",
        "datetime",
        "string",
        "bpytop.UpdateChecker",
        "bpytop.get_cpu_name",
        "posixpath.expanduser",
        "bpytop.Banner",
        "string.Template.__init__",
        "urllib.request",
        "logging.Logger.addHandler",
        "psutil",
        "termios",
        "bpytop.Collector",
        "bpytop.main",
        "bpytop.CpuBox",
        "bpytop.MemCollector",
        "logging.Logger.setLevel",
        "bpytop.CpuCollector",
        "argparse._ActionsContainer.add_argument"
    ],
    "threading": [
        "threading._RLock",
        "threading.Timer",
        "<list>.append",
        "os",
        "threading._MainThread",
        "_weakrefset",
        "_threading_local",
        "threading.BrokenBarrierError",
        "threading.BoundedSemaphore",
        "<builtin>.hasattr",
        "_weakrefset.WeakSet.__init__",
        "itertools.count",
        "traceback",
        "collections",
        "threading._MainThread.__init__",
        "threading.Condition",
        "threading.Event",
        "collections.namedtuple",
        "threading.Barrier",
        "threading._DummyThread",
        "<builtin>.set",
        "threading.Semaphore",
        "threading.Thread"
    ],
    "os": [
        "posixpath",
        "ntpath",
        "<list>.extend",
        "abc",
        "os._add",
        "os._Environ.__init__",
        "os._createenviron",
        "os._exists",
        "os._Environ",
        "os._fscodec",
        "<list>.append",
        "os._AddedDllDirectory",
        "<builtin>.ImportError",
        "<builtin>.globals",
        "os._wrap_close",
        "stat",
        "<builtin>.set",
        "os.PathLike"
    ],
    "abc": [
        "abc.abstractproperty",
        "abc.ABC",
        "abc.abstractstaticmethod",
        "abc.abstractclassmethod",
        "_py_abc"
    ],
    "abc.abstractclassmethod": [],
    "abc.abstractstaticmethod": [],
    "abc.abstractproperty": [],
    "_py_abc": [
        "_weakrefset",
        "_py_abc.ABCMeta"
    ],
    "_weakrefset": [
        "_weakrefset.WeakSet",
        "_weakrefset._IterationGuard"
    ],
    "_weakrefset._IterationGuard": [],
    "_weakrefset.WeakSet": [],
    "_py_abc.ABCMeta": [],
    "abc.ABC": [],
    "stat": [],
    "<builtin>.ImportError": [],
    "<list>.append": [],
    "ntpath": [
        "<builtin>.hasattr",
        "stat",
        "genericpath",
        "os"
    ],
    "genericpath": [
        "stat",
        "os"
    ],
    "<builtin>.hasattr": [],
    "<list>.extend": [],
    "posixpath": [
        "stat",
        "genericpath",
        "os"
    ],
    "os._exists": [
        "<builtin>.globals"
    ],
    "<builtin>.globals": [],
    "<builtin>.set": [],
    "os._add": [],
    "os._Environ": [],
    "os._createenviron": [
        "os._Environ.__init__",
        "os._createenviron.encodekey"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._createenviron.encode": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "<builtin>.isinstance": [],
    "<builtin>.type": [],
    "<builtin>.TypeError": [],
    "os._Environ.__init__": [],
    "os._fscodec": [],
    "os._wrap_close": [],
    "os.PathLike": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "abc.abstractmethod": [],
    "<builtin>.classmethod": [],
    "os._AddedDllDirectory": [],
    "collections": [
        "heapq",
        "keyword",
        "collections._OrderedDictKeysView",
        "collections.OrderedDict",
        "collections.UserDict",
        "operator",
        "collections.ChainMap",
        "collections.Counter",
        "collections._OrderedDictValuesView",
        "reprlib",
        "collections._Link",
        "collections.UserList",
        "collections._OrderedDictItemsView",
        "collections.UserString"
    ],
    "operator": [
        "operator.itemgetter",
        "operator.methodcaller",
        "operator.attrgetter"
    ],
    "operator.attrgetter": [],
    "operator.itemgetter": [],
    "operator.methodcaller": [],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "<builtin>.frozenset": [],
    "heapq": [
        "_heapq"
    ],
    "_heapq": [],
    "reprlib": [
        "reprlib.Repr.__init__",
        "reprlib.Repr"
    ],
    "reprlib.Repr": [],
    "reprlib.Repr.__init__": [],
    "collections._OrderedDictKeysView": [],
    "collections._OrderedDictItemsView": [],
    "collections._OrderedDictValuesView": [],
    "collections._Link": [],
    "collections.OrderedDict": [
        "<builtin>.object",
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.classmethod"
    ],
    "<builtin>.object": [],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "<builtin>.getattr": [],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.ChainMap": [
        "<builtin>.property",
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.classmethod"
    ],
    "<builtin>.property": [],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "collections.UserList": [],
    "collections.UserString": [],
    "threading._RLock": [],
    "threading.Condition": [],
    "threading.Semaphore": [],
    "threading.BoundedSemaphore": [],
    "threading.Event": [],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.BrokenBarrierError": [],
    "itertools.count": [],
    "_weakrefset.WeakSet.__init__": [
        "<builtin>.set",
        "_weakref.ref",
        "_weakrefset.WeakSet.update"
    ],
    "_weakref.ref": [],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakrefset.WeakSet.add"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "traceback": [
        "collections",
        "traceback.TracebackException",
        "traceback.FrameSummary",
        "linecache",
        "traceback.StackSummary"
    ],
    "linecache": [
        "tokenize",
        "functools",
        "os"
    ],
    "functools": [
        "collections",
        "abc",
        "functools.partialmethod",
        "functools.partial",
        "functools._HashedSeq",
        "reprlib",
        "<builtin>.object",
        "collections.namedtuple",
        "functools.cached_property",
        "functools.singledispatchmethod"
    ],
    "functools.partial": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "functools.partialmethod": [
        "<builtin>.property"
    ],
    "collections.namedtuple": [
        "<builtin>.tuple",
        "<builtin>.str",
        "<builtin>.classmethod",
        "<str>.join",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.zip",
        "<str>.split",
        "<builtin>.map",
        "<builtin>.type",
        "<builtin>.list",
        "<builtin>.reversed",
        "<builtin>.exec",
        "<builtin>.dict",
        "<builtin>.repr",
        "<builtin>.len",
        "<builtin>.enumerate",
        "collections.<lambda1>",
        "<builtin>.ValueError",
        "_collections._tuplegetter",
        "<str>.replace",
        "<builtin>.set"
    ],
    "<builtin>.map": [],
    "<builtin>.list": [],
    "<builtin>.str": [],
    "<builtin>.enumerate": [],
    "<builtin>.ValueError": [],
    "<builtin>.tuple": [],
    "<builtin>.len": [],
    "<builtin>.reversed": [],
    "<builtin>.zip": [],
    "<builtin>.dict": [],
    "<builtin>.repr": [],
    "<str>.join": [],
    "<builtin>.exec": [],
    "collections.<lambda1>": [
        "operator.itemgetter.__init__",
        "<builtin>.property"
    ],
    "operator.itemgetter.__init__": [],
    "_collections._tuplegetter": [],
    "functools._HashedSeq": [],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.cached_property": [],
    "tokenize": [
        "tokenize.TokenError",
        "collections",
        "re",
        "tokenize.group",
        "re.compile",
        "<builtin>.any",
        "token",
        "<builtin>.sorted",
        "tokenize.StopTokenizing",
        "collections.namedtuple",
        "<builtin>.set",
        "codecs",
        "tokenize.Untokenizer",
        "io",
        "tokenize.maybe",
        "tokenize.TokenInfo",
        "tokenize._all_string_prefixes",
        "<builtin>.map"
    ],
    "codecs": [
        "codecs.BufferedIncrementalDecoder",
        "codecs.StreamReader",
        "<builtin>.SystemError",
        "encodings",
        "codecs.StreamReaderWriter",
        "codecs.BufferedIncrementalEncoder",
        "codecs.StreamRecoder",
        "codecs.IncrementalDecoder",
        "codecs.Codec",
        "codecs.StreamWriter",
        "codecs.CodecInfo",
        "codecs.IncrementalEncoder"
    ],
    "<builtin>.SystemError": [],
    "codecs.CodecInfo": [],
    "codecs.Codec": [],
    "codecs.IncrementalEncoder": [],
    "codecs.BufferedIncrementalEncoder": [],
    "codecs.IncrementalDecoder": [],
    "codecs.BufferedIncrementalDecoder": [],
    "codecs.StreamWriter": [],
    "codecs.StreamReader": [],
    "codecs.StreamReaderWriter": [],
    "codecs.StreamRecoder": [],
    "encodings": [
        "encodings.CodecRegistryError",
        "codecs"
    ],
    "encodings.CodecRegistryError": [],
    "io": [
        "abc",
        "io.RawIOBase",
        "io.BufferedIOBase",
        "io.IOBase",
        "io.TextIOBase"
    ],
    "io.IOBase": [],
    "io.RawIOBase": [],
    "io.BufferedIOBase": [],
    "io.TextIOBase": [],
    "re": [
        "<builtin>.type",
        "enum",
        "sre_compile",
        "re.RegexFlag",
        "sre_compile.compile",
        "functools.lru_cache",
        "functools",
        "<builtin>.chr",
        "functools._lru_cache_wrapper.wrapper",
        "copyreg.pickle",
        "copyreg",
        "functools.lru_cache.decorating_function",
        "re.Scanner",
        "<builtin>.globals",
        "sre_parse"
    ],
    "enum": [
        "enum._EnumDict",
        "enum.EnumMeta",
        "enum.IntEnum",
        "enum.Flag",
        "<builtin>.object",
        "enum.IntFlag",
        "enum.auto",
        "enum.Enum",
        "types"
    ],
    "types": [
        "<builtin>.type",
        "types._g",
        "types.DynamicClassAttribute",
        "types._GeneratorWrapper",
        "types._cell_factory",
        "types._ag",
        "<builtin>.object",
        "types._C",
        "<builtin>.globals",
        "types._c"
    ],
    "types._cell_factory": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "types._C": [],
    "types.DynamicClassAttribute": [],
    "types._GeneratorWrapper": [
        "<builtin>.property"
    ],
    "enum.auto": [],
    "enum._EnumDict": [],
    "enum.EnumMeta": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "<builtin>.staticmethod": [],
    "enum.Enum": [
        "types.DynamicClassAttribute.__init__",
        "<builtin>.classmethod"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.bool",
        "<builtin>.getattr"
    ],
    "<builtin>.bool": [],
    "enum.IntEnum": [],
    "enum.Flag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "sre_compile": [
        "sre_constants",
        "<builtin>.tuple",
        "sre_parse"
    ],
    "sre_parse": [
        "<builtin>.ord",
        "sre_parse.State",
        "sre_parse.Tokenizer",
        "sre_parse.Verbose",
        "<builtin>.frozenset",
        "sre_parse.SubPattern",
        "sre_constants"
    ],
    "sre_constants": [
        "sre_constants._makecodes",
        "sre_constants._NamedIntConstant",
        "sre_constants.error"
    ],
    "sre_constants.error": [],
    "sre_constants._NamedIntConstant": [],
    "sre_constants._makecodes": [
        "<builtin>.globals",
        "<builtin>.enumerate",
        "<str>.split",
        "<str>.strip"
    ],
    "<str>.strip": [],
    "<str>.split": [],
    "<builtin>.ord": [],
    "sre_parse.Verbose": [],
    "sre_parse.State": [
        "<builtin>.property"
    ],
    "sre_parse.SubPattern": [],
    "sre_parse.Tokenizer": [
        "<builtin>.property"
    ],
    "re.RegexFlag": [],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "sre_compile._code",
        "<builtin>.tuple",
        "sre_compile.isstring",
        "<builtin>.print",
        "sre_compile.dis",
        "<map>.items",
        "sre_parse.parse"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_parse.parse": [
        "sre_parse.Tokenizer.seek",
        "sre_parse.Tokenizer.error",
        "sre_parse.SubPattern.dump",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.fix_flags",
        "sre_parse._parse_sub",
        "sre_parse.State.__init__"
    ],
    "sre_parse.Tokenizer.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.__next": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse._parse_sub": [
        "sre_parse.SubPattern.__init__",
        "<builtin>.len",
        "<list>.extend",
        "<list>",
        "sre_parse.SubPattern.append",
        "<list>.append",
        "sre_parse.Tokenizer.match",
        "sre_parse.Tokenizer.tell"
    ],
    "<list>": [],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.SubPattern.__init__": [],
    "sre_parse.SubPattern.append": [
        "<list>.append"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "sre_parse.SubPattern.dump": [
        "<builtin>.isinstance",
        "<builtin>.print",
        "<builtin>.str",
        "<builtin>.enumerate"
    ],
    "<builtin>.print": [],
    "sre_compile._code": [
        "<list>.append",
        "sre_compile._compile",
        "sre_compile._compile_info"
    ],
    "sre_compile._compile_info": [
        "<list>.extend",
        "<builtin>.len",
        "<list>",
        "sre_compile._compile_charset",
        "sre_parse.SubPattern.getwidth",
        "sre_compile._get_charset_prefix",
        "sre_compile._optimize_charset",
        "sre_compile._get_literal_prefix"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "<builtin>.min": [],
    "<builtin>.max": [],
    "sre_compile._get_literal_prefix": [
        "<list>.extend",
        "<builtin>.len",
        "<list>",
        "sre_compile._combine_flags",
        "sre_compile._get_literal_prefix",
        "sre_compile._get_iscased"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._combine_flags": [],
    "sre_compile._get_charset_prefix": [
        "<builtin>.any",
        "<list>",
        "sre_compile._combine_flags",
        "<builtin>.range",
        "sre_compile._get_iscased",
        "<builtin>.map"
    ],
    "<builtin>.range": [],
    "<builtin>.any": [],
    "sre_compile._optimize_charset": [
        "<builtin>.len",
        "<builtin>.any",
        "<builtin>.bytearray",
        "sre_compile._bytes_to_codes",
        "<list>.append",
        "sre_compile._mk_bitmap",
        "<builtin>.bytes",
        "<builtin>.range",
        "<builtin>.map"
    ],
    "<builtin>.bytearray": [],
    "sre_compile._mk_bitmap": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "<builtin>.bytes": [],
    "sre_compile._bytes_to_codes": [
        "<builtin>.len",
        "<builtin>.memoryview"
    ],
    "<builtin>.memoryview": [],
    "sre_compile._compile_charset": [
        "<list>",
        "sre_constants.error.__init__",
        "<list>.extend"
    ],
    "sre_constants.error.__init__": [
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "<builtin>.super": [],
    "sre_compile._compile": [
        "sre_constants.error.__init__",
        "<list>",
        "sre_compile._compile_charset",
        "sre_compile._combine_flags",
        "sre_compile._compile",
        "sre_compile._simple",
        "sre_compile._optimize_charset",
        "<map>.get"
    ],
    "<map>.get": [],
    "sre_compile._simple": [
        "sre_compile._simple",
        "<builtin>.len"
    ],
    "sre_compile.dis": [
        "<builtin>.str",
        "sre_compile.dis.dis_",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "sre_compile.dis.dis_": [
        "sre_compile.dis.dis_.print_",
        "<builtin>.str",
        "sre_compile.dis.dis_.print_2",
        "<builtin>.list",
        "sre_compile._hex_code",
        "<builtin>.chr",
        "<builtin>.ValueError",
        "sre_compile.dis.dis_",
        "<builtin>.range",
        "<builtin>.map",
        "<builtin>.bin"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile._hex_code": [],
    "<map>.items": [],
    "functools.lru_cache": [
        "<builtin>.isinstance",
        "<builtin>.callable",
        "functools.update_wrapper",
        "functools._lru_cache_wrapper",
        "<builtin>.TypeError"
    ],
    "<builtin>.callable": [],
    "functools._lru_cache_wrapper": [
        "<builtin>.object",
        "_thread.RLock"
    ],
    "_thread.RLock": [],
    "functools.update_wrapper": [
        "<builtin>.getattr"
    ],
    "functools.lru_cache.decorating_function": [
        "functools._lru_cache_wrapper",
        "functools.update_wrapper"
    ],
    "functools._lru_cache_wrapper.wrapper": [
        "re._compile_repl",
        "functools._make_key"
    ],
    "functools._make_key": [
        "<builtin>.tuple",
        "<builtin>.type",
        "functools._HashedSeq.__init__",
        "<builtin>.len"
    ],
    "functools._HashedSeq.__init__": [
        "<builtin>.hash"
    ],
    "<builtin>.hash": [],
    "re._compile_repl": [
        "sre_parse.parse_template"
    ],
    "sre_parse.parse_template": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "sre_parse.Tokenizer.error",
        "<list>",
        "<builtin>.int",
        "<str>.isidentifier",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.Tokenizer.get",
        "sre_parse.Tokenizer.match",
        "<list>.append",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.parse_template.addgroup",
        "<builtin>.chr",
        "<builtin>.IndexError"
    ],
    "sre_parse.Tokenizer.get": [
        "sre_parse.Tokenizer.__next"
    ],
    "<builtin>.int": [],
    "sre_parse.parse_template.addgroup": [
        "<list>.append",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.getuntil": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len",
        "sre_parse.Tokenizer.__next"
    ],
    "<str>.isidentifier": [],
    "<builtin>.IndexError": [],
    "copyreg": [],
    "copyreg.pickle": [
        "copyreg.constructor",
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "copyreg.constructor": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "re.Scanner": [],
    "token": [
        "<builtin>.isinstance",
        "<builtin>.globals",
        "<list>.extend"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re._compile": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.len",
        "sre_compile.compile",
        "sre_compile.isstring",
        "<builtin>.next",
        "<builtin>.ValueError",
        "<builtin>.iter",
        "<builtin>.TypeError"
    ],
    "<builtin>.iter": [],
    "<builtin>.next": [],
    "<str>.replace": [],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [],
    "tokenize._all_string_prefixes": [],
    "<builtin>.sorted": [],
    "tokenize.TokenError": [],
    "tokenize.StopTokenizing": [],
    "tokenize.Untokenizer": [],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "threading.Timer": [],
    "threading._MainThread": [],
    "threading._DummyThread": [],
    "threading._MainThread.__init__": [
        "threading.Thread._set_ident",
        "threading.Thread._set_native_id",
        "threading.Thread._set_tstate_lock",
        "threading.Thread.__init__",
        "threading.Event.set"
    ],
    "threading.Thread.__init__": [
        "<builtin>.str",
        "threading.current_thread",
        "threading.Event.__init__",
        "threading._newname",
        "threading._make_invoke_excepthook",
        "_weakrefset.WeakSet.add"
    ],
    "threading._newname": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__",
        "_thread.get_ident"
    ],
    "_thread.get_ident": [],
    "threading._DummyThread.__init__": [
        "threading.Thread._set_native_id",
        "threading.Thread.__init__",
        "threading.Thread._set_ident",
        "threading._newname"
    ],
    "threading.Thread._set_ident": [
        "_thread.get_ident"
    ],
    "threading.Thread._set_native_id": [],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Condition.__init__": [
        "threading.RLock",
        "_collections.deque"
    ],
    "threading.RLock": [
        "threading._RLock.__init__"
    ],
    "threading._RLock.__init__": [],
    "_collections.deque": [],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "<builtin>.RuntimeError": [],
    "threading.Thread._set_tstate_lock": [],
    "threading.Event.set": [],
    "_threading_local": [
        "weakref",
        "_threading_local.local",
        "contextlib.contextmanager",
        "contextlib",
        "threading",
        "_threading_local._localimpl"
    ],
    "weakref": [
        "weakref.WeakValueDictionary",
        "weakref.KeyedRef",
        "weakref.WeakMethod",
        "_weakrefset",
        "weakref.WeakKeyDictionary",
        "weakref.finalize"
    ],
    "weakref.WeakMethod": [],
    "weakref.WeakValueDictionary": [],
    "weakref.KeyedRef": [],
    "weakref.WeakKeyDictionary": [],
    "weakref.finalize": [
        "weakref.finalize._Info",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "weakref.finalize._Info": [],
    "contextlib": [
        "contextlib._RedirectStream",
        "contextlib.AbstractAsyncContextManager",
        "contextlib.ContextDecorator",
        "functools",
        "contextlib.AsyncExitStack",
        "contextlib.AbstractContextManager",
        "contextlib.closing",
        "contextlib.nullcontext",
        "contextlib._BaseExitStack",
        "contextlib._GeneratorContextManagerBase",
        "collections",
        "abc",
        "contextlib.ExitStack",
        "contextlib.redirect_stdout",
        "contextlib.redirect_stderr",
        "contextlib.suppress",
        "types",
        "contextlib._GeneratorContextManager",
        "contextlib._AsyncGeneratorContextManager"
    ],
    "contextlib.AbstractContextManager": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "contextlib.AbstractAsyncContextManager": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "contextlib.ContextDecorator": [],
    "contextlib._GeneratorContextManagerBase": [],
    "contextlib._GeneratorContextManager": [],
    "contextlib._AsyncGeneratorContextManager": [],
    "contextlib.closing": [],
    "contextlib._RedirectStream": [],
    "contextlib.redirect_stdout": [],
    "contextlib.redirect_stderr": [],
    "contextlib.suppress": [],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.ExitStack": [],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.nullcontext": [],
    "_threading_local._localimpl": [],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "functools.wraps": [],
    "_threading_local.local": [],
    "signal": [
        "enum",
        "functools",
        "<builtin>.globals",
        "functools.wraps"
    ],
    "subprocess": [
        "threading",
        "selectors",
        "subprocess.STARTUPINFO",
        "_posixsubprocess",
        "os",
        "subprocess.SubprocessError",
        "<builtin>.getattr",
        "subprocess.Handle",
        "subprocess._use_posix_spawn",
        "warnings",
        "<builtin>.hasattr",
        "subprocess.Popen",
        "subprocess.TimeoutExpired",
        "select",
        "contextlib",
        "subprocess.CalledProcessError",
        "signal",
        "subprocess.CompletedProcess",
        "io"
    ],
    "warnings": [
        "<builtin>.hasattr",
        "warnings._processoptions",
        "warnings.simplefilter",
        "warnings.catch_warnings",
        "warnings._OptionError",
        "warnings.WarningMessage",
        "warnings.filterwarnings"
    ],
    "warnings._OptionError": [],
    "warnings.WarningMessage": [],
    "warnings.catch_warnings": [],
    "warnings._processoptions": [
        "warnings._setoption",
        "<builtin>.print"
    ],
    "warnings._setoption": [
        "re",
        "<builtin>.len",
        "warnings._getaction",
        "<builtin>.int",
        "warnings._getcategory",
        "re.escape",
        "warnings.filterwarnings"
    ],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.issubclass",
        "<builtin>.__import__",
        "<builtin>.getattr"
    ],
    "<builtin>.__import__": [],
    "<builtin>.issubclass": [],
    "re.escape": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "warnings.filterwarnings": [
        "<builtin>.isinstance",
        "re",
        "re.compile",
        "<builtin>.issubclass",
        "warnings._add_filter"
    ],
    "warnings._add_filter": [
        "warnings._filters_mutated",
        "<list>.append",
        "<list>.remove",
        "<list>.insert"
    ],
    "<list>.remove": [],
    "<list>.insert": [],
    "warnings._filters_mutated": [],
    "warnings.simplefilter": [
        "<builtin>.isinstance",
        "warnings._add_filter"
    ],
    "_posixsubprocess": [],
    "select": [],
    "selectors": [
        "collections",
        "<builtin>.hasattr",
        "abc",
        "selectors.EpollSelector",
        "selectors.BaseSelector",
        "selectors._PollLikeSelector",
        "selectors._SelectorMapping",
        "select",
        "selectors.KqueueSelector",
        "math",
        "collections.namedtuple",
        "selectors.PollSelector",
        "selectors._BaseSelectorImpl",
        "selectors.SelectSelector",
        "selectors.DevpollSelector",
        "<builtin>.globals",
        "collections.abc"
    ],
    "collections.abc": [
        "collections.abc"
    ],
    "math": [],
    "selectors._SelectorMapping": [],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors._BaseSelectorImpl": [],
    "selectors.SelectSelector": [],
    "selectors._PollLikeSelector": [],
    "selectors.PollSelector": [],
    "selectors.EpollSelector": [],
    "selectors.DevpollSelector": [],
    "selectors.KqueueSelector": [],
    "subprocess.SubprocessError": [],
    "subprocess.CalledProcessError": [
        "<builtin>.property"
    ],
    "subprocess.TimeoutExpired": [
        "<builtin>.property"
    ],
    "subprocess.STARTUPINFO": [],
    "subprocess.Handle": [],
    "subprocess.CompletedProcess": [],
    "subprocess._use_posix_spawn": [
        "<builtin>.tuple",
        "<builtin>.hasattr",
        "<builtin>.len",
        "<builtin>.map"
    ],
    "subprocess.Popen": [
        "<builtin>.property"
    ],
    "logging": [
        "logging.RootLogger",
        "logging.StringTemplateStyle",
        "logging.Logger",
        "string",
        "logging.PercentStyle",
        "threading",
        "logging.Formatter",
        "os",
        "logging.Manager",
        "collections.abc",
        "re",
        "ntpath.normcase",
        "logging._StderrHandler",
        "logging._StderrHandler.__init__",
        "logging.LoggerAdapter",
        "logging.Formatter.__init__",
        "warnings",
        "logging.PlaceHolder",
        "logging.Manager.__init__",
        "logging.BufferingFormatter",
        "weakref",
        "<builtin>.hasattr",
        "threading.RLock",
        "_weakrefset.WeakSet.__init__",
        "logging.StreamHandler",
        "logging.NullHandler",
        "logging.LogRecord",
        "traceback",
        "logging.Handler",
        "logging.Filterer",
        "weakref.WeakValueDictionary.__init__",
        "logging.FileHandler",
        "logging.RootLogger.__init__",
        "posixpath.normcase",
        "logging.StrFormatStyle",
        "io",
        "logging.Filter"
    ],
    "string": [
        "collections",
        "re",
        "string._TemplateMetaclass",
        "string.Template",
        "string.Formatter"
    ],
    "string._TemplateMetaclass": [],
    "string.Template": [],
    "string.Formatter": [],
    "posixpath.normcase": [
        "os._fspath"
    ],
    "os._fspath": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<str>.format",
        "<builtin>.TypeError"
    ],
    "<str>.format": [],
    "ntpath.normcase": [
        "<str>.replace",
        "<builtin>.isinstance",
        "<str>.lower",
        "os._fspath"
    ],
    "logging.LogRecord": [],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.StringTemplateStyle": [],
    "logging.Formatter": [],
    "logging.Formatter.__init__": [
        "<builtin>.ValueError",
        "<map>.keys"
    ],
    "<map>.keys": [],
    "logging.BufferingFormatter": [],
    "logging.Filter": [],
    "logging.Filterer": [],
    "weakref.WeakValueDictionary.__init__": [
        "weakref.WeakValueDictionary.update",
        "<builtin>.set",
        "_weakref.ref"
    ],
    "weakref.WeakValueDictionary.update": [
        "weakref.KeyedRef.__init__",
        "<builtin>.hasattr",
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.dict"
    ],
    "weakref.WeakValueDictionary._commit_removals": [
        "_weakref._remove_dead_weakref"
    ],
    "_weakref._remove_dead_weakref": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging.StreamHandler": [],
    "logging.FileHandler": [],
    "logging._StderrHandler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.Handler.__init__": [
        "logging.Handler.createLock",
        "logging._addHandlerRef",
        "logging.Filterer.__init__",
        "logging._checkLevel"
    ],
    "logging.Filterer.__init__": [],
    "logging._checkLevel": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "logging._addHandlerRef": [
        "<list>.append",
        "logging._acquireLock"
    ],
    "logging._acquireLock": [
        "threading._RLock.acquire"
    ],
    "threading._RLock.acquire": [
        "_thread.get_ident"
    ],
    "logging.Handler.createLock": [
        "threading.RLock",
        "logging._register_at_fork_reinit_lock"
    ],
    "logging._register_at_fork_reinit_lock": [
        "logging._acquireLock",
        "_weakrefset.WeakSet.add"
    ],
    "logging.PlaceHolder": [],
    "logging.Manager": [],
    "logging.Logger": [],
    "logging.RootLogger": [],
    "logging.LoggerAdapter": [
        "<builtin>.property"
    ],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.Logger.__init__": [
        "logging.Filterer.__init__",
        "logging._checkLevel"
    ],
    "logging.Manager.__init__": [],
    "logging.NullHandler": [],
    "logging.handlers": [
        "threading",
        "copy",
        "logging.handlers.QueueListener",
        "logging.handlers.HTTPHandler",
        "os",
        "re",
        "logging.handlers.NTEventLogHandler",
        "stat",
        "logging.handlers.WatchedFileHandler",
        "logging.handlers.BufferingHandler",
        "struct",
        "logging.handlers.SysLogHandler",
        "queue",
        "logging.handlers.RotatingFileHandler",
        "logging.handlers.BaseRotatingHandler",
        "logging.handlers.TimedRotatingFileHandler",
        "logging.handlers.DatagramHandler",
        "logging",
        "logging.handlers.SocketHandler",
        "logging.handlers.MemoryHandler",
        "logging.handlers.QueueHandler",
        "logging.handlers.SMTPHandler",
        "socket",
        "pickle"
    ],
    "socket": [
        "<builtin>.hasattr",
        "enum",
        "<list>.extend",
        "<builtin>.getattr",
        "io",
        "<list>.append",
        "<builtin>.object",
        "socket.socket",
        "selectors",
        "socket._GiveupOnSendfile",
        "_socket",
        "os",
        "socket.SocketIO"
    ],
    "_socket": [],
    "socket._GiveupOnSendfile": [],
    "socket.socket": [
        "<builtin>.hasattr",
        "<builtin>.property"
    ],
    "socket.SocketIO": [
        "<builtin>.property"
    ],
    "pickle": [
        "<list>.extend",
        "io",
        "pickle.PicklingError",
        "<list>.append",
        "re",
        "pickle._Pickler",
        "pickle.PickleError",
        "functools",
        "pickle.UnpicklingError",
        "struct",
        "copyreg",
        "codecs",
        "pickle._Unframer",
        "pickle._Stop",
        "pickle._Unpickler",
        "_compat_pickle",
        "pickle._Framer",
        "types",
        "_pickle"
    ],
    "struct": [
        "_struct"
    ],
    "_struct": [],
    "_compat_pickle": [
        "<map>.update",
        "<builtin>.dict",
        "<map>.items",
        "<builtin>.len"
    ],
    "<map>.update": [],
    "_pickle": [],
    "pickle.PickleError": [],
    "pickle.PicklingError": [],
    "pickle.UnpicklingError": [],
    "pickle._Stop": [],
    "pickle._Framer": [],
    "pickle._Unframer": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "pickle._Unpickler": [],
    "queue": [
        "collections",
        "queue.PriorityQueue",
        "heapq",
        "queue.Queue",
        "queue._PySimpleQueue",
        "_queue",
        "threading",
        "queue.Empty",
        "queue.Full",
        "queue.LifoQueue"
    ],
    "_queue": [],
    "queue.Empty": [],
    "queue.Full": [],
    "queue.Queue": [],
    "queue.PriorityQueue": [],
    "queue.LifoQueue": [],
    "queue._PySimpleQueue": [],
    "copy": [
        "weakref",
        "<builtin>.type",
        "<builtin>.getattr",
        "copyreg",
        "copy.Error",
        "types"
    ],
    "copy.Error": [],
    "logging.handlers.BaseRotatingHandler": [],
    "logging.handlers.RotatingFileHandler": [],
    "logging.handlers.TimedRotatingFileHandler": [],
    "logging.handlers.WatchedFileHandler": [],
    "logging.handlers.SocketHandler": [],
    "logging.handlers.DatagramHandler": [],
    "logging.handlers.SysLogHandler": [],
    "logging.handlers.SMTPHandler": [],
    "logging.handlers.NTEventLogHandler": [],
    "logging.handlers.HTTPHandler": [],
    "logging.handlers.BufferingHandler": [],
    "logging.handlers.MemoryHandler": [],
    "logging.handlers.QueueHandler": [],
    "logging.handlers.QueueListener": [],
    "argparse": [
        "argparse.ArgumentError",
        "argparse._ArgumentGroup",
        "argparse._AppendAction",
        "shutil",
        "os",
        "argparse._ExtendAction",
        "re",
        "argparse.MetavarTypeHelpFormatter",
        "argparse._HelpAction",
        "argparse.ArgumentTypeError",
        "argparse._ActionsContainer",
        "argparse.HelpFormatter",
        "argparse.FileType",
        "argparse.Namespace",
        "argparse._SubParsersAction",
        "argparse.RawDescriptionHelpFormatter",
        "argparse._MutuallyExclusiveGroup",
        "argparse.ArgumentParser",
        "argparse._AppendConstAction",
        "argparse._VersionAction",
        "argparse._StoreAction",
        "argparse._StoreTrueAction",
        "gettext",
        "argparse.Action",
        "argparse._CountAction",
        "argparse._StoreConstAction",
        "argparse.RawTextHelpFormatter",
        "argparse.ArgumentDefaultsHelpFormatter",
        "argparse._AttributeHolder",
        "argparse._StoreFalseAction"
    ],
    "shutil": [
        "shutil.SpecialFileError",
        "collections",
        "<builtin>.hasattr",
        "shutil.SameFileError",
        "zlib",
        "shutil.ExecError",
        "shutil.ReadError",
        "fnmatch",
        "shutil.Error",
        "shutil.RegistryError",
        "shutil._GiveupOnFastCopy",
        "lzma",
        "<list>.append",
        "collections.namedtuple",
        "stat",
        "os",
        "grp",
        "bz2"
    ],
    "fnmatch": [
        "posixpath",
        "re",
        "functools.lru_cache",
        "functools",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache.decorating_function",
        "os"
    ],
    "zlib": [],
    "bz2": [
        "bz2.BZ2File",
        "_compression",
        "warnings",
        "_bz2",
        "<builtin>.object",
        "threading",
        "io",
        "os"
    ],
    "_compression": [
        "_compression.DecompressReader",
        "_compression.BaseStream",
        "io"
    ],
    "_compression.BaseStream": [],
    "_compression.DecompressReader": [],
    "_bz2": [],
    "bz2.BZ2File": [
        "<builtin>.property"
    ],
    "lzma": [
        "_lzma",
        "_compression",
        "lzma.LZMAFile",
        "io",
        "os"
    ],
    "_lzma": [],
    "lzma.LZMAFile": [
        "<builtin>.property"
    ],
    "grp": [],
    "shutil.Error": [],
    "shutil.SameFileError": [],
    "shutil.SpecialFileError": [],
    "shutil.ExecError": [],
    "shutil.ReadError": [],
    "shutil.RegistryError": [],
    "shutil._GiveupOnFastCopy": [],
    "gettext": [
        "re",
        "locale",
        "re.compile",
        "ntpath.join",
        "<builtin>.enumerate",
        "gettext.NullTranslations",
        "gettext.GNUTranslations",
        "posixpath.join",
        "os"
    ],
    "locale": [
        "<builtin>.hasattr",
        "re",
        "re.compile",
        "encodings",
        "functools.wraps",
        "functools",
        "<map>.setdefault",
        "encodings.aliases",
        "<builtin>.sorted",
        "<builtin>.globals",
        "<map>.items",
        "collections.abc"
    ],
    "encodings.aliases": [],
    "<map>.setdefault": [],
    "posixpath.join": [
        "genericpath._check_arg_types",
        "<str>.endswith",
        "posixpath._get_sep",
        "<builtin>.map",
        "os._fspath"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "ntpath.join": [
        "genericpath._check_arg_types",
        "ntpath.splitdrive",
        "<builtin>.isinstance",
        "<str>.lower",
        "<builtin>.map",
        "os._fspath"
    ],
    "ntpath.splitdrive": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "<str>.find",
        "<str>.replace",
        "os._fspath"
    ],
    "gettext.NullTranslations": [],
    "gettext.GNUTranslations": [],
    "argparse._AttributeHolder": [],
    "argparse.HelpFormatter": [
        "argparse.HelpFormatter._Section"
    ],
    "argparse.HelpFormatter._Section": [],
    "argparse.RawDescriptionHelpFormatter": [],
    "argparse.RawTextHelpFormatter": [],
    "argparse.ArgumentDefaultsHelpFormatter": [],
    "argparse.MetavarTypeHelpFormatter": [],
    "argparse.ArgumentError": [],
    "argparse.ArgumentTypeError": [],
    "argparse.Action": [],
    "argparse._StoreAction": [],
    "argparse._StoreConstAction": [],
    "argparse._StoreTrueAction": [],
    "argparse._StoreFalseAction": [],
    "argparse._AppendAction": [],
    "argparse._AppendConstAction": [],
    "argparse._CountAction": [],
    "argparse._HelpAction": [],
    "argparse._VersionAction": [],
    "argparse._SubParsersAction": [
        "argparse._SubParsersAction._ChoicesPseudoAction"
    ],
    "argparse._SubParsersAction._ChoicesPseudoAction": [],
    "argparse._ExtendAction": [],
    "argparse.FileType": [],
    "argparse.Namespace": [],
    "argparse._ActionsContainer": [],
    "argparse._ArgumentGroup": [],
    "argparse._MutuallyExclusiveGroup": [],
    "argparse.ArgumentParser": [],
    "urllib.request": [
        "posixpath",
        "re.compile",
        "urllib.request.FTPHandler",
        "urllib.request.DataHandler",
        "email",
        "urllib.request.FancyURLopener",
        "string",
        "ssl",
        "urllib.request.HTTPDigestAuthHandler",
        "<list>.append",
        "http.client",
        "urllib.request.HTTPErrorProcessor",
        "urllib.error",
        "os",
        "urllib.request.AbstractDigestAuthHandler",
        "re",
        "urllib.request.HTTPBasicAuthHandler",
        "urllib.request.ProxyBasicAuthHandler",
        "urllib.request.URLopener",
        "warnings",
        "urllib.request.FileHandler",
        "urllib.request.AbstractHTTPHandler",
        "urllib.request.HTTPPasswordMgr",
        "urllib.request.HTTPRedirectHandler",
        "urllib.request.Request",
        "urllib.response",
        "_scproxy",
        "urllib.request.ProxyHandler",
        "<builtin>.hasattr",
        "urllib.request.HTTPHandler",
        "urllib.request.HTTPCookieProcessor",
        "urllib.request.UnknownHandler",
        "base64",
        "contextlib",
        "urllib.request.ProxyDigestAuthHandler",
        "urllib.request.OpenerDirector",
        "tempfile",
        "urllib.request.HTTPDefaultErrorHandler",
        "urllib.request.CacheFTPHandler",
        "hashlib",
        "urllib.request.BaseHandler",
        "urllib.request.HTTPPasswordMgrWithDefaultRealm",
        "urllib.request.ftpwrapper",
        "bisect",
        "urllib.request.AbstractBasicAuthHandler",
        "urllib.request.HTTPSHandler",
        "nturl2path",
        "urllib.parse",
        "io",
        "socket",
        "urllib.request.HTTPPasswordMgrWithPriorAuth"
    ],
    "base64": [
        "struct",
        "re",
        "binascii"
    ],
    "binascii": [],
    "bisect": [
        "_bisect"
    ],
    "_bisect": [],
    "email": [],
    "hashlib": [
        "_hashlib",
        "hashlib.__get_openssl_constructor",
        "<builtin>.bytes",
        "hashlib.__get_builtin_constructor",
        "<builtin>.globals",
        "<builtin>.range",
        "<builtin>.set",
        "logging.exception",
        "logging"
    ],
    "_hashlib": [],
    "hashlib.__get_openssl_constructor": [
        "<builtin>.getattr",
        "hashlib.__get_builtin_constructor"
    ],
    "hashlib.__get_builtin_constructor": [
        "_sha512",
        "_md5",
        "_sha3",
        "_sha1",
        "<builtin>.ValueError",
        "<map>.get",
        "_blake2",
        "_sha256"
    ],
    "_sha3": [],
    "_blake2": [],
    "_sha512": [],
    "_sha256": [],
    "_md5": [],
    "_sha1": [],
    "logging.exception": [
        "logging.error"
    ],
    "logging.error": [
        "<builtin>.len",
        "logging.basicConfig",
        "logging.Logger.error"
    ],
    "logging.basicConfig": [
        "logging.Logger.setLevel",
        "<builtin>.len",
        "logging.Handler.setFormatter",
        "logging.Formatter.__init__",
        "logging.Logger.removeHandler",
        "<map>.keys",
        "logging._acquireLock",
        "logging.FileHandler.__init__",
        "<builtin>.ValueError",
        "logging.Logger.addHandler",
        "logging.StreamHandler.__init__"
    ],
    "logging.Logger.removeHandler": [
        "logging._acquireLock",
        "<list>.remove"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.FileHandler.__init__": [
        "posixpath.abspath",
        "logging.FileHandler._open",
        "os._fspath",
        "logging.StreamHandler.__init__",
        "logging.Handler.__init__",
        "ntpath.abspath"
    ],
    "posixpath.abspath": [
        "<builtin>.isinstance",
        "posixpath.normpath",
        "posixpath.join",
        "posixpath.isabs",
        "os._fspath"
    ],
    "posixpath.isabs": [
        "<str>.startswith",
        "posixpath._get_sep",
        "os._fspath"
    ],
    "posixpath.normpath": [
        "<builtin>.isinstance",
        "<list>.pop",
        "<list>.append",
        "<str>.startswith",
        "<str>.split",
        "os._fspath"
    ],
    "<list>.pop": [],
    "ntpath.abspath": [],
    "logging.FileHandler._open": [
        "<builtin>.open"
    ],
    "<builtin>.open": [],
    "logging.Handler.setFormatter": [],
    "logging.Logger.addHandler": [
        "<list>.append",
        "logging._acquireLock"
    ],
    "logging.Logger.setLevel": [
        "logging._checkLevel"
    ],
    "logging.Logger.error": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.isEnabledFor": [
        "logging._acquireLock",
        "logging.Logger.getEffectiveLevel"
    ],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger._log": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "logging.Logger.findCaller",
        "logging.Logger.handle",
        "logging.Logger.makeRecord"
    ],
    "logging.Logger.findCaller": [
        "<builtin>.hasattr",
        "ntpath.normcase",
        "traceback.print_stack",
        "_io.StringIO",
        "posixpath.normcase",
        "logging.currentframe"
    ],
    "logging.currentframe": [],
    "_io.StringIO": [],
    "traceback.print_stack": [
        "traceback.extract_stack",
        "traceback.print_list"
    ],
    "traceback.extract_stack": [
        "traceback.walk_stack",
        "traceback.StackSummary.extract"
    ],
    "traceback.walk_stack": [],
    "traceback.StackSummary.extract": [
        "<builtin>.getattr",
        "_collections.deque",
        "traceback.FrameSummary.__init__",
        "linecache.lazycache",
        "linecache.checkcache",
        "<builtin>.set"
    ],
    "linecache.lazycache": [
        "<builtin>.len",
        "<builtin>.getattr",
        "<str>.startswith",
        "<str>.endswith"
    ],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "linecache.checkcache": [
        "<builtin>.len",
        "<builtin>.list",
        "<map>.keys"
    ],
    "traceback.print_list": [
        "traceback.StackSummary.from_list",
        "<builtin>.print",
        "traceback.StackSummary.format"
    ],
    "traceback.StackSummary.from_list": [
        "<builtin>.isinstance",
        "traceback.FrameSummary.__init__"
    ],
    "traceback.StackSummary.format": [
        "<list>.append",
        "<builtin>.sorted"
    ],
    "logging.Logger.makeRecord": [
        "<builtin>.KeyError",
        "logging.LogRecord.__init__"
    ],
    "logging.LogRecord.__init__": [
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.len",
        "ntpath.basename",
        "<builtin>.int",
        "ntpath.splitext",
        "threading.current_thread",
        "logging.getLevelName",
        "posixpath.splitext",
        "_thread.get_ident",
        "posixpath.basename"
    ],
    "logging.getLevelName": [
        "<map>.get"
    ],
    "posixpath.basename": [
        "<str>.rfind",
        "posixpath._get_sep",
        "os._fspath"
    ],
    "<str>.rfind": [],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "ntpath.split": [
        "ntpath.splitdrive",
        "<builtin>.len",
        "ntpath._get_bothseps",
        "os._fspath"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "<str>.find": [],
    "posixpath.splitext": [
        "<builtin>.isinstance",
        "genericpath._splitext",
        "os._fspath"
    ],
    "genericpath._splitext": [
        "<str>.rfind",
        "<builtin>.max"
    ],
    "ntpath.splitext": [
        "<builtin>.isinstance",
        "genericpath._splitext",
        "os._fspath"
    ],
    "<builtin>.KeyError": [],
    "logging.Logger.handle": [
        "logging.Filterer.filter",
        "logging.Logger.callHandlers"
    ],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging.Logger.callHandlers": [
        "logging.Handler.handle"
    ],
    "logging.Handler.handle": [
        "logging.Handler.acquire",
        "logging.Filterer.filter",
        "logging.FileHandler.emit",
        "logging.Handler.emit",
        "logging.StreamHandler.emit"
    ],
    "logging.Handler.acquire": [
        "threading._RLock.acquire"
    ],
    "logging.FileHandler.emit": [
        "logging.StreamHandler.emit",
        "logging.FileHandler._open"
    ],
    "logging.StreamHandler.emit": [
        "logging.StreamHandler.flush",
        "logging.Handler.handleError",
        "logging.Handler.format"
    ],
    "logging.Handler.format": [
        "logging.Formatter.format"
    ],
    "logging.Formatter.format": [
        "logging.Formatter.formatTime",
        "logging.Formatter.formatException",
        "logging.LogRecord.getMessage",
        "logging.Formatter.formatStack",
        "logging.Formatter.usesTime",
        "logging.Formatter.formatMessage"
    ],
    "logging.LogRecord.getMessage": [
        "<builtin>.str"
    ],
    "logging.Formatter.usesTime": [],
    "logging.Formatter.formatTime": [],
    "logging.Formatter.formatMessage": [],
    "logging.Formatter.formatException": [
        "traceback.print_exception",
        "_io.StringIO"
    ],
    "traceback.print_exception": [
        "<builtin>.type",
        "<builtin>.print",
        "traceback.TracebackException.__init__",
        "traceback.TracebackException.format"
    ],
    "traceback.TracebackException.__init__": [
        "<builtin>.type",
        "traceback.TracebackException._load_lines",
        "<builtin>.str",
        "traceback.StackSummary.extract",
        "traceback.TracebackException.__init__",
        "<builtin>.id",
        "traceback._some_str",
        "<builtin>.issubclass",
        "<builtin>.set",
        "traceback.walk_tb"
    ],
    "<builtin>.id": [],
    "traceback.walk_tb": [],
    "traceback._some_str": [
        "<builtin>.type",
        "<builtin>.str"
    ],
    "traceback.TracebackException._load_lines": [],
    "traceback.TracebackException.format": [
        "traceback.TracebackException.format_exception_only",
        "traceback.StackSummary.format",
        "traceback.TracebackException.format"
    ],
    "traceback.TracebackException.format_exception_only": [
        "traceback._format_final_exc_line",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.issubclass",
        "<builtin>.min"
    ],
    "traceback._format_final_exc_line": [
        "traceback._some_str"
    ],
    "logging.Formatter.formatStack": [],
    "logging.StreamHandler.flush": [
        "logging.Handler.acquire",
        "logging.StreamHandler.flush",
        "<builtin>.hasattr"
    ],
    "logging.Handler.handleError": [
        "traceback.print_exception",
        "traceback.print_stack",
        "posixpath.dirname",
        "ntpath.dirname"
    ],
    "posixpath.dirname": [
        "<str>.rfind",
        "<builtin>.len",
        "posixpath._get_sep",
        "os._fspath"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "<builtin>.NotImplementedError": [],
    "http.client": [
        "http.client.ResponseNotReady",
        "re.compile",
        "email.message",
        "http.client.HTTPResponse",
        "ssl",
        "http.client.IncompleteRead",
        "collections.abc",
        "re",
        "http.client.RemoteDisconnected",
        "http.client.HTTPException",
        "http.client.UnknownProtocol",
        "email.parser",
        "http.client.InvalidURL",
        "http.client.CannotSendRequest",
        "http.client.UnknownTransferEncoding",
        "http.client.LineTooLong",
        "http.client.UnimplementedFileMode",
        "http.client.BadStatusLine",
        "http.client.HTTPMessage",
        "http.client.HTTPConnection",
        "http",
        "http.client.NotConnected",
        "http.client.CannotSendHeader",
        "urllib.parse",
        "io",
        "socket",
        "<builtin>.globals",
        "http.client.ImproperConnectionState"
    ],
    "email.parser": [
        "email.parser.Parser",
        "email.parser.BytesParser",
        "email.feedparser",
        "email.parser.HeaderParser",
        "email.parser.BytesHeaderParser",
        "io",
        "email._policybase"
    ],
    "email.feedparser": [
        "collections",
        "re",
        "email.errors",
        "re.compile",
        "email.feedparser.BufferedSubFile",
        "<builtin>.object",
        "io",
        "email.feedparser.BytesFeedParser",
        "email._policybase",
        "email.feedparser.FeedParser"
    ],
    "email.errors": [
        "email.errors.InvalidBase64PaddingDefect",
        "email.errors.InvalidBase64CharactersDefect",
        "email.errors.BoundaryError",
        "email.errors.NoBoundaryInMultipartDefect",
        "email.errors.HeaderParseError",
        "email.errors.UndecodableBytesDefect",
        "email.errors.MissingHeaderBodySeparatorDefect",
        "email.errors.StartBoundaryNotFoundDefect",
        "email.errors.NonASCIILocalPartDefect",
        "email.errors.MessageParseError",
        "email.errors.ObsoleteHeaderDefect",
        "email.errors.MessageDefect",
        "email.errors.MessageError",
        "email.errors.MultipartConversionError",
        "email.errors.CharsetError",
        "email.errors.HeaderMissingRequiredValue",
        "email.errors.MultipartInvariantViolationDefect",
        "email.errors.HeaderDefect",
        "email.errors.InvalidHeaderDefect",
        "email.errors.MisplacedEnvelopeHeaderDefect",
        "email.errors.FirstHeaderLineIsContinuationDefect",
        "email.errors.InvalidMultipartContentTransferEncodingDefect",
        "email.errors.InvalidBase64LengthDefect",
        "email.errors.CloseBoundaryNotFoundDefect",
        "email.errors.NonPrintableDefect"
    ],
    "email.errors.MessageError": [],
    "email.errors.MessageParseError": [],
    "email.errors.HeaderParseError": [],
    "email.errors.BoundaryError": [],
    "email.errors.MultipartConversionError": [],
    "email.errors.CharsetError": [],
    "email.errors.MessageDefect": [],
    "email.errors.NoBoundaryInMultipartDefect": [],
    "email.errors.StartBoundaryNotFoundDefect": [],
    "email.errors.CloseBoundaryNotFoundDefect": [],
    "email.errors.FirstHeaderLineIsContinuationDefect": [],
    "email.errors.MisplacedEnvelopeHeaderDefect": [],
    "email.errors.MissingHeaderBodySeparatorDefect": [],
    "email.errors.MultipartInvariantViolationDefect": [],
    "email.errors.InvalidMultipartContentTransferEncodingDefect": [],
    "email.errors.UndecodableBytesDefect": [],
    "email.errors.InvalidBase64PaddingDefect": [],
    "email.errors.InvalidBase64CharactersDefect": [],
    "email.errors.InvalidBase64LengthDefect": [],
    "email.errors.HeaderDefect": [],
    "email.errors.InvalidHeaderDefect": [],
    "email.errors.HeaderMissingRequiredValue": [],
    "email.errors.NonPrintableDefect": [],
    "email.errors.ObsoleteHeaderDefect": [],
    "email.errors.NonASCIILocalPartDefect": [],
    "email._policybase": [
        "email.header",
        "abc",
        "email._policybase.Policy",
        "email.charset",
        "email._policybase._PolicyBase",
        "email._policybase.Compat32",
        "email.utils"
    ],
    "email.header": [
        "re",
        "email.errors",
        "re.compile",
        "email.charset",
        "email.charset.Charset.__init__",
        "email.header._Accumulator",
        "email.base64mime",
        "binascii",
        "email.header.Header",
        "email.quoprimime",
        "email.header._ValueFormatter"
    ],
    "email.quoprimime": [
        "re",
        "<str>.encode",
        "<builtin>.ord",
        "string",
        "<builtin>.range",
        "<builtin>.chr"
    ],
    "<str>.encode": [],
    "email.base64mime": [
        "binascii",
        "base64"
    ],
    "email.charset": [
        "email.errors",
        "functools",
        "email.base64mime",
        "email.encoders",
        "email.charset.Charset",
        "email.quoprimime"
    ],
    "email.encoders": [
        "quopri",
        "base64"
    ],
    "quopri": [
        "binascii"
    ],
    "email.charset.Charset": [],
    "email.charset.Charset.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "<str>.encode",
        "<str>.lower",
        "<map>.get"
    ],
    "<str>.lower": [],
    "email.header.Header": [],
    "email.header._ValueFormatter": [],
    "email.header._Accumulator": [],
    "email.utils": [
        "re",
        "re.compile",
        "datetime",
        "email.charset",
        "random",
        "email._parseaddr",
        "urllib.parse",
        "socket",
        "os"
    ],
    "random": [
        "<builtin>.hasattr",
        "_random",
        "hashlib",
        "_sha512",
        "random.Random.__init__",
        "bisect",
        "math",
        "random.Random",
        "warnings",
        "os",
        "random.SystemRandom",
        "collections.abc"
    ],
    "_random": [],
    "random.Random": [],
    "random.SystemRandom": [],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "random.Random.seed": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.ord",
        "<builtin>.super",
        "<builtin>.map"
    ],
    "datetime": [
        "datetime.timezone._create",
        "datetime.date",
        "datetime.tzinfo",
        "math",
        "<list>.append",
        "datetime.timedelta",
        "datetime.time",
        "_datetime",
        "datetime._days_before_year",
        "datetime.timezone",
        "datetime.datetime"
    ],
    "datetime._days_before_year": [],
    "datetime.timedelta": [
        "<builtin>.property"
    ],
    "datetime.date": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.tzinfo": [],
    "datetime.time": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.datetime": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.timezone": [
        "<builtin>.staticmethod",
        "<builtin>.object",
        "<builtin>.classmethod"
    ],
    "datetime.timezone._create": [],
    "_datetime": [],
    "urllib.parse": [
        "re.compile",
        "urllib.parse.DefragResultBytes",
        "urllib.parse.SplitResult",
        "<builtin>.frozenset",
        "urllib.parse.Quoter",
        "urllib.parse._NetlocResultMixinStr",
        "re",
        "urllib.parse.ParseResultBytes",
        "urllib.parse._NetlocResultMixinBytes",
        "urllib.parse.ParseResult",
        "warnings",
        "urllib.parse._NetlocResultMixinBase",
        "urllib.parse.SplitResultBytes",
        "urllib.parse._ResultMixinStr",
        "urllib.parse._ResultMixinBytes",
        "urllib.parse.DefragResult",
        "urllib.parse._fix_result_transcoding",
        "collections",
        "collections.namedtuple",
        "<builtin>.bytes"
    ],
    "urllib.parse._ResultMixinStr": [],
    "urllib.parse._ResultMixinBytes": [],
    "urllib.parse._NetlocResultMixinBase": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinStr": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinBytes": [
        "<builtin>.property"
    ],
    "urllib.parse.DefragResult": [],
    "urllib.parse.SplitResult": [],
    "urllib.parse.ParseResult": [],
    "urllib.parse.DefragResultBytes": [],
    "urllib.parse.SplitResultBytes": [],
    "urllib.parse.ParseResultBytes": [],
    "urllib.parse._fix_result_transcoding": [],
    "urllib.parse.Quoter": [],
    "email._parseaddr": [
        "calendar",
        "email._parseaddr.AddressList",
        "email._parseaddr.AddrlistClass"
    ],
    "calendar": [
        "datetime.date.toordinal",
        "locale",
        "calendar.IllegalMonthError",
        "calendar.TextCalendar",
        "calendar.Calendar",
        "calendar.HTMLCalendar",
        "calendar._localized_month",
        "datetime",
        "calendar.LocaleTextCalendar",
        "calendar._localized_month.__init__",
        "calendar.IllegalWeekdayError",
        "calendar._localized_day",
        "calendar.LocaleHTMLCalendar",
        "<builtin>.range",
        "calendar.different_locale",
        "calendar._localized_day.__init__"
    ],
    "calendar.IllegalMonthError": [],
    "calendar.IllegalWeekdayError": [],
    "calendar._localized_month": [
        "<builtin>.range"
    ],
    "calendar._localized_day": [
        "<builtin>.range"
    ],
    "calendar._localized_day.__init__": [],
    "calendar._localized_month.__init__": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "calendar.TextCalendar": [],
    "calendar.HTMLCalendar": [],
    "calendar.different_locale": [],
    "calendar.LocaleTextCalendar": [],
    "calendar.LocaleHTMLCalendar": [],
    "datetime.date.toordinal": [
        "datetime._ymd2ord"
    ],
    "datetime._ymd2ord": [
        "datetime._days_before_month",
        "datetime._days_in_month",
        "datetime._days_before_year"
    ],
    "datetime._days_in_month": [
        "datetime._is_leap"
    ],
    "datetime._is_leap": [],
    "datetime._days_before_month": [
        "datetime._is_leap"
    ],
    "email._parseaddr.AddrlistClass": [],
    "email._parseaddr.AddressList": [],
    "email._policybase._PolicyBase": [],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email._policybase.Compat32": [],
    "email.feedparser.BufferedSubFile": [],
    "email.feedparser.FeedParser": [],
    "email.feedparser.BytesFeedParser": [],
    "email.parser.Parser": [],
    "email.parser.HeaderParser": [],
    "email.parser.BytesParser": [],
    "email.parser.BytesHeaderParser": [],
    "email.message": [
        "uu",
        "re",
        "email.errors",
        "re.compile",
        "email._encoded_words",
        "email.charset",
        "email.message.EmailMessage",
        "email.message.MIMEPart",
        "quopri",
        "email.message.Message",
        "io",
        "email._policybase",
        "email.utils"
    ],
    "uu": [
        "uu.Error",
        "binascii",
        "os"
    ],
    "uu.Error": [],
    "email._encoded_words": [
        "re",
        "email._encoded_words._QByteMap",
        "email.errors",
        "re.compile",
        "<builtin>.ord",
        "functools",
        "string",
        "base64",
        "binascii"
    ],
    "email._encoded_words._QByteMap": [
        "<str>.encode"
    ],
    "email.message.Message": [
        "email.iterators"
    ],
    "email.iterators": [
        "io"
    ],
    "email.message.MIMEPart": [],
    "email.message.EmailMessage": [],
    "http": [
        "enum",
        "http.HTTPStatus"
    ],
    "http.HTTPStatus": [],
    "http.client.HTTPMessage": [],
    "http.client.HTTPResponse": [],
    "http.client.HTTPConnection": [
        "<builtin>.staticmethod"
    ],
    "ssl": [
        "enum",
        "ssl.SSLSocket",
        "ssl.Purpose",
        "os",
        "<builtin>.getattr",
        "warnings",
        "ssl._TLSContentType",
        "<builtin>.hasattr",
        "ssl._ASN1Object",
        "_ssl",
        "ssl._TLSMessageType",
        "ssl.SSLObject",
        "base64",
        "ssl.TLSVersion",
        "collections",
        "ssl._TLSAlertType",
        "collections.namedtuple",
        "ssl.SSLContext",
        "socket"
    ],
    "_ssl": [],
    "ssl.TLSVersion": [],
    "ssl._TLSContentType": [],
    "ssl._TLSAlertType": [],
    "ssl._TLSMessageType": [],
    "ssl._ASN1Object": [
        "<builtin>.classmethod"
    ],
    "ssl.Purpose": [],
    "ssl.SSLContext": [
        "<builtin>.hasattr",
        "<builtin>.property"
    ],
    "ssl.SSLObject": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "ssl.SSLSocket": [
        "<builtin>.property",
        "ssl._sslcopydoc",
        "<builtin>.classmethod"
    ],
    "ssl._sslcopydoc": [
        "<builtin>.getattr"
    ],
    "http.client.HTTPException": [],
    "http.client.NotConnected": [],
    "http.client.InvalidURL": [],
    "http.client.UnknownProtocol": [],
    "http.client.UnknownTransferEncoding": [],
    "http.client.UnimplementedFileMode": [],
    "http.client.IncompleteRead": [],
    "http.client.ImproperConnectionState": [],
    "http.client.CannotSendRequest": [],
    "http.client.CannotSendHeader": [],
    "http.client.ResponseNotReady": [],
    "http.client.BadStatusLine": [],
    "http.client.LineTooLong": [],
    "http.client.RemoteDisconnected": [],
    "tempfile": [
        "weakref",
        "<builtin>.hasattr",
        "tempfile._RandomNameSequence",
        "functools",
        "tempfile._TemporaryFileWrapper",
        "warnings",
        "random",
        "tempfile.SpooledTemporaryFile",
        "io",
        "shutil",
        "os",
        "tempfile._TemporaryFileCloser",
        "tempfile.TemporaryDirectory"
    ],
    "tempfile._RandomNameSequence": [
        "<builtin>.property"
    ],
    "tempfile._TemporaryFileCloser": [],
    "tempfile._TemporaryFileWrapper": [],
    "tempfile.SpooledTemporaryFile": [
        "<builtin>.property"
    ],
    "tempfile.TemporaryDirectory": [
        "<builtin>.classmethod"
    ],
    "urllib.error": [
        "urllib.error.HTTPError",
        "urllib.response",
        "urllib.error.URLError",
        "urllib.error.ContentTooShortError"
    ],
    "urllib.response": [
        "urllib.response.addbase",
        "urllib.response.addinfo",
        "urllib.response.addclosehook",
        "urllib.response.addinfourl",
        "tempfile"
    ],
    "urllib.response.addbase": [],
    "urllib.response.addclosehook": [],
    "urllib.response.addinfo": [],
    "urllib.response.addinfourl": [],
    "urllib.error.URLError": [],
    "urllib.error.HTTPError": [
        "<builtin>.property"
    ],
    "urllib.error.ContentTooShortError": [],
    "urllib.request.Request": [
        "<builtin>.property"
    ],
    "urllib.request.OpenerDirector": [],
    "urllib.request.BaseHandler": [],
    "urllib.request.HTTPErrorProcessor": [],
    "urllib.request.HTTPDefaultErrorHandler": [],
    "urllib.request.HTTPRedirectHandler": [],
    "urllib.request.ProxyHandler": [],
    "urllib.request.HTTPPasswordMgr": [],
    "urllib.request.HTTPPasswordMgrWithDefaultRealm": [],
    "urllib.request.HTTPPasswordMgrWithPriorAuth": [],
    "urllib.request.AbstractBasicAuthHandler": [
        "re.compile"
    ],
    "urllib.request.HTTPBasicAuthHandler": [],
    "urllib.request.ProxyBasicAuthHandler": [],
    "urllib.request.AbstractDigestAuthHandler": [],
    "urllib.request.HTTPDigestAuthHandler": [],
    "urllib.request.ProxyDigestAuthHandler": [],
    "urllib.request.AbstractHTTPHandler": [],
    "urllib.request.HTTPHandler": [],
    "urllib.request.HTTPSHandler": [],
    "urllib.request.HTTPCookieProcessor": [],
    "urllib.request.UnknownHandler": [],
    "urllib.request.FileHandler": [],
    "urllib.request.FTPHandler": [],
    "urllib.request.CacheFTPHandler": [],
    "urllib.request.DataHandler": [],
    "nturl2path": [],
    "urllib.request.URLopener": [],
    "urllib.request.FancyURLopener": [],
    "urllib.request.ftpwrapper": [],
    "_scproxy": [],
    "typing": [
        "typing._ProtocolMeta",
        "typing.TypedDict",
        "operator",
        "typing.TypeVar.__init__",
        "typing._SpecialForm",
        "typing.TypeVar",
        "typing.SupportsComplex",
        "typing.SupportsRound",
        "typing.Generic",
        "typing._TypingEmpty",
        "collections.abc",
        "typing.ForwardRef",
        "re",
        "typing._Immutable",
        "typing._GenericAlias",
        "functools",
        "typing._VariadicGenericAlias",
        "typing._alias",
        "typing.NamedTupleMeta",
        "typing.IO",
        "typing.NamedTuple",
        "typing.BinaryIO",
        "contextlib",
        "typing.io",
        "typing.re",
        "typing._Final",
        "collections",
        "abc",
        "typing.SupportsAbs",
        "typing.TextIO",
        "typing.Protocol",
        "typing._TypingEllipsis",
        "typing.SupportsIndex",
        "typing.SupportsFloat",
        "typing._SpecialForm.__init__",
        "typing.SupportsBytes",
        "typing._TypedDictMeta",
        "types",
        "typing.SupportsInt"
    ],
    "typing._Final": [],
    "typing._Immutable": [],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._tp_cache": [
        "functools.lru_cache",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache.decorating_function",
        "<list>.append",
        "functools.wraps"
    ],
    "typing._SpecialForm.__init__": [],
    "typing.ForwardRef": [],
    "typing.TypeVar": [],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._VariadicGenericAlias": [
        "typing._tp_cache"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing._TypingEmpty": [],
    "typing._TypingEllipsis": [],
    "typing._ProtocolMeta": [],
    "typing.Protocol": [],
    "typing.TypeVar.__init__": [
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.bool",
        "typing._type_check",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "typing._type_check": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.callable",
        "typing.ForwardRef.__init__",
        "<builtin>.TypeError"
    ],
    "typing.ForwardRef.__init__": [
        "<builtin>.isinstance",
        "<builtin>.SyntaxError",
        "<builtin>.TypeError",
        "<builtin>.compile"
    ],
    "<builtin>.compile": [],
    "<builtin>.SyntaxError": [],
    "typing._alias": [
        "typing._GenericAlias.__init__"
    ],
    "typing._GenericAlias.__init__": [
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<map>.get",
        "typing._collect_type_vars"
    ],
    "typing._collect_type_vars": [
        "<builtin>.tuple",
        "<list>.append",
        "<builtin>.isinstance",
        "<list>.extend"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.NamedTupleMeta": [],
    "typing.NamedTuple": [],
    "typing._TypedDictMeta": [],
    "typing.TypedDict": [],
    "typing.IO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.io": [],
    "typing.re": [],
    "fcntl": [],
    "termios": [],
    "tty": [
        "termios"
    ],
    "psutil": [
        "psutil._pslinux",
        "psutil._pswindows",
        "<list>.extend",
        "<builtin>.tuple",
        "<builtin>.str",
        "psutil.Process",
        "<builtin>.dir",
        "datetime",
        "<builtin>.NotImplementedError",
        "<list>.append",
        "threading",
        "os",
        "subprocess",
        "psutil._pssunos",
        "psutil._psutil_posix",
        "<builtin>.getattr",
        "<builtin>.int",
        "functools",
        "psutil._compat",
        "<str>.split",
        "<builtin>.hasattr",
        "psutil._psosx",
        "psutil.cpu_times",
        "psutil._common",
        "contextlib",
        "<builtin>.object",
        "psutil.Popen",
        "psutil._psaix",
        "signal",
        "collections",
        "__future__",
        "<str>.replace",
        "<builtin>.ImportError",
        "psutil._psbsd",
        "<builtin>.globals",
        "<builtin>.set"
    ],
    "__future__": [
        "__future__._Feature.__init__",
        "__future__._Feature"
    ],
    "__future__._Feature": [],
    "__future__._Feature.__init__": [],
    "psutil._common": [
        "enum",
        "os.getenv",
        "psutil._common.NicDuplex",
        "threading",
        "psutil._common.memoize",
        "psutil._common.BatteryTime",
        "os",
        "psutil._common.Error",
        "psutil._common.AccessDenied",
        "functools",
        "warnings",
        "stat",
        "<map>.update",
        "<builtin>.bool",
        "psutil._common.NoSuchProcess",
        "contextlib",
        "<builtin>.object",
        "psutil._common.TimeoutExpired",
        "psutil._common._WrapNumbers.__init__",
        "collections",
        "__future__",
        "psutil._common.ZombieProcess",
        "collections.namedtuple",
        "socket",
        "<builtin>.globals",
        "psutil._common._WrapNumbers"
    ],
    "os.getenv": [],
    "psutil._common.NicDuplex": [],
    "psutil._common.BatteryTime": [],
    "psutil._common.Error": [],
    "psutil._common.NoSuchProcess": [],
    "psutil._common.ZombieProcess": [],
    "psutil._common.AccessDenied": [],
    "psutil._common.TimeoutExpired": [],
    "psutil._common.memoize": [
        "functools.wraps"
    ],
    "psutil._common._WrapNumbers": [],
    "psutil._common._WrapNumbers.__init__": [],
    "psutil._compat": [
        "<builtin>.RuntimeError",
        "threading",
        "shutil",
        "os",
        "subprocess",
        "functools",
        "psutil._compat.SubprocessTimeoutExpired",
        "<builtin>.type",
        "contextlib.contextmanager",
        "psutil._compat._HashedSeq",
        "contextlib",
        "platform",
        "<builtin>.object",
        "platform.python_implementation",
        "collections",
        "<builtin>.OSError",
        "psutil._compat._instance_checking_exception",
        "dummy_threading",
        "collections.namedtuple",
        "psutil._compat._instance_checking_exception.wrapped",
        "<builtin>.set",
        "types"
    ],
    "platform": [
        "collections",
        "re",
        "re.compile",
        "collections.namedtuple",
        "os"
    ],
    "psutil._compat._instance_checking_exception": [],
    "psutil._compat._instance_checking_exception.wrapped": [
        "psutil._compat._instance_checking_exception.wrapped.TemporaryClass"
    ],
    "psutil._compat._instance_checking_exception.wrapped.TemporaryClass": [
        "psutil._compat._instance_checking_exception.wrapped.TemporaryClass.__metaclass__"
    ],
    "psutil._compat._instance_checking_exception.wrapped.TemporaryClass.__metaclass__": [],
    "platform.python_implementation": [
        "platform._sys_version"
    ],
    "platform._sys_version": [
        "<builtin>.hasattr",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<map>.get",
        "<builtin>.repr"
    ],
    "<builtin>.OSError": [],
    "dummy_threading": [
        "_dummy_thread",
        "threading"
    ],
    "_dummy_thread": [
        "_dummy_thread.LockType",
        "_dummy_thread.RLock"
    ],
    "_dummy_thread.LockType": [],
    "_dummy_thread.RLock": [],
    "psutil._compat._HashedSeq": [],
    "psutil._compat.SubprocessTimeoutExpired": [],
    "psutil._psaix": [
        "collections",
        "re",
        "<builtin>.hasattr",
        "psutil._psutil_posix",
        "glob",
        "functools",
        "psutil._common",
        "collections.namedtuple",
        "psutil._compat",
        "psutil._psaix.Process",
        "psutil._psposix",
        "<builtin>.dict",
        "os",
        "subprocess"
    ],
    "glob": [
        "fnmatch",
        "re",
        "os",
        "re.compile"
    ],
    "psutil._psposix": [
        "<builtin>.hasattr",
        "enum",
        "<builtin>.getattr",
        "glob",
        "psutil._common",
        "psutil._compat",
        "psutil._common.memoize",
        "<builtin>.dict",
        "os",
        "signal"
    ],
    "psutil._psutil_posix": [],
    "psutil._psaix.Process": [
        "psutil._psaix.wrap_exceptions",
        "psutil._common.memoize_when_activated"
    ],
    "psutil._common.memoize_when_activated": [
        "functools.wraps"
    ],
    "psutil._psaix.wrap_exceptions": [
        "functools.wraps"
    ],
    "psutil._pssunos": [
        "collections",
        "psutil._psutil_posix",
        "functools",
        "psutil._common",
        "psutil._pssunos.Process",
        "collections.namedtuple",
        "psutil._compat",
        "psutil._psposix",
        "socket",
        "<builtin>.dict",
        "os",
        "subprocess"
    ],
    "psutil._pssunos.Process": [
        "collections.namedtuple",
        "psutil._pssunos.wrap_exceptions",
        "psutil._common.memoize_when_activated"
    ],
    "psutil._pssunos.wrap_exceptions": [
        "functools.wraps"
    ],
    "psutil._psbsd": [
        "collections",
        "<builtin>.hasattr",
        "psutil._psutil_posix",
        "contextlib.contextmanager",
        "functools",
        "psutil._psbsd.Process",
        "psutil._common",
        "contextlib",
        "collections.namedtuple",
        "psutil._compat",
        "psutil._psposix",
        "xml.etree.ElementTree",
        "psutil._common.memoize",
        "<builtin>.dict",
        "os"
    ],
    "xml.etree.ElementTree": [
        "re.compile",
        "xml.etree.ElementTree.ElementTree",
        "collections.abc",
        "re",
        "xml.etree.ElementTree.QName",
        "xml.etree.ElementTree.C14NWriterTarget",
        "xml.etree.ElementTree.ParseError",
        "warnings",
        "xml.etree.ElementPath",
        "xml.etree.ElementTree._ListDataStream",
        "contextlib.contextmanager",
        "contextlib",
        "xml.etree.ElementTree.XMLParser",
        "_elementtree",
        "xml.etree.ElementTree.XMLPullParser",
        "xml.etree.ElementTree.Element",
        "collections",
        "xml.etree.ElementTree.TreeBuilder",
        "io",
        "<builtin>.set"
    ],
    "xml.etree.ElementPath": [
        "re",
        "xml.etree.ElementPath._SelectorContext",
        "re.compile"
    ],
    "xml.etree.ElementPath._SelectorContext": [],
    "xml.etree.ElementTree.ParseError": [],
    "xml.etree.ElementTree.Element": [],
    "xml.etree.ElementTree.QName": [],
    "xml.etree.ElementTree.ElementTree": [],
    "xml.etree.ElementTree._ListDataStream": [],
    "xml.etree.ElementTree.XMLPullParser": [],
    "xml.etree.ElementTree.TreeBuilder": [],
    "xml.etree.ElementTree.XMLParser": [],
    "xml.etree.ElementTree.C14NWriterTarget": [],
    "_elementtree": [],
    "psutil._psbsd.Process": [
        "collections.namedtuple",
        "psutil._psbsd.wrap_exceptions",
        "psutil._common.memoize_when_activated"
    ],
    "psutil._psbsd.wrap_exceptions": [
        "functools.wraps"
    ],
    "psutil._psosx": [
        "collections",
        "psutil._psutil_posix",
        "functools",
        "psutil._common",
        "psutil._psutil_osx",
        "psutil._compat",
        "collections.namedtuple",
        "psutil._psosx.Process",
        "psutil._psposix",
        "<builtin>.dict",
        "os"
    ],
    "psutil._psutil_osx": [],
    "psutil._psosx.Process": [
        "psutil._psosx.wrap_exceptions",
        "psutil._common.memoize_when_activated"
    ],
    "psutil._psosx.wrap_exceptions": [
        "functools.wraps"
    ],
    "psutil._pswindows": [
        "enum",
        "<builtin>.str",
        "psutil._pswindows.WindowsService",
        "<builtin>.RuntimeError",
        "psutil._common.memoize",
        "os",
        "psutil._pswindows.Priority",
        "functools",
        "psutil._compat.lru_cache",
        "psutil._compat",
        "psutil._pswindows.IOPriority",
        "psutil._pswindows.Process",
        "psutil._common",
        "contextlib",
        "<builtin>.dict",
        "signal",
        "collections",
        "psutil._compat.lru_cache.decorating_function",
        "collections.namedtuple",
        "<builtin>.globals"
    ],
    "psutil._pswindows.Priority": [],
    "psutil._pswindows.IOPriority": [],
    "psutil._compat.lru_cache": [],
    "psutil._compat.lru_cache.decorating_function": [
        "threading.RLock",
        "<builtin>.dict",
        "functools.update_wrapper"
    ],
    "psutil._pswindows.WindowsService": [
        "contextlib.contextmanager"
    ],
    "psutil._pswindows.Process": [
        "psutil._pswindows.wrap_exceptions",
        "psutil._common.memoize_when_activated",
        "psutil._pswindows.retry_error_partial_copy"
    ],
    "psutil._pswindows.wrap_exceptions": [
        "functools.wraps"
    ],
    "psutil._pswindows.retry_error_partial_copy": [
        "functools.wraps"
    ],
    "psutil._pslinux": [
        "psutil._pslinux.Connections",
        "enum",
        "<list>.extend",
        "glob",
        "psutil._pslinux.IOPriority",
        "psutil._pslinux.Connections.__init__",
        "psutil._psposix",
        "psutil._common.memoize",
        "os",
        "re",
        "psutil._psutil_posix",
        "<builtin>.int",
        "functools",
        "warnings",
        "psutil._pslinux.RootFsDeviceFinder",
        "psutil._compat",
        "<builtin>.hasattr",
        "struct",
        "psutil._pslinux._Ipv6UnsupportedError",
        "base64",
        "psutil._common",
        "traceback.print_exc",
        "traceback",
        "psutil._pslinux.set_scputimes_ntuple",
        "collections",
        "ctypes",
        "ctypes.CDLL.__init__",
        "__future__",
        "genericpath.exists",
        "resource",
        "psutil._pslinux.Process",
        "collections.namedtuple",
        "socket",
        "<builtin>.globals"
    ],
    "genericpath.exists": [],
    "psutil._pslinux.IOPriority": [],
    "psutil._pslinux.set_scputimes_ntuple": [
        "<list>.append",
        "collections.namedtuple",
        "<builtin>.len",
        "psutil._common.open_binary"
    ],
    "psutil._common.open_binary": [
        "<builtin>.open"
    ],
    "traceback.print_exc": [
        "traceback.print_exception"
    ],
    "resource": [],
    "ctypes": [
        "ctypes.c_ulong",
        "ctypes.c_ulonglong",
        "ctypes.PyDLL",
        "ctypes.CFUNCTYPE",
        "ctypes.c_long",
        "ctypes.c_char_p",
        "ctypes.c_longdouble",
        "os",
        "ctypes.c_uint",
        "ctypes.c_byte",
        "ctypes.CDLL",
        "ctypes.c_int",
        "<builtin>.int",
        "ctypes.PYFUNCTYPE",
        "ctypes.WinDLL",
        "ctypes.c_bool",
        "ctypes.c_longlong",
        "ctypes.LibraryLoader.__init__",
        "struct",
        "ctypes._check_size",
        "ctypes.py_object",
        "ctypes.c_void_p",
        "ctypes.c_wchar_p",
        "ctypes.OleDLL",
        "<builtin>.Exception",
        "ctypes.c_float",
        "ctypes.c_ushort",
        "ctypes.LibraryLoader",
        "ctypes.c_wchar",
        "ctypes.c_short",
        "ctypes.HRESULT",
        "ctypes.c_double",
        "_ctypes",
        "ctypes.c_char",
        "ctypes._endian",
        "ctypes._reset_cache",
        "ctypes.c_ubyte"
    ],
    "_ctypes": [],
    "<builtin>.Exception": [],
    "ctypes.py_object": [],
    "ctypes._check_size": [
        "struct",
        "<builtin>.SystemError"
    ],
    "ctypes.c_short": [],
    "ctypes.c_ushort": [],
    "ctypes.c_long": [],
    "ctypes.c_ulong": [],
    "ctypes.c_int": [],
    "ctypes.c_uint": [],
    "ctypes.c_float": [],
    "ctypes.c_double": [],
    "ctypes.c_longdouble": [],
    "ctypes.c_longlong": [],
    "ctypes.c_ulonglong": [],
    "ctypes.c_ubyte": [],
    "ctypes.c_byte": [],
    "ctypes.c_char": [],
    "ctypes.c_char_p": [],
    "ctypes.c_void_p": [],
    "ctypes.c_bool": [],
    "ctypes.c_wchar_p": [],
    "ctypes.c_wchar": [],
    "ctypes.CDLL": [],
    "ctypes.PyDLL": [],
    "ctypes.WinDLL": [],
    "ctypes.HRESULT": [],
    "ctypes.OleDLL": [],
    "ctypes.LibraryLoader": [],
    "ctypes.LibraryLoader.__init__": [],
    "ctypes.CFUNCTYPE": [
        "ctypes.CFUNCTYPE.CFunctionType",
        "<builtin>.ValueError"
    ],
    "ctypes.CFUNCTYPE.CFunctionType": [],
    "ctypes.PYFUNCTYPE": [
        "ctypes.PYFUNCTYPE.CFunctionType"
    ],
    "ctypes.PYFUNCTYPE.CFunctionType": [],
    "ctypes._endian": [
        "<builtin>.type",
        "ctypes",
        "ctypes._endian.BigEndianStructure",
        "ctypes._endian._swapped_meta"
    ],
    "ctypes._endian._swapped_meta": [],
    "ctypes._endian.BigEndianStructure": [],
    "ctypes._reset_cache": [
        "<map>.clear"
    ],
    "<map>.clear": [],
    "ctypes.CDLL.__init__": [
        "ctypes.CDLL.__init__._FuncPtr"
    ],
    "ctypes.CDLL.__init__._FuncPtr": [],
    "psutil._pslinux._Ipv6UnsupportedError": [],
    "psutil._pslinux.Connections": [
        "<builtin>.staticmethod"
    ],
    "psutil._pslinux.Connections.__init__": [],
    "psutil._pslinux.RootFsDeviceFinder": [],
    "psutil._pslinux.Process": [
        "re.compile",
        "genericpath.exists",
        "psutil._pslinux.wrap_exceptions",
        "psutil._common.memoize_when_activated"
    ],
    "psutil._pslinux.wrap_exceptions": [
        "functools.wraps"
    ],
    "<builtin>.dir": [],
    "psutil.Process": [
        "<builtin>.hasattr",
        "<builtin>.property",
        "psutil._common.deprecated_method.outer",
        "contextlib.contextmanager",
        "psutil._assert_pid_not_reused",
        "psutil._common.deprecated_method",
        "psutil._common.memoize_when_activated"
    ],
    "psutil._assert_pid_not_reused": [
        "functools.wraps"
    ],
    "psutil._common.deprecated_method": [],
    "psutil._common.deprecated_method.outer": [
        "functools.wraps"
    ],
    "psutil.Popen": [],
    "psutil.cpu_times": [
        "psutil._psaix.per_cpu_times",
        "psutil._psaix.cpu_times",
        "psutil._pswindows.per_cpu_times",
        "psutil._psosx.per_cpu_times",
        "psutil._psosx.cpu_times",
        "psutil._pslinux.per_cpu_times",
        "psutil._pswindows.cpu_times",
        "psutil._psbsd.cpu_times",
        "psutil._pslinux.cpu_times",
        "psutil._pssunos.per_cpu_times",
        "psutil._psbsd.per_cpu_times",
        "psutil._pssunos.cpu_times"
    ],
    "psutil._pslinux.per_cpu_times": [
        "<builtin>.len",
        "psutil._common.open_binary",
        "<list>.append",
        "<builtin>.float",
        "psutil._pslinux.set_scputimes_ntuple",
        "psutil._common.get_procfs_path"
    ],
    "psutil._common.get_procfs_path": [],
    "<builtin>.float": [],
    "psutil._pswindows.per_cpu_times": [
        "<list>.append"
    ],
    "psutil._pssunos.per_cpu_times": [],
    "psutil._psosx.per_cpu_times": [
        "<list>.append"
    ],
    "psutil._psbsd.per_cpu_times": [
        "psutil._psbsd.cpu_count_logical",
        "<builtin>.NotImplementedError"
    ],
    "psutil._psbsd.cpu_count_logical": [],
    "psutil._psaix.per_cpu_times": [],
    "psutil._pslinux.cpu_times": [
        "<builtin>.len",
        "psutil._common.open_binary",
        "<builtin>.float",
        "psutil._pslinux.set_scputimes_ntuple",
        "psutil._common.get_procfs_path"
    ],
    "psutil._pswindows.cpu_times": [
        "<builtin>.sum",
        "<builtin>.zip"
    ],
    "<builtin>.sum": [],
    "psutil._pssunos.cpu_times": [
        "<builtin>.sum",
        "<builtin>.zip"
    ],
    "psutil._psosx.cpu_times": [],
    "psutil._psbsd.cpu_times": [],
    "psutil._psaix.cpu_times": [
        "<builtin>.sum",
        "<builtin>.zip"
    ],
    "time.time": [],
    "<builtin>.SystemExit": [],
    "argparse.ArgumentParser.__init__": [
        "posixpath.basename",
        "ntpath.basename",
        "argparse._ActionsContainer.register",
        "argparse._ActionsContainer.add_argument",
        "<builtin>.super",
        "argparse._ActionsContainer._add_container_actions",
        "gettext.gettext",
        "argparse._ActionsContainer.add_argument_group"
    ],
    "gettext.gettext": [
        "gettext.dgettext"
    ],
    "gettext.dgettext": [
        "gettext.translation",
        "<map>.get",
        "gettext.NullTranslations.gettext"
    ],
    "gettext.translation": [
        "posixpath.abspath",
        "gettext.find",
        "warnings.catch_warnings.__init__",
        "<builtin>.open",
        "<map>.setdefault",
        "warnings.warn",
        "<builtin>.FileNotFoundError",
        "warnings",
        "copy",
        "gettext.NullTranslations.__init__",
        "<map>.get",
        "copy.copy",
        "ntpath.abspath"
    ],
    "gettext.find": [
        "ntpath.join",
        "genericpath.exists",
        "<list>.append",
        "posixpath.join",
        "gettext._expand_lang"
    ],
    "gettext._expand_lang": [
        "<list>.reverse",
        "<list>.append",
        "<builtin>.range",
        "locale.normalize"
    ],
    "locale.normalize": [
        "<str>.replace",
        "locale._replace_encoding",
        "<map>.get",
        "locale._append_modifier"
    ],
    "locale._append_modifier": [
        "locale._replace_encoding"
    ],
    "locale._replace_encoding": [
        "<str>.replace",
        "<map>.get",
        "encodings.normalize_encoding",
        "<str>.lower"
    ],
    "encodings.normalize_encoding": [
        "<list>.append",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "<list>.reverse": [],
    "<str>.endswith": [],
    "gettext.NullTranslations.__init__": [
        "gettext.NullTranslations._parse"
    ],
    "gettext.NullTranslations._parse": [],
    "<builtin>.FileNotFoundError": [],
    "copy.copy": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "copy._copy_immutable",
        "<builtin>.getattr",
        "copy._reconstruct",
        "<map>",
        "<builtin>.issubclass",
        "<map>.get"
    ],
    "<map>": [],
    "copy._copy_immutable": [],
    "copy._reconstruct": [
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.id",
        "<builtin>.setattr",
        "copy.deepcopy"
    ],
    "copy.deepcopy": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "copy._reconstruct",
        "copy._keep_alive",
        "<builtin>.id",
        "<map>",
        "<builtin>.issubclass",
        "copy._deepcopy_atomic",
        "<map>.get"
    ],
    "copy._deepcopy_atomic": [],
    "copy._keep_alive": [
        "<builtin>.id"
    ],
    "<builtin>.setattr": [],
    "warnings.warn": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "warnings._next_external_frame",
        "warnings._is_internal_frame",
        "warnings.warn_explicit",
        "<builtin>.issubclass",
        "<builtin>.range",
        "<builtin>.TypeError"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings.warn_explicit": [
        "warnings.WarningMessage.__init__",
        "<builtin>.isinstance",
        "<builtin>.str",
        "<map>.clear",
        "warnings._showwarnmsg",
        "<builtin>.int",
        "<builtin>.RuntimeError",
        "<builtin>.issubclass",
        "<map>.get",
        "linecache",
        "linecache.getlines"
    ],
    "linecache.getlines": [
        "<builtin>.len",
        "linecache.updatecache",
        "linecache.clearcache"
    ],
    "linecache.updatecache": [
        "<builtin>.len",
        "<str>.endswith",
        "ntpath.join",
        "tokenize.open",
        "linecache.lazycache",
        "<str>.startswith",
        "posixpath.isabs",
        "ntpath.isabs",
        "posixpath.join"
    ],
    "<str>.startswith": [],
    "ntpath.isabs": [
        "ntpath.splitdrive",
        "<builtin>.isinstance",
        "<builtin>.len",
        "ntpath._get_bothseps",
        "<str>.startswith",
        "<str>.replace",
        "os._fspath"
    ],
    "tokenize.open": [
        "builtins.open",
        "_io.TextIOWrapper",
        "tokenize.detect_encoding"
    ],
    "builtins.open": [],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.find_cookie",
        "tokenize.detect_encoding.read_or_stop"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "tokenize._get_normal_name",
        "<builtin>.SyntaxError"
    ],
    "tokenize._get_normal_name": [],
    "_io.TextIOWrapper": [],
    "linecache.clearcache": [],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "tracemalloc",
        "linecache",
        "linecache.getline",
        "<str>.strip"
    ],
    "linecache.getline": [
        "<builtin>.len",
        "linecache.getlines"
    ],
    "tracemalloc": [
        "posixpath",
        "tracemalloc.Frame",
        "tracemalloc.BaseFilter",
        "fnmatch",
        "functools",
        "tracemalloc.Statistic",
        "tracemalloc._Traces",
        "tracemalloc.Snapshot",
        "tracemalloc.Filter",
        "tracemalloc.Trace",
        "tracemalloc.DomainFilter",
        "tracemalloc.StatisticDiff",
        "tracemalloc.Traceback",
        "linecache",
        "pickle",
        "collections.abc"
    ],
    "tracemalloc.Statistic": [],
    "tracemalloc.StatisticDiff": [],
    "tracemalloc.Frame": [
        "<builtin>.property"
    ],
    "tracemalloc.Traceback": [],
    "tracemalloc.Trace": [
        "<builtin>.property"
    ],
    "tracemalloc._Traces": [],
    "tracemalloc.BaseFilter": [],
    "tracemalloc.Filter": [
        "<builtin>.property"
    ],
    "tracemalloc.DomainFilter": [
        "<builtin>.property"
    ],
    "tracemalloc.Snapshot": [
        "<builtin>.staticmethod"
    ],
    "warnings.catch_warnings.__init__": [],
    "gettext.NullTranslations.gettext": [],
    "argparse._ActionsContainer.add_argument_group": [
        "argparse._ArgumentGroup.__init__"
    ],
    "argparse._ArgumentGroup.__init__": [
        "<builtin>.super"
    ],
    "argparse._ActionsContainer.register": [],
    "argparse._ActionsContainer.add_argument": [
        "<builtin>.hasattr",
        "<builtin>.callable",
        "<builtin>.len",
        "argparse._ActionsContainer._get_optional_kwargs",
        "argparse.ArgumentParser._get_formatter",
        "argparse.ArgumentParser._add_action",
        "argparse._ActionsContainer._registry_get",
        "argparse._ActionsContainer._add_action",
        "<builtin>.ValueError",
        "argparse._ActionsContainer._pop_action_class",
        "argparse._ActionsContainer._get_positional_kwargs"
    ],
    "argparse._ActionsContainer._get_optional_kwargs": [
        "<builtin>.len",
        "<list>.append",
        "<builtin>.ValueError",
        "<builtin>.dict",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._get_positional_kwargs": [
        "<builtin>.dict",
        "gettext.gettext",
        "<builtin>.TypeError"
    ],
    "argparse._ActionsContainer._pop_action_class": [
        "argparse._ActionsContainer._registry_get"
    ],
    "argparse._ActionsContainer._registry_get": [],
    "argparse.ArgumentParser._get_formatter": [],
    "argparse._ActionsContainer._add_action": [
        "argparse._ActionsContainer._check_conflict"
    ],
    "argparse._ActionsContainer._check_conflict": [
        "<list>.append",
        "argparse._ActionsContainer._get_handler"
    ],
    "argparse._ActionsContainer._get_handler": [
        "<builtin>.ValueError",
        "<builtin>.getattr",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._add_action": [],
    "argparse._ActionsContainer._add_container_actions": [
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "<builtin>.ValueError",
        "<map>.get",
        "gettext.gettext",
        "argparse._ActionsContainer.add_argument_group"
    ],
    "argparse._ActionsContainer.add_mutually_exclusive_group": [
        "argparse._MutuallyExclusiveGroup.__init__"
    ],
    "argparse._MutuallyExclusiveGroup.__init__": [
        "<builtin>.super"
    ],
    "argparse.ArgumentParser.parse_args": [
        "argparse.ArgumentParser.parse_known_args",
        "gettext.gettext",
        "argparse.ArgumentParser.error"
    ],
    "argparse.ArgumentParser.parse_known_args": [
        "<builtin>.hasattr",
        "<list>.extend",
        "<builtin>.str",
        "<builtin>.getattr",
        "<builtin>.list",
        "<builtin>.delattr",
        "argparse.ArgumentParser._parse_known_args",
        "argparse.Namespace.__init__",
        "<builtin>.setattr",
        "argparse.ArgumentParser.error"
    ],
    "argparse.Namespace.__init__": [
        "<builtin>.setattr"
    ],
    "argparse.ArgumentParser._parse_known_args": [
        "argparse.ArgumentParser._get_value",
        "<list>.extend",
        "argparse.ArgumentParser._get_positional_actions",
        "<list>.append",
        "argparse.ArgumentParser._parse_known_args.consume_positionals",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "argparse.ArgumentParser._parse_known_args.consume_optional",
        "<map>.setdefault",
        "<builtin>.hasattr",
        "argparse.ArgumentParser._parse_optional",
        "<builtin>.setattr",
        "<builtin>.iter",
        "argparse.ArgumentParser.error",
        "<builtin>.min",
        "<builtin>.enumerate",
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.max",
        "<builtin>.set",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._read_args_from_files": [
        "<list>.extend",
        "<builtin>.str",
        "<builtin>.open",
        "argparse.ArgumentParser.convert_arg_line_to_args",
        "argparse.ArgumentParser._read_args_from_files",
        "<list>.append",
        "argparse.ArgumentParser.error"
    ],
    "argparse.ArgumentParser.convert_arg_line_to_args": [],
    "argparse.ArgumentParser.error": [
        "argparse.ArgumentParser.exit",
        "gettext.gettext",
        "argparse.ArgumentParser.print_usage"
    ],
    "argparse.ArgumentParser.print_usage": [
        "argparse.ArgumentParser.format_usage",
        "argparse.ArgumentParser._print_message"
    ],
    "argparse.ArgumentParser.format_usage": [
        "argparse.ArgumentParser._get_formatter"
    ],
    "argparse.ArgumentParser._print_message": [],
    "argparse.ArgumentParser.exit": [
        "argparse.ArgumentParser._print_message"
    ],
    "argparse.ArgumentParser._parse_optional": [
        "<builtin>.len",
        "gettext.gettext",
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser._get_option_tuples"
    ],
    "argparse.ArgumentParser._get_option_tuples": [
        "<list>.append",
        "gettext.gettext",
        "argparse.ArgumentParser.error"
    ],
    "argparse.ArgumentParser._get_positional_actions": [],
    "argparse.ArgumentParser._parse_known_args.consume_positionals": [
        "argparse.ArgumentParser._parse_known_args.take_action",
        "<builtin>.zip",
        "argparse.ArgumentParser._match_arguments_partial",
        "<builtin>.len"
    ],
    "argparse.ArgumentParser._match_arguments_partial": [
        "<list>.extend",
        "<builtin>.len",
        "re.match",
        "argparse.ArgumentParser._get_nargs_pattern",
        "<builtin>.range"
    ],
    "argparse.ArgumentParser._get_nargs_pattern": [
        "<str>.replace"
    ],
    "re.match": [
        "re._compile"
    ],
    "argparse.ArgumentParser._parse_known_args.take_action": [
        "argparse.ArgumentError.__init__",
        "argparse.ArgumentParser._get_values",
        "<map>.get",
        "gettext.gettext",
        "argparse._get_action_name"
    ],
    "argparse.ArgumentParser._get_values": [
        "argparse.ArgumentParser._get_value",
        "<builtin>.isinstance",
        "<builtin>.len",
        "argparse.ArgumentParser._check_value",
        "<list>.remove"
    ],
    "argparse.ArgumentParser._get_value": [
        "<builtin>.callable",
        "<builtin>.str",
        "argparse.ArgumentError.__init__",
        "<builtin>.getattr",
        "argparse._ActionsContainer._registry_get",
        "gettext.gettext",
        "<builtin>.repr"
    ],
    "argparse.ArgumentError.__init__": [
        "argparse._get_action_name"
    ],
    "argparse._get_action_name": [],
    "argparse.ArgumentParser._check_value": [
        "argparse.ArgumentError.__init__",
        "gettext.gettext",
        "<builtin>.map"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_optional": [
        "argparse.ArgumentError.__init__",
        "<list>.append",
        "argparse.ArgumentParser._parse_known_args.take_action",
        "gettext.gettext",
        "argparse.ArgumentParser._match_argument"
    ],
    "argparse.ArgumentParser._match_argument": [
        "<builtin>.len",
        "argparse.ArgumentError.__init__",
        "gettext.ngettext",
        "re.match",
        "argparse.ArgumentParser._get_nargs_pattern",
        "<map>.get",
        "gettext.gettext"
    ],
    "gettext.ngettext": [
        "gettext.dngettext"
    ],
    "gettext.dngettext": [
        "gettext.NullTranslations.ngettext",
        "gettext.translation",
        "<map>.get"
    ],
    "gettext.NullTranslations.ngettext": [],
    "<builtin>.delattr": [],
    "string.Template.__init__": [],
    "posixpath.expanduser": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.str",
        "<str>.rstrip",
        "os._fscodec.fsdecode",
        "<str>.find",
        "posixpath._get_sep",
        "<str>.startswith",
        "os._fscodec.fsencode",
        "os._fspath"
    ],
    "os._fscodec.fsdecode": [
        "<builtin>.isinstance",
        "os._fspath"
    ],
    "os._fscodec.fsencode": [
        "<builtin>.isinstance",
        "<str>.encode",
        "os._fspath"
    ],
    "<str>.rstrip": [],
    "ntpath.expanduser": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "ntpath._get_bothseps",
        "ntpath.join",
        "os._fscodec.fsdecode",
        "<str>.startswith",
        "ntpath.dirname",
        "os._fscodec.fsencode",
        "os._fspath"
    ],
    "genericpath.isdir": [
        "stat.S_ISDIR"
    ],
    "stat.S_ISDIR": [
        "stat.S_IFMT"
    ],
    "stat.S_IFMT": [],
    "nt._isdir": [],
    "os.makedirs": [
        "posixpath.split",
        "<builtin>.isinstance",
        "os.makedirs",
        "nt._isdir",
        "genericpath.exists",
        "ntpath.split",
        "<builtin>.bytes",
        "genericpath.isdir"
    ],
    "posixpath.split": [
        "<str>.rfind",
        "<builtin>.len",
        "posixpath._get_sep",
        "os._fspath"
    ],
    "psutil.cpu_count": [
        "psutil._pslinux.cpu_count_cores",
        "psutil._psbsd.cpu_count_cores",
        "psutil._pswindows.cpu_count_logical",
        "psutil._psosx.cpu_count_logical",
        "psutil._pslinux.cpu_count_logical",
        "psutil._pswindows.cpu_count_cores",
        "psutil._psbsd.cpu_count_logical",
        "psutil._psaix.cpu_count_cores",
        "psutil._psaix.cpu_count_logical",
        "psutil._psosx.cpu_count_cores",
        "psutil._pssunos.cpu_count_logical",
        "psutil._pssunos.cpu_count_cores"
    ],
    "psutil._pslinux.cpu_count_cores": [
        "<builtin>.sum",
        "glob.glob",
        "<builtin>.len",
        "psutil._common.open_binary",
        "<builtin>.int",
        "<builtin>.set",
        "<map>.values",
        "psutil._common.get_procfs_path"
    ],
    "glob.glob": [
        "glob.iglob",
        "<builtin>.list"
    ],
    "glob.iglob": [
        "glob._isrecursive",
        "<builtin>.next",
        "glob._iglob"
    ],
    "glob._iglob": [
        "posixpath.split",
        "glob.has_magic",
        "glob._isrecursive",
        "glob._glob2",
        "glob._glob0",
        "ntpath.join",
        "posixpath.lexists",
        "nt._isdir",
        "glob._glob1",
        "ntpath.split",
        "genericpath.isdir",
        "posixpath.join",
        "ntpath.lexists",
        "glob._iglob"
    ],
    "glob.has_magic": [
        "<builtin>.isinstance"
    ],
    "posixpath.lexists": [],
    "ntpath.lexists": [],
    "glob._isrecursive": [
        "<builtin>.isinstance"
    ],
    "glob._glob1": [
        "fnmatch.filter",
        "glob._ishidden",
        "<builtin>.list",
        "glob._iterdir"
    ],
    "glob._iterdir": [
        "<builtin>.isinstance",
        "<builtin>.bytes"
    ],
    "glob._ishidden": [],
    "fnmatch.filter": [
        "<list>.append",
        "posixpath.normcase",
        "ntpath.normcase",
        "fnmatch._compile_pattern"
    ],
    "fnmatch._compile_pattern": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "re.compile",
        "fnmatch.translate",
        "<builtin>.bytes"
    ],
    "fnmatch.translate": [
        "<list>.append",
        "re.sub",
        "<builtin>.len",
        "re.escape"
    ],
    "re.sub": [
        "re._compile"
    ],
    "glob._glob2": [
        "glob._isrecursive",
        "glob._rlistdir"
    ],
    "glob._rlistdir": [
        "glob._rlistdir",
        "glob._ishidden",
        "<builtin>.list",
        "ntpath.join",
        "glob._iterdir",
        "posixpath.join"
    ],
    "glob._glob0": [
        "ntpath.join",
        "posixpath.lexists",
        "nt._isdir",
        "genericpath.isdir",
        "posixpath.join",
        "ntpath.lexists"
    ],
    "<map>.values": [],
    "psutil._pswindows.cpu_count_cores": [],
    "psutil._pssunos.cpu_count_cores": [],
    "psutil._psosx.cpu_count_cores": [],
    "psutil._psbsd.cpu_count_cores": [
        "<builtin>.len",
        "psutil._psbsd.cpu_count_logical",
        "xml.etree.ElementTree.XML"
    ],
    "xml.etree.ElementTree.XML": [
        "xml.etree.ElementTree.XMLParser.__init__",
        "xml.etree.ElementTree.XMLParser.feed",
        "xml.etree.ElementTree.XMLParser.close",
        "xml.etree.ElementTree.TreeBuilder.__init__"
    ],
    "xml.etree.ElementTree.TreeBuilder.__init__": [],
    "xml.etree.ElementTree.XMLParser.__init__": [
        "pyexpat",
        "<builtin>.hasattr",
        "xml.parsers.expat",
        "<builtin>.ImportError",
        "xml.etree.ElementTree.TreeBuilder.__init__"
    ],
    "xml.parsers.expat": [
        "pyexpat"
    ],
    "pyexpat": [],
    "xml.etree.ElementTree.XMLParser.feed": [
        "xml.etree.ElementTree.XMLParser._raiseerror"
    ],
    "xml.etree.ElementTree.XMLParser._raiseerror": [],
    "xml.etree.ElementTree.XMLParser.close": [
        "xml.etree.ElementTree.XMLParser._raiseerror"
    ],
    "psutil._psaix.cpu_count_cores": [
        "subprocess.Popen.communicate",
        "<builtin>.len",
        "subprocess.Popen.__init__",
        "<builtin>.RuntimeError"
    ],
    "subprocess.Popen.__init__": [
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.bool",
        "warnings.warn",
        "<builtin>.filter",
        "subprocess._cleanup",
        "subprocess.Popen._execute_child",
        "<list>.append",
        "_io.open",
        "<builtin>.ValueError",
        "_io.TextIOWrapper",
        "<builtin>.TypeError",
        "subprocess.Popen._get_handles"
    ],
    "subprocess._cleanup": [
        "<list>.remove"
    ],
    "subprocess.Popen._get_handles": [
        "<builtin>.isinstance",
        "subprocess.Popen._get_devnull"
    ],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "_io.open": [],
    "subprocess.Popen._execute_child": [
        "<builtin>.tuple",
        "<list>.append",
        "ntpath.dirname",
        "os._fscodec.fsencode",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "os.get_exec_path",
        "<builtin>.bytearray",
        "<builtin>.int",
        "<builtin>.sorted",
        "os._fscodec.fsdecode",
        "subprocess.Popen._handle_exitstatus",
        "<builtin>.map",
        "<builtin>.hasattr",
        "<builtin>.list",
        "ntpath.join",
        "posixpath.join",
        "<builtin>.issubclass",
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.len",
        "posixpath.dirname",
        "subprocess.Popen._posix_spawn",
        "<builtin>.ValueError",
        "<builtin>.bytes",
        "<builtin>.set"
    ],
    "subprocess.Popen._posix_spawn": [
        "<list>.append",
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.getattr"
    ],
    "subprocess.Popen._close_pipe_fds": [
        "<builtin>.getattr",
        "contextlib._BaseExitStack.callback"
    ],
    "contextlib._BaseExitStack.callback": [
        "<builtin>.len",
        "contextlib._BaseExitStack._push_exit_callback",
        "contextlib._BaseExitStack._create_cb_wrapper",
        "warnings.warn",
        "warnings",
        "<builtin>.TypeError"
    ],
    "contextlib._BaseExitStack._create_cb_wrapper": [],
    "contextlib._BaseExitStack._push_exit_callback": [],
    "os.get_exec_path": [
        "warnings.catch_warnings.__init__",
        "<str>.split",
        "warnings"
    ],
    "subprocess.Popen._handle_exitstatus": [],
    "<builtin>.filter": [],
    "subprocess.Popen.communicate": [
        "subprocess.Popen._remaining_time",
        "subprocess.Popen.wait",
        "<list>.count",
        "subprocess.Popen._stdin_write",
        "subprocess.Popen._wait",
        "time.monotonic",
        "subprocess.Popen._communicate",
        "<builtin>.ValueError",
        "<builtin>.min"
    ],
    "<list>.count": [],
    "time.monotonic": [],
    "subprocess.Popen._communicate": [
        "subprocess.Popen._remaining_time",
        "selectors.SelectSelector.__init__",
        "subprocess.Popen.wait",
        "subprocess.Popen._translate_newlines",
        "selectors._PollLikeSelector.unregister",
        "selectors.SelectSelector.register",
        "<builtin>.memoryview",
        "<builtin>.RuntimeError",
        "selectors._PollLikeSelector.register",
        "selectors.SelectSelector.select",
        "subprocess.Popen._check_timeout",
        "selectors._PollLikeSelector.select",
        "selectors.SelectSelector.unregister",
        "selectors._BaseSelectorImpl.get_map",
        "subprocess.Popen._save_input"
    ],
    "subprocess.Popen._save_input": [],
    "selectors.SelectSelector.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "selectors._PollLikeSelector.register": [
        "<builtin>.super"
    ],
    "selectors.SelectSelector.register": [
        "<builtin>.super"
    ],
    "selectors._BaseSelectorImpl.get_map": [],
    "subprocess.Popen._remaining_time": [
        "time.monotonic"
    ],
    "subprocess.Popen._check_timeout": [
        "time.monotonic",
        "subprocess.TimeoutExpired.__init__"
    ],
    "subprocess.TimeoutExpired.__init__": [],
    "selectors._PollLikeSelector.select": [
        "<list>.append",
        "selectors._BaseSelectorImpl._key_from_fd"
    ],
    "selectors._BaseSelectorImpl._key_from_fd": [],
    "selectors.SelectSelector.select": [
        "selectors.SelectSelector._select",
        "<list>.append",
        "selectors._BaseSelectorImpl._key_from_fd",
        "<builtin>.max",
        "<builtin>.set"
    ],
    "selectors.SelectSelector._select": [],
    "selectors._PollLikeSelector.unregister": [
        "<builtin>.super"
    ],
    "selectors.SelectSelector.unregister": [
        "<builtin>.super"
    ],
    "subprocess.Popen.wait": [
        "<builtin>.min",
        "subprocess.Popen._remaining_time",
        "time.monotonic",
        "subprocess.Popen._wait"
    ],
    "subprocess.Popen._wait": [
        "subprocess.Popen._try_wait",
        "subprocess.Popen._remaining_time",
        "subprocess.TimeoutExpired.__init__",
        "time.monotonic",
        "<builtin>.min",
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.Popen._try_wait": [],
    "subprocess.Popen._translate_newlines": [],
    "subprocess.Popen._stdin_write": [],
    "psutil._pslinux.cpu_count_logical": [
        "psutil._common.open_text",
        "psutil._common.get_procfs_path",
        "re.compile",
        "psutil._common.open_binary"
    ],
    "psutil._common.open_text": [
        "<builtin>.open"
    ],
    "psutil._pswindows.cpu_count_logical": [],
    "psutil._pssunos.cpu_count_logical": [],
    "psutil._psosx.cpu_count_logical": [],
    "psutil._psaix.cpu_count_logical": [],
    "logging.getLogger": [],
    "logging.handlers.RotatingFileHandler.__init__": [
        "logging.handlers.BaseRotatingHandler.__init__"
    ],
    "logging.handlers.BaseRotatingHandler.__init__": [
        "logging.FileHandler.__init__"
    ],
    "logging.Handler.setLevel": [
        "logging._checkLevel"
    ],
    "bpytop.TimeIt": [
        "<builtin>.classmethod"
    ],
    "bpytop.Config": [
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "<builtin>.enumerate",
        "psutil.cpu_times_percent",
        "psutil.sensors_temperatures"
    ],
    "psutil.cpu_times_percent": [
        "<builtin>.zip",
        "psutil.cpu_times",
        "psutil.cpu_times_percent.calculate",
        "<list>.append",
        "<builtin>.ValueError"
    ],
    "psutil.cpu_times_percent.calculate": [
        "<builtin>.round",
        "psutil._cpu_times_deltas",
        "<list>.append",
        "<builtin>.max",
        "<builtin>.min",
        "psutil._cpu_tot_time"
    ],
    "psutil._cpu_times_deltas": [
        "<list>.append",
        "<builtin>.getattr",
        "<builtin>.max"
    ],
    "psutil._cpu_tot_time": [
        "<builtin>.sum",
        "<builtin>.getattr"
    ],
    "<builtin>.round": [],
    "psutil.sensors_temperatures": [
        "psutil.sensors_temperatures.convert",
        "psutil._psbsd.sensors_temperatures",
        "<builtin>.dict",
        "psutil._pslinux.sensors_temperatures",
        "_collections.defaultdict"
    ],
    "_collections.defaultdict": [],
    "psutil._pslinux.sensors_temperatures": [
        "glob.glob",
        "psutil._common.bcat",
        "re.compile",
        "posixpath.dirname",
        "ntpath.join",
        "psutil._common.debug",
        "ntpath.basename",
        "<builtin>.sorted",
        "<builtin>.set",
        "<builtin>.float",
        "ntpath.dirname",
        "posixpath.join",
        "<builtin>.dict",
        "psutil._common.cat",
        "_collections.defaultdict",
        "posixpath.basename",
        "<str>.strip"
    ],
    "psutil._common.bcat": [
        "psutil._common.cat"
    ],
    "psutil._common.cat": [
        "psutil._common.open_text",
        "psutil._common.open_binary"
    ],
    "psutil._common.debug": [
        "<builtin>.isinstance",
        "inspect.currentframe",
        "<builtin>.print",
        "inspect.getframeinfo",
        "inspect"
    ],
    "inspect": [
        "enum",
        "operator",
        "inspect.BoundArguments",
        "os",
        "importlib.machinery",
        "<map>.items",
        "collections.abc",
        "re",
        "dis",
        "functools",
        "inspect._void",
        "warnings",
        "inspect.Signature",
        "inspect._empty",
        "inspect.Parameter",
        "tokenize",
        "linecache",
        "<builtin>.hasattr",
        "<builtin>.type",
        "inspect._ParameterKind",
        "token",
        "<builtin>.object",
        "inspect.EndOfBlock",
        "collections",
        "inspect.BlockFinder",
        "abc",
        "collections.namedtuple",
        "<builtin>.globals",
        "types"
    ],
    "dis": [
        "collections",
        "opcode",
        "dis.Bytecode",
        "collections.namedtuple",
        "io",
        "types",
        "dis.Instruction"
    ],
    "opcode": [
        "opcode.name_op",
        "opcode.jabs_op",
        "<list>.append",
        "<builtin>.range",
        "opcode.def_op",
        "_opcode",
        "opcode.jrel_op"
    ],
    "_opcode": [],
    "opcode.def_op": [],
    "opcode.name_op": [
        "<list>.append",
        "opcode.def_op"
    ],
    "opcode.jrel_op": [
        "<list>.append",
        "opcode.def_op"
    ],
    "opcode.jabs_op": [
        "<list>.append",
        "opcode.def_op"
    ],
    "dis.Instruction": [],
    "dis.Bytecode": [
        "<builtin>.classmethod"
    ],
    "importlib.machinery": [],
    "inspect.EndOfBlock": [],
    "inspect.BlockFinder": [],
    "inspect._void": [],
    "inspect._empty": [],
    "inspect._ParameterKind": [
        "<builtin>.property"
    ],
    "inspect.Parameter": [
        "<builtin>.property"
    ],
    "inspect.BoundArguments": [
        "<builtin>.property"
    ],
    "inspect.Signature": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "inspect.currentframe": [
        "<builtin>.hasattr"
    ],
    "inspect.getframeinfo": [
        "inspect.istraceback",
        "inspect.getfile",
        "inspect.isframe",
        "inspect.findsource",
        "inspect.getsourcefile",
        "<builtin>.TypeError"
    ],
    "inspect.istraceback": [
        "<builtin>.isinstance"
    ],
    "inspect.isframe": [
        "<builtin>.isinstance"
    ],
    "inspect.getsourcefile": [
        "<builtin>.getattr",
        "<builtin>.any",
        "inspect.getfile",
        "ntpath.splitext",
        "genericpath.exists",
        "posixpath.splitext",
        "inspect.getmodule"
    ],
    "inspect.getfile": [
        "inspect.isfunction",
        "<builtin>.hasattr",
        "inspect.istraceback",
        "<builtin>.type",
        "<builtin>.getattr",
        "inspect.isclass",
        "inspect.ismodule",
        "inspect.isframe",
        "inspect.ismethod",
        "inspect.iscode",
        "<builtin>.TypeError"
    ],
    "inspect.ismodule": [
        "<builtin>.isinstance"
    ],
    "inspect.isclass": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "inspect.getmodule": [
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "inspect.ismodule",
        "inspect.getabsfile",
        "ntpath.realpath",
        "posixpath.realpath",
        "<map>.get"
    ],
    "inspect.getabsfile": [
        "posixpath.abspath",
        "ntpath.normcase",
        "inspect.getfile",
        "posixpath.normcase",
        "inspect.getsourcefile",
        "ntpath.abspath"
    ],
    "posixpath.realpath": [
        "posixpath._joinrealpath",
        "posixpath.abspath",
        "os._fspath"
    ],
    "posixpath._joinrealpath": [
        "posixpath.split",
        "<builtin>.isinstance",
        "posixpath.islink",
        "posixpath._joinrealpath",
        "posixpath.join",
        "posixpath.isabs"
    ],
    "posixpath.islink": [
        "stat.S_ISLNK"
    ],
    "stat.S_ISLNK": [
        "stat.S_IFMT"
    ],
    "ntpath.realpath": [],
    "inspect.findsource": [
        "re.compile",
        "inspect.ismodule",
        "inspect.isframe",
        "<list>.append",
        "inspect.getsourcefile",
        "<builtin>.range",
        "inspect.isfunction",
        "linecache.checkcache",
        "inspect.ismethod",
        "<builtin>.hasattr",
        "inspect.getfile",
        "linecache.getlines",
        "<builtin>.OSError",
        "<builtin>.len",
        "inspect.istraceback",
        "inspect.isclass",
        "<list>.sort",
        "inspect.getmodule",
        "inspect.iscode"
    ],
    "<list>.sort": [],
    "psutil._psbsd.sensors_temperatures": [
        "<builtin>.range",
        "_collections.defaultdict",
        "psutil._psbsd.cpu_count_logical"
    ],
    "psutil.sensors_temperatures.convert": [
        "<builtin>.float"
    ],
    "bpytop.Config.__init__": [
        "bpytop.Config.load_config",
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "bpytop.Config.load_config": [
        "<builtin>.type",
        "<builtin>.str",
        "<builtin>.getattr",
        "logging.Logger.exception",
        "<builtin>.open",
        "<builtin>.int",
        "<builtin>.bool",
        "bpytop.strtobool",
        "genericpath.isfile"
    ],
    "genericpath.isfile": [
        "stat.S_ISREG"
    ],
    "stat.S_ISREG": [
        "stat.S_IFMT"
    ],
    "bpytop.strtobool": [
        "<builtin>.type",
        "<builtin>.ValueError"
    ],
    "logging.Logger.exception": [
        "logging.Logger.error"
    ],
    "logging.Logger.info": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.debug": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.warning": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "bpytop.Term": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "threading.Event.__init__"
    ],
    "bpytop.Fx": [
        "<builtin>.staticmethod",
        "re.compile",
        "<builtin>.classmethod"
    ],
    "bpytop.Raw": [],
    "bpytop.Nonblocking": [],
    "bpytop.Mv": [
        "<builtin>.staticmethod"
    ],
    "bpytop.Key": [
        "<builtin>.classmethod",
        "threading.Event.set",
        "threading.Event.__init__"
    ],
    "bpytop.Draw": [
        "<builtin>.classmethod",
        "threading.Event.set",
        "threading.Event.__init__"
    ],
    "bpytop.Color": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "bpytop.Colors": [
        "bpytop.Color.__init__"
    ],
    "bpytop.Color.__init__": [
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.str",
        "logging.Logger.exception",
        "<builtin>.hex",
        "<builtin>.int",
        "<builtin>.all",
        "<str>.startswith",
        "<str>.split",
        "<builtin>.ValueError",
        "bpytop.Color.truecolor_to_256",
        "<builtin>.map"
    ],
    "<builtin>.all": [],
    "<builtin>.hex": [],
    "bpytop.Color.truecolor_to_256": [
        "<builtin>.round"
    ],
    "bpytop.Theme": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "bpytop.Banner": [
        "<builtin>.len",
        "<builtin>.enumerate",
        "bpytop.Mv.right",
        "<builtin>.classmethod",
        "bpytop.Color.fg"
    ],
    "bpytop.Color.fg": [
        "<builtin>.len",
        "bpytop.Color.escape_color"
    ],
    "bpytop.Color.escape_color": [
        "bpytop.Color.truecolor_to_256",
        "<builtin>.int",
        "<builtin>.len",
        "logging.Logger.exception"
    ],
    "bpytop.Mv.right": [],
    "bpytop.Symbol": [
        "bpytop.Color.fg"
    ],
    "bpytop.Graph": [],
    "bpytop.Graphs": [],
    "bpytop.Meter": [],
    "bpytop.Meters": [],
    "bpytop.Box": [
        "<builtin>.sorted",
        "<builtin>.classmethod"
    ],
    "bpytop.SubBox": [],
    "bpytop.CpuBox": [
        "<builtin>.classmethod"
    ],
    "bpytop.MemBox": [
        "<builtin>.classmethod"
    ],
    "bpytop.NetBox": [
        "<builtin>.classmethod"
    ],
    "bpytop.ProcBox": [
        "<builtin>.classmethod"
    ],
    "bpytop.Collector": [
        "<builtin>.classmethod",
        "threading.Event.set",
        "threading.Event.__init__"
    ],
    "bpytop.CpuCollector": [
        "<builtin>.range",
        "<builtin>.classmethod"
    ],
    "bpytop.MemCollector": [
        "time.time",
        "<builtin>.classmethod"
    ],
    "bpytop.NetCollector": [
        "time.time",
        "<builtin>.classmethod"
    ],
    "bpytop.ProcCollector": [
        "<builtin>.classmethod",
        "<builtin>.compile"
    ],
    "bpytop.Menu": [
        "<builtin>.len",
        "bpytop.Fx.trans",
        "bpytop.Mv.down",
        "<builtin>.classmethod",
        "bpytop.Mv.left",
        "<builtin>.range",
        "bpytop.Color.fg"
    ],
    "bpytop.Fx.trans": [
        "<str>.replace"
    ],
    "bpytop.Mv.down": [],
    "bpytop.Mv.left": [],
    "bpytop.Timer": [
        "<builtin>.classmethod"
    ],
    "bpytop.UpdateChecker": [
        "<builtin>.classmethod"
    ],
    "bpytop.Init": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "bpytop.get_cpu_name": [
        "<str>.lstrip",
        "<str>.endswith",
        "subprocess.check_output",
        "re.sub",
        "<str>.index",
        "<str>.split",
        "<str>.replace"
    ],
    "subprocess.check_output": [
        "subprocess.run",
        "<builtin>.ValueError"
    ],
    "subprocess.run": [
        "subprocess.Popen.wait",
        "subprocess.Popen.communicate",
        "subprocess.Popen.kill",
        "subprocess.CalledProcessError.__init__",
        "<builtin>.ValueError",
        "subprocess.Popen.poll",
        "subprocess.CompletedProcess.__init__",
        "subprocess.Popen.__init__"
    ],
    "subprocess.Popen.kill": [
        "subprocess.Popen.send_signal"
    ],
    "subprocess.Popen.send_signal": [],
    "subprocess.Popen.poll": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen._internal_poll": [
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.CalledProcessError.__init__": [],
    "subprocess.CompletedProcess.__init__": [],
    "<str>.lstrip": [],
    "<str>.index": [],
    "bpytop.get_cpu_core_mapping": [
        "<list>.extend",
        "<builtin>.open",
        "<builtin>.int",
        "genericpath.isfile",
        "<builtin>.range"
    ],
    "bpytop.main": [
        "bpytop.Init.fail",
        "bpytop.Term.echo",
        "bpytop.Box.calc_sizes",
        "bpytop.CpuCollector.get_sensors",
        "bpytop.Collector.collect",
        "bpytop.Term.refresh",
        "bpytop.Draw.now",
        "bpytop.UpdateChecker.run",
        "bpytop.TimeIt.start",
        "<builtin>.isinstance",
        "logging.Logger.exception",
        "bpytop.Fx.trans",
        "bpytop.Init.start",
        "bpytop.Key.start",
        "bpytop.Box.draw_bg",
        "signal.signal",
        "bpytop.TimeIt.stop",
        "bpytop.Draw.out",
        "bpytop.Init.done",
        "bpytop.clean_quit",
        "bpytop.Collector.start",
        "bpytop.main.run",
        "bpytop.Term.title",
        "bpytop.Theme.__init__",
        "bpytop.Draw.buffer",
        "threading.Event.wait"
    ],
    "bpytop.TimeIt.start": [
        "time.time"
    ],
    "bpytop.Term.title": [],
    "bpytop.Draw.now": [
        "threading.Event.clear",
        "<builtin>.print",
        "threading.Event.wait",
        "threading.Event.set"
    ],
    "threading.Event.wait": [],
    "threading.Event.clear": [],
    "bpytop.Term.echo": [],
    "bpytop.UpdateChecker.run": [
        "threading.Thread.__init__",
        "threading.Thread.start"
    ],
    "threading.Thread.start": [
        "threading.Event.is_set",
        "threading.Event.wait",
        "<builtin>.RuntimeError"
    ],
    "threading.Event.is_set": [],
    "bpytop.Init.start": [
        "<builtin>.str",
        "<builtin>.round",
        "bpytop.Draw.buffer",
        "bpytop.Fx.trans",
        "bpytop.Draw.out",
        "bpytop.Mv.down",
        "bpytop.Graph.__init__",
        "bpytop.Mv.to",
        "bpytop.Banner.draw",
        "random.Random.randint",
        "bpytop.Mv.left",
        "<builtin>.range",
        "bpytop.Color.fg"
    ],
    "bpytop.Draw.buffer": [
        "<str>.lstrip",
        "<str>.rstrip",
        "<str>.endswith",
        "bpytop.Draw.out",
        "<str>.startswith"
    ],
    "bpytop.Draw.out": [
        "bpytop.Draw.clear",
        "bpytop.Draw.now",
        "<builtin>.sorted"
    ],
    "bpytop.Draw.clear": [],
    "bpytop.Banner.draw": [
        "bpytop.Mv.to",
        "bpytop.Draw.out",
        "<builtin>.enumerate"
    ],
    "bpytop.Mv.to": [],
    "random.Random.randint": [
        "random.Random.randrange"
    ],
    "random.Random.randrange": [
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.ValueError"
    ],
    "random.Random._randbelow_with_getrandbits": [],
    "bpytop.Graph.__init__": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "<list>.insert",
        "<builtin>.int",
        "bpytop.min_max",
        "<builtin>.min",
        "<builtin>.range",
        "bpytop.Graph._create"
    ],
    "bpytop.min_max": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "bpytop.Graph._create": [
        "<builtin>.len",
        "<builtin>.round",
        "<builtin>.bool",
        "bpytop.Mv.down",
        "<builtin>.float",
        "bpytop.Mv.left",
        "<builtin>.range"
    ],
    "bpytop.Theme.__init__": [
        "bpytop.Theme._load_theme",
        "bpytop.Theme.refresh"
    ],
    "bpytop.Theme.refresh": [
        "<builtin>.str",
        "logging.Logger.exception"
    ],
    "bpytop.Theme._load_theme": [
        "<builtin>.getattr",
        "logging.Logger.warning",
        "bpytop.Color.__init__",
        "bpytop.Draw.now",
        "<builtin>.setattr",
        "bpytop.Theme._load_file",
        "<builtin>.range",
        "bpytop.Color.fg"
    ],
    "bpytop.Theme._load_file": [
        "<builtin>.open",
        "<builtin>.str",
        "logging.Logger.exception"
    ],
    "bpytop.Init.fail": [
        "time.sleep",
        "logging.Logger.exception",
        "bpytop.Draw.buffer",
        "bpytop.clean_quit"
    ],
    "time.sleep": [],
    "bpytop.clean_quit": [
        "bpytop.Term.title",
        "bpytop.Term.echo",
        "<builtin>.round",
        "<builtin>.SystemExit",
        "logging.Logger.warning",
        "bpytop.Collector.stop",
        "<builtin>.print",
        "bpytop.Draw.now",
        "time.time",
        "logging.Logger.info",
        "_thread.interrupt_main",
        "bpytop.Key.stop"
    ],
    "_thread.interrupt_main": [],
    "bpytop.Key.stop": [],
    "bpytop.Collector.stop": [
        "threading.Event.set"
    ],
    "bpytop.CpuCollector.get_sensors": [
        "<builtin>.hasattr",
        "shutil.which",
        "subprocess.check_output",
        "<builtin>.bool",
        "psutil.sensors_temperatures"
    ],
    "shutil.which": [
        "<builtin>.isinstance",
        "posixpath.dirname",
        "<str>.endswith",
        "<str>.lower",
        "<builtin>.any",
        "ntpath.normcase",
        "ntpath.join",
        "shutil._access_check",
        "os._fscodec.fsdecode",
        "posixpath.normcase",
        "ntpath.dirname",
        "<str>.split",
        "os._fscodec.fsencode",
        "posixpath.join",
        "<builtin>.set"
    ],
    "shutil._access_check": [
        "nt._isdir",
        "genericpath.exists",
        "genericpath.isdir"
    ],
    "bpytop.Box.calc_sizes": [],
    "bpytop.Box.draw_bg": [
        "bpytop.Box.draw_clock",
        "bpytop.Draw.buffer",
        "bpytop.Box.draw_update_ms",
        "bpytop.Box.empty_bg"
    ],
    "bpytop.Box.empty_bg": [
        "bpytop.Mv.left",
        "bpytop.Mv.down",
        "bpytop.Banner.draw",
        "bpytop.Mv.right"
    ],
    "bpytop.Box.draw_update_ms": [
        "<builtin>.hasattr",
        "<builtin>.len",
        "bpytop.Draw.clear",
        "bpytop.Draw.buffer",
        "bpytop.Draw.out",
        "bpytop.Mv.to",
        "<builtin>.range",
        "psutil.sensors_battery"
    ],
    "psutil.sensors_battery": [
        "psutil._psosx.sensors_battery",
        "psutil._psbsd.sensors_battery",
        "psutil._pslinux.sensors_battery",
        "psutil._pswindows.sensors_battery"
    ],
    "psutil._pslinux.sensors_battery": [
        "psutil._pslinux.sensors_battery.multi_bcat",
        "ntpath.join",
        "<str>.lower",
        "<builtin>.int",
        "<builtin>.sorted",
        "<builtin>.object",
        "posixpath.join",
        "psutil._common.cat",
        "<str>.strip"
    ],
    "psutil._pslinux.sensors_battery.multi_bcat": [
        "psutil._common.bcat",
        "<builtin>.int",
        "<str>.strip"
    ],
    "psutil._pswindows.sensors_battery": [
        "<builtin>.bool"
    ],
    "psutil._psosx.sensors_battery": [],
    "psutil._psbsd.sensors_battery": [],
    "bpytop.Box.draw_clock": [
        "<builtin>.hasattr",
        "<builtin>.len",
        "bpytop.Draw.buffer",
        "time.strftime",
        "bpytop.Draw.out",
        "bpytop.Mv.to",
        "time.tzset",
        "psutil.sensors_battery"
    ],
    "time.tzset": [],
    "time.strftime": [],
    "signal.signal": [
        "signal._enum_to_int",
        "signal._int_to_enum"
    ],
    "signal._enum_to_int": [
        "<builtin>.int"
    ],
    "signal._int_to_enum": [],
    "bpytop.Key.start": [
        "threading.Thread.__init__",
        "threading.Thread.start"
    ],
    "bpytop.Collector.start": [
        "threading.Thread.__init__",
        "threading.Thread.start"
    ],
    "bpytop.Collector.collect": [
        "<list>.remove",
        "threading.Event.wait",
        "<builtin>.list",
        "threading.Event.set"
    ],
    "bpytop.Init.done": [
        "bpytop.Draw.clear",
        "bpytop.Draw.now",
        "bpytop.Init.draw_bg"
    ],
    "bpytop.Init.draw_bg": [
        "bpytop.Draw.buffer",
        "time.sleep",
        "bpytop.Draw.out",
        "bpytop.Graph.__init__",
        "bpytop.Mv.to",
        "random.Random.randint",
        "<builtin>.range"
    ],
    "bpytop.Term.refresh": [
        "threading.Event.clear",
        "<builtin>.str",
        "<builtin>.getattr",
        "bpytop.Box.calc_sizes",
        "bpytop.Mv.right",
        "bpytop.Mv.down",
        "bpytop.Box.draw_bg",
        "bpytop.Draw.now",
        "bpytop.create_box",
        "threading.Event.wait",
        "bpytop.Key.has_key",
        "bpytop.Key.last",
        "bpytop.Mv.left",
        "<builtin>.min",
        "bpytop.clean_quit",
        "bpytop.Timer.finish",
        "threading.Event.set"
    ],
    "bpytop.create_box": [
        "bpytop.Mv.right",
        "bpytop.Mv.to",
        "<builtin>.range"
    ],
    "bpytop.Key.has_key": [
        "<builtin>.bool"
    ],
    "bpytop.Key.last": [],
    "bpytop.Timer.finish": [
        "bpytop.Key.break_wait",
        "time.time"
    ],
    "bpytop.Key.break_wait": [
        "threading.Event.clear",
        "time.sleep",
        "threading.Event.set"
    ],
    "bpytop.TimeIt.stop": [
        "time.time",
        "logging.Logger.debug"
    ],
    "bpytop.main.run": [
        "bpytop.Key.input_wait",
        "bpytop.process_keys",
        "bpytop.Collector.collect",
        "bpytop.Term.refresh",
        "bpytop.Timer.not_zero",
        "bpytop.Timer.left",
        "bpytop.Timer.stamp"
    ],
    "bpytop.Timer.stamp": [
        "time.time"
    ],
    "bpytop.Timer.not_zero": [
        "time.time"
    ],
    "bpytop.Timer.left": [
        "time.time",
        "bpytop.Timer.stamp"
    ],
    "bpytop.Key.input_wait": [
        "threading.Event.clear",
        "threading.Event.is_set",
        "bpytop.Draw.now",
        "threading.Event.wait"
    ],
    "bpytop.process_keys": [
        "bpytop.Collector.collect",
        "bpytop.Term.refresh",
        "bpytop.Box.draw_update_ms",
        "logging.Logger.exception",
        "bpytop.Key.get",
        "bpytop.Menu.options",
        "psutil.pid_exists",
        "<builtin>.list",
        "bpytop.Menu.main",
        "bpytop.Key.has_key",
        "bpytop.clean_quit",
        "bpytop.ProcBox.selector",
        "<builtin>.len",
        "bpytop.Draw.clear",
        "bpytop.ProcCollector.sorting",
        "threading.Event.wait",
        "bpytop.NetCollector.switch",
        "bpytop.Key.get_mouse",
        "bpytop.Menu.help",
        "logging.Logger.error"
    ],
    "bpytop.Key.get": [],
    "bpytop.Key.get_mouse": [
        "threading.Event.clear",
        "threading.Event.is_set"
    ],
    "bpytop.Menu.help": [
        "logging.Logger.warning",
        "bpytop.Key.input_wait",
        "bpytop.Collector.collect",
        "bpytop.Timer.not_zero",
        "bpytop.Draw.now",
        "bpytop.Mv.left",
        "<builtin>.range",
        "bpytop.Key.get",
        "bpytop.Fx.uncolor",
        "bpytop.Mv.to",
        "bpytop.Mv.right",
        "bpytop.Banner.draw",
        "bpytop.clean_quit",
        "bpytop.Draw.saved_buffer",
        "bpytop.Timer.left",
        "<builtin>.len",
        "<builtin>.enumerate",
        "bpytop.Mv.down",
        "bpytop.create_box",
        "threading.Event.wait",
        "bpytop.Key.get_mouse",
        "bpytop.Timer.stamp"
    ],
    "bpytop.Draw.saved_buffer": [
        "<builtin>.sorted"
    ],
    "bpytop.Fx.uncolor": [],
    "bpytop.Menu.options": [
        "<builtin>.str",
        "logging.Logger.warning",
        "bpytop.CpuCollector.get_sensors",
        "bpytop.Key.input_wait",
        "bpytop.Collector.collect",
        "bpytop.Term.refresh",
        "bpytop.Draw.now",
        "bpytop.Timer.not_zero",
        "bpytop.Box.draw_update_ms",
        "bpytop.Mv.left",
        "<builtin>.range",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<builtin>.round",
        "bpytop.Key.get",
        "<builtin>.int",
        "bpytop.Fx.uncolor",
        "bpytop.Mv.to",
        "bpytop.Timer.finish",
        "<builtin>.map",
        "<builtin>.type",
        "<builtin>.list",
        "bpytop.Mv.right",
        "bpytop.Banner.draw",
        "<builtin>.setattr",
        "bpytop.clean_quit",
        "<builtin>.min",
        "bpytop.Draw.saved_buffer",
        "logging.Logger.info",
        "bpytop.Timer.left",
        "logging.Logger.setLevel",
        "<builtin>.len",
        "<builtin>.enumerate",
        "bpytop.Draw.clear",
        "<str>.isdigit",
        "bpytop.Theme.refresh",
        "bpytop.Mv.down",
        "bpytop.ProcCollector.sorting",
        "bpytop.create_box",
        "threading.Event.wait",
        "<builtin>.max",
        "bpytop.Key.get_mouse",
        "bpytop.Timer.stamp"
    ],
    "bpytop.ProcCollector.sorting": [
        "<builtin>.len",
        "bpytop.Collector.collect"
    ],
    "<str>.isdigit": [],
    "bpytop.Menu.main": [
        "logging.Logger.warning",
        "bpytop.Key.input_wait",
        "bpytop.Collector.collect",
        "bpytop.Timer.not_zero",
        "bpytop.Draw.now",
        "bpytop.Mv.left",
        "bpytop.Key.get",
        "bpytop.Fx.uncolor",
        "bpytop.Mv.to",
        "bpytop.Menu.options",
        "<builtin>.list",
        "bpytop.Mv.right",
        "bpytop.Banner.draw",
        "bpytop.clean_quit",
        "bpytop.Key.mouse_moved",
        "bpytop.Draw.saved_buffer",
        "bpytop.Timer.left",
        "<builtin>.len",
        "bpytop.Mv.down",
        "threading.Event.wait",
        "bpytop.Key.get_mouse",
        "bpytop.Menu.help",
        "bpytop.Timer.stamp"
    ],
    "bpytop.Key.mouse_moved": [
        "threading.Event.clear",
        "threading.Event.is_set"
    ],
    "bpytop.ProcBox.selector": [
        "<builtin>.round",
        "bpytop.Collector.collect"
    ],
    "psutil.pid_exists": [
        "psutil.pids",
        "psutil._pslinux.pid_exists",
        "psutil._pssunos.pid_exists",
        "psutil._psposix.pid_exists",
        "psutil._psaix.pid_exists",
        "psutil._psbsd.pid_exists"
    ],
    "psutil._pslinux.pid_exists": [
        "psutil._common.open_binary",
        "<builtin>.int",
        "<builtin>.ValueError",
        "psutil._psposix.pid_exists",
        "psutil._common.get_procfs_path",
        "psutil._pslinux.pids"
    ],
    "psutil._psposix.pid_exists": [],
    "psutil._pslinux.pids": [
        "<builtin>.int",
        "psutil._common.get_procfs_path",
        "psutil._compat.b"
    ],
    "psutil._compat.b": [],
    "psutil._pssunos.pid_exists": [
        "psutil._psposix.pid_exists"
    ],
    "psutil._psbsd.pid_exists": [
        "psutil._psbsd.pids",
        "psutil._psposix.pid_exists"
    ],
    "psutil._psbsd.pids": [
        "psutil._psbsd._pid_0_exists"
    ],
    "psutil._psbsd._pid_0_exists": [
        "psutil._psbsd.Process.__init__",
        "psutil._psbsd.Process.name"
    ],
    "psutil._psbsd.Process.__init__": [],
    "psutil._psbsd.Process.name": [
        "psutil._psbsd.Process.oneshot"
    ],
    "psutil._psbsd.Process.oneshot": [
        "<builtin>.len"
    ],
    "psutil._psaix.pid_exists": [
        "<builtin>.str",
        "ntpath.join",
        "genericpath.exists",
        "posixpath.join",
        "psutil._common.get_procfs_path"
    ],
    "psutil.pids": [
        "<builtin>.sorted",
        "psutil._psbsd.pids",
        "psutil._pssunos.pids",
        "psutil._psosx.pids",
        "psutil._psaix.pids",
        "psutil._pslinux.pids"
    ],
    "psutil._pssunos.pids": [
        "<builtin>.int",
        "psutil._common.get_procfs_path",
        "psutil._compat.b"
    ],
    "psutil._psosx.pids": [
        "psutil._psosx.Process.__init__",
        "psutil._psosx.Process.create_time"
    ],
    "psutil._psosx.Process.__init__": [],
    "psutil._psosx.Process.create_time": [
        "psutil._psosx.Process._get_kinfo_proc"
    ],
    "psutil._psosx.Process._get_kinfo_proc": [
        "<builtin>.len"
    ],
    "psutil._psaix.pids": [
        "<builtin>.int",
        "psutil._common.get_procfs_path"
    ],
    "bpytop.NetCollector.switch": [
        "<builtin>.len",
        "bpytop.Collector.collect"
    ]
}