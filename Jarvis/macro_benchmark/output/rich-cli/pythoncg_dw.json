{
    "rich_cli": [],
    "rich_cli.__main__": [
        "rich_cli.__main__.run",
        "<builtin>.sorted",
        "click.decorators.option",
        "rich_cli.__main__.ForceWidth",
        "rich.measure",
        "typing",
        "rich_cli.__main__.RichCommand",
        "rich.markup",
        "click.types.Choice.__init__",
        "pygments.util",
        "rich.text",
        "rich.console",
        "click.decorators.argument.decorator",
        "click.decorators.command",
        "click.decorators.argument",
        "rich.console.Console.__init__",
        "operator",
        "click.decorators.option.decorator",
        "click"
    ],
    "operator": [
        "operator.attrgetter",
        "operator.methodcaller",
        "operator.itemgetter"
    ],
    "operator.attrgetter": [],
    "operator.itemgetter": [],
    "operator.methodcaller": [],
    "typing": [
        "typing._TypingEllipsis",
        "typing.Generic",
        "typing.TypedDict",
        "typing.SupportsIndex",
        "typing._TypedDictMeta",
        "typing.NamedTuple",
        "contextlib",
        "typing.IO",
        "typing._Immutable",
        "typing.SupportsComplex",
        "typing.SupportsBytes",
        "typing._SpecialForm",
        "typing._GenericAlias",
        "re",
        "typing._ProtocolMeta",
        "collections.abc",
        "typing._alias",
        "types",
        "typing._TypingEmpty",
        "typing.BinaryIO",
        "typing.Protocol",
        "abc",
        "typing.TextIO",
        "typing.SupportsAbs",
        "typing._VariadicGenericAlias",
        "typing.SupportsFloat",
        "typing.ForwardRef",
        "typing.re",
        "typing._SpecialForm.__init__",
        "typing._Final",
        "functools",
        "collections",
        "typing.SupportsRound",
        "operator",
        "typing.SupportsInt",
        "typing.NamedTupleMeta",
        "typing.io",
        "typing.TypeVar.__init__",
        "typing.TypeVar"
    ],
    "abc": [
        "abc.abstractstaticmethod",
        "abc.abstractclassmethod",
        "abc.ABC",
        "_py_abc",
        "abc.abstractproperty"
    ],
    "abc.abstractclassmethod": [],
    "abc.abstractstaticmethod": [],
    "abc.abstractproperty": [],
    "_py_abc": [
        "_weakrefset",
        "_py_abc.ABCMeta"
    ],
    "_weakrefset": [
        "_weakrefset._IterationGuard",
        "_weakrefset.WeakSet"
    ],
    "_weakrefset._IterationGuard": [],
    "_weakrefset.WeakSet": [],
    "_py_abc.ABCMeta": [],
    "abc.ABC": [],
    "collections": [
        "heapq",
        "reprlib",
        "collections._OrderedDictKeysView",
        "collections.UserString",
        "keyword",
        "collections.Counter",
        "collections.UserDict",
        "operator",
        "collections._Link",
        "collections._OrderedDictValuesView",
        "collections.ChainMap",
        "collections._OrderedDictItemsView",
        "collections.OrderedDict",
        "collections.UserList"
    ],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "<builtin>.frozenset": [],
    "heapq": [
        "_heapq"
    ],
    "_heapq": [],
    "reprlib": [
        "reprlib.Repr",
        "reprlib.Repr.__init__"
    ],
    "reprlib.Repr": [],
    "reprlib.Repr.__init__": [],
    "collections._OrderedDictKeysView": [],
    "collections._OrderedDictItemsView": [],
    "collections._OrderedDictValuesView": [],
    "collections._Link": [],
    "collections.OrderedDict": [
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.classmethod",
        "<builtin>.object",
        "reprlib.recursive_repr"
    ],
    "<builtin>.object": [],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "<builtin>.set": [],
    "<builtin>.getattr": [],
    "<builtin>.classmethod": [],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.ChainMap": [
        "<builtin>.property",
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.classmethod",
        "reprlib.recursive_repr"
    ],
    "<builtin>.property": [],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "collections.UserList": [],
    "collections.UserString": [],
    "collections.abc": [
        "collections.abc"
    ],
    "contextlib": [
        "contextlib.ExitStack",
        "contextlib._GeneratorContextManager",
        "contextlib.suppress",
        "contextlib._GeneratorContextManagerBase",
        "collections.abc",
        "contextlib._RedirectStream",
        "contextlib._AsyncGeneratorContextManager",
        "contextlib.AbstractContextManager",
        "abc",
        "contextlib._BaseExitStack",
        "contextlib.redirect_stderr",
        "contextlib.ContextDecorator",
        "contextlib.AbstractAsyncContextManager",
        "functools",
        "collections",
        "contextlib.AsyncExitStack",
        "contextlib.nullcontext",
        "contextlib.closing",
        "contextlib.redirect_stdout",
        "types"
    ],
    "functools": [
        "functools.cached_property",
        "reprlib",
        "functools._HashedSeq",
        "collections",
        "collections.namedtuple",
        "<builtin>.object",
        "abc",
        "functools.partialmethod",
        "functools.singledispatchmethod",
        "functools.partial"
    ],
    "functools.partial": [
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr"
    ],
    "functools.partialmethod": [
        "<builtin>.property"
    ],
    "collections.namedtuple": [
        "<builtin>.classmethod",
        "collections.<lambda1>",
        "<builtin>.len",
        "<str>.replace",
        "<builtin>.zip",
        "<builtin>.str",
        "_collections._tuplegetter",
        "<builtin>.list",
        "<builtin>.reversed",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.dict",
        "<builtin>.repr",
        "<builtin>.exec",
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.set",
        "<str>.join",
        "<builtin>.map",
        "<builtin>.enumerate",
        "<str>.split"
    ],
    "<builtin>.isinstance": [],
    "<builtin>.map": [],
    "<builtin>.list": [],
    "<builtin>.str": [],
    "<builtin>.enumerate": [],
    "<builtin>.type": [],
    "<builtin>.TypeError": [],
    "<builtin>.ValueError": [],
    "<builtin>.tuple": [],
    "<builtin>.len": [],
    "<builtin>.reversed": [],
    "<builtin>.zip": [],
    "<builtin>.dict": [],
    "<builtin>.repr": [],
    "<str>.join": [],
    "<builtin>.exec": [],
    "_collections._tuplegetter": [],
    "collections.<lambda1>": [
        "operator.itemgetter.__init__",
        "<builtin>.property"
    ],
    "operator.itemgetter.__init__": [],
    "functools._HashedSeq": [],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.cached_property": [],
    "types": [
        "types._ag",
        "types._C",
        "<builtin>.type",
        "<builtin>.globals",
        "types.DynamicClassAttribute",
        "<builtin>.object",
        "types._c",
        "types._cell_factory",
        "types._GeneratorWrapper",
        "types._g"
    ],
    "types._cell_factory": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "types._C": [],
    "types.DynamicClassAttribute": [],
    "types._GeneratorWrapper": [
        "<builtin>.property"
    ],
    "<builtin>.globals": [],
    "contextlib.AbstractContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "abc.abstractmethod": [],
    "contextlib.AbstractAsyncContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.ContextDecorator": [],
    "contextlib._GeneratorContextManagerBase": [],
    "contextlib._GeneratorContextManager": [],
    "contextlib._AsyncGeneratorContextManager": [],
    "contextlib.closing": [],
    "contextlib._RedirectStream": [],
    "contextlib.redirect_stdout": [],
    "contextlib.redirect_stderr": [],
    "contextlib.suppress": [],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "<builtin>.staticmethod": [],
    "contextlib.ExitStack": [],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.nullcontext": [],
    "re": [
        "copyreg",
        "copyreg.pickle",
        "sre_compile.compile",
        "functools.lru_cache.decorating_function",
        "sre_parse",
        "<builtin>.chr",
        "functools",
        "enum",
        "<builtin>.globals",
        "<builtin>.type",
        "re.Scanner",
        "functools._lru_cache_wrapper.wrapper",
        "re.RegexFlag",
        "sre_compile",
        "functools.lru_cache"
    ],
    "enum": [
        "enum.auto",
        "enum.EnumMeta",
        "<builtin>.object",
        "enum.IntFlag",
        "enum.Enum",
        "enum._EnumDict",
        "enum.IntEnum",
        "enum.Flag",
        "types"
    ],
    "enum.auto": [],
    "enum._EnumDict": [],
    "enum.EnumMeta": [
        "<builtin>.property",
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "enum.Enum": [
        "types.DynamicClassAttribute.__init__",
        "<builtin>.classmethod"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.bool",
        "<builtin>.getattr"
    ],
    "<builtin>.bool": [],
    "enum.IntEnum": [],
    "enum.Flag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "sre_compile": [
        "sre_parse",
        "sre_constants",
        "<builtin>.tuple"
    ],
    "sre_parse": [
        "sre_parse.Tokenizer",
        "sre_constants",
        "<builtin>.frozenset",
        "<builtin>.ord",
        "sre_parse.SubPattern",
        "sre_parse.State",
        "sre_parse.Verbose"
    ],
    "sre_constants": [
        "sre_constants.error",
        "sre_constants._makecodes",
        "sre_constants._NamedIntConstant"
    ],
    "sre_constants.error": [],
    "sre_constants._NamedIntConstant": [],
    "sre_constants._makecodes": [
        "<builtin>.globals",
        "<str>.strip",
        "<builtin>.enumerate",
        "<str>.split"
    ],
    "<str>.strip": [],
    "<str>.split": [],
    "<builtin>.ord": [],
    "sre_parse.Verbose": [],
    "sre_parse.State": [
        "<builtin>.property"
    ],
    "sre_parse.SubPattern": [],
    "sre_parse.Tokenizer": [
        "<builtin>.property"
    ],
    "re.RegexFlag": [],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "sre_compile.dis",
        "sre_compile._code",
        "<builtin>.tuple",
        "<builtin>.print",
        "sre_parse.parse",
        "<map>.items",
        "sre_compile.isstring"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_parse.parse": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.seek",
        "sre_parse.SubPattern.dump",
        "sre_parse._parse_sub",
        "sre_parse.State.__init__",
        "sre_parse.fix_flags",
        "sre_parse.Tokenizer.__init__"
    ],
    "sre_parse.Tokenizer.__init__": [
        "<builtin>.str",
        "sre_parse.Tokenizer.__next",
        "<builtin>.isinstance"
    ],
    "sre_parse.Tokenizer.__next": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse._parse_sub": [
        "sre_parse.SubPattern.append",
        "<list>.append",
        "<builtin>.len",
        "<list>",
        "sre_parse.Tokenizer.tell",
        "sre_parse.SubPattern.__init__",
        "<list>.extend",
        "sre_parse.Tokenizer.match"
    ],
    "<list>": [],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.SubPattern.__init__": [],
    "<list>.extend": [],
    "<list>.append": [],
    "sre_parse.SubPattern.append": [
        "<list>.append"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "sre_parse.SubPattern.dump": [
        "<builtin>.isinstance",
        "<builtin>.print",
        "<builtin>.enumerate",
        "<builtin>.str"
    ],
    "<builtin>.print": [],
    "sre_compile._code": [
        "sre_compile._compile_info",
        "<list>.append",
        "sre_compile._compile"
    ],
    "sre_compile._compile_info": [
        "sre_compile._optimize_charset",
        "sre_parse.SubPattern.getwidth",
        "<list>",
        "<builtin>.len",
        "sre_compile._compile_charset",
        "<list>.extend",
        "sre_compile._get_literal_prefix",
        "sre_compile._get_charset_prefix"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.max",
        "<builtin>.min"
    ],
    "<builtin>.min": [],
    "<builtin>.max": [],
    "sre_compile._get_literal_prefix": [
        "<builtin>.len",
        "<list>",
        "sre_compile._get_iscased",
        "sre_compile._combine_flags",
        "<list>.extend",
        "sre_compile._get_literal_prefix"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._combine_flags": [],
    "sre_compile._get_charset_prefix": [
        "<builtin>.map",
        "<builtin>.range",
        "<list>",
        "sre_compile._get_iscased",
        "sre_compile._combine_flags",
        "<builtin>.any"
    ],
    "<builtin>.range": [],
    "<builtin>.any": [],
    "sre_compile._optimize_charset": [
        "<builtin>.map",
        "<builtin>.bytearray",
        "sre_compile._mk_bitmap",
        "<builtin>.bytes",
        "<list>.append",
        "<builtin>.range",
        "<builtin>.len",
        "sre_compile._bytes_to_codes",
        "<builtin>.any"
    ],
    "<builtin>.bytearray": [],
    "sre_compile._mk_bitmap": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "<builtin>.bytes": [],
    "sre_compile._bytes_to_codes": [
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "<builtin>.memoryview": [],
    "sre_compile._compile_charset": [
        "sre_constants.error.__init__",
        "<list>.extend",
        "<list>"
    ],
    "sre_constants.error.__init__": [
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "<builtin>.super": [],
    "sre_compile._compile": [
        "sre_compile._simple",
        "sre_compile._compile",
        "sre_compile._optimize_charset",
        "<list>",
        "sre_compile._compile_charset",
        "<map>.get",
        "sre_compile._combine_flags",
        "sre_constants.error.__init__"
    ],
    "<map>.get": [],
    "sre_compile._simple": [
        "sre_compile._simple",
        "<builtin>.len"
    ],
    "sre_compile.dis": [
        "sre_compile.dis.dis_",
        "<builtin>.set",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "sre_compile.dis.dis_": [
        "sre_compile.dis.dis_.print_2",
        "<builtin>.map",
        "<builtin>.ValueError",
        "sre_compile.dis.dis_",
        "<builtin>.chr",
        "<builtin>.range",
        "sre_compile._hex_code",
        "sre_compile.dis.dis_.print_",
        "<builtin>.bin",
        "<builtin>.str",
        "<builtin>.list"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile._hex_code": [],
    "<map>.items": [],
    "functools.lru_cache": [
        "<builtin>.isinstance",
        "<builtin>.callable",
        "<builtin>.TypeError",
        "functools._lru_cache_wrapper",
        "functools.update_wrapper"
    ],
    "<builtin>.callable": [],
    "functools._lru_cache_wrapper": [
        "<builtin>.object",
        "_thread.RLock"
    ],
    "_thread.RLock": [],
    "functools.update_wrapper": [
        "<builtin>.getattr"
    ],
    "functools._lru_cache_wrapper.wrapper": [
        "functools._make_key"
    ],
    "functools._make_key": [
        "<builtin>.type",
        "functools._HashedSeq.__init__",
        "<builtin>.tuple",
        "<builtin>.len"
    ],
    "functools._HashedSeq.__init__": [
        "<builtin>.hash"
    ],
    "<builtin>.hash": [],
    "functools.lru_cache.decorating_function": [
        "functools.update_wrapper",
        "functools._lru_cache_wrapper"
    ],
    "copyreg": [],
    "copyreg.pickle": [
        "copyreg.constructor",
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "copyreg.constructor": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "re.Scanner": [],
    "typing._Final": [],
    "typing._Immutable": [],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._tp_cache": [
        "functools.wraps",
        "functools.lru_cache.decorating_function",
        "<list>.append",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache"
    ],
    "functools.wraps": [],
    "typing._SpecialForm.__init__": [],
    "typing.ForwardRef": [],
    "typing.TypeVar": [],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._VariadicGenericAlias": [
        "typing._tp_cache"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing._TypingEmpty": [],
    "typing._TypingEllipsis": [],
    "typing._ProtocolMeta": [],
    "typing.Protocol": [],
    "typing.TypeVar.__init__": [
        "typing._type_check",
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.bool",
        "<builtin>.TypeError",
        "<builtin>.len"
    ],
    "typing._type_check": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.callable",
        "<builtin>.TypeError",
        "typing.ForwardRef.__init__"
    ],
    "typing.ForwardRef.__init__": [
        "<builtin>.compile",
        "<builtin>.SyntaxError",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "<builtin>.compile": [],
    "<builtin>.SyntaxError": [],
    "typing._alias": [
        "typing._GenericAlias.__init__"
    ],
    "typing._GenericAlias.__init__": [
        "typing._collect_type_vars",
        "<builtin>.tuple",
        "<map>.get",
        "<builtin>.isinstance"
    ],
    "typing._collect_type_vars": [
        "<list>.append",
        "<list>.extend",
        "<builtin>.tuple",
        "<builtin>.isinstance"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.NamedTupleMeta": [],
    "typing.NamedTuple": [],
    "typing._TypedDictMeta": [],
    "typing.TypedDict": [],
    "typing.IO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.io": [],
    "typing.re": [],
    "click": [
        "click.types",
        "click.utils",
        "click.exceptions",
        "click.decorators",
        "click.parser",
        "click.core",
        "click.formatting",
        "click.termui",
        "click.globals"
    ],
    "click.core": [
        "click.utils",
        "click.core.CommandCollection",
        "click.core.Parameter",
        "click.parser",
        "click.core.ParameterSource",
        "click.formatting",
        "typing_extensions",
        "click.termui",
        "click.core.MultiCommand",
        "inspect",
        "contextlib",
        "gettext",
        "typing",
        "click.core.Group",
        "collections.abc",
        "contextlib.contextmanager",
        "click.core.Option",
        "click.core.Command",
        "click.core.Argument",
        "click.shell_completion",
        "click.types",
        "click.exceptions",
        "click.core.Context",
        "functools",
        "enum",
        "click.core.BaseCommand",
        "os",
        "typing.TypeVar.__init__",
        "click.globals"
    ],
    "inspect": [
        "inspect._void",
        "<builtin>.hasattr",
        "collections.namedtuple",
        "inspect.EndOfBlock",
        "inspect.BlockFinder",
        "inspect._ParameterKind",
        "tokenize",
        "inspect.Parameter",
        "<builtin>.globals",
        "<builtin>.object",
        "inspect._empty",
        "re",
        "dis",
        "collections.abc",
        "token",
        "<builtin>.type",
        "abc",
        "warnings",
        "functools",
        "enum",
        "collections",
        "linecache",
        "importlib.machinery",
        "operator",
        "<map>.items",
        "os",
        "inspect.Signature",
        "inspect.BoundArguments",
        "types"
    ],
    "dis": [
        "io",
        "dis.Bytecode",
        "collections",
        "collections.namedtuple",
        "dis.Instruction",
        "opcode",
        "types"
    ],
    "io": [
        "io.RawIOBase",
        "io.TextIOBase",
        "io.IOBase",
        "abc",
        "io.BufferedIOBase"
    ],
    "io.IOBase": [],
    "io.RawIOBase": [],
    "io.BufferedIOBase": [],
    "io.TextIOBase": [],
    "opcode": [
        "_opcode",
        "opcode.def_op",
        "opcode.name_op",
        "opcode.jrel_op",
        "opcode.jabs_op",
        "<list>.append",
        "<builtin>.range"
    ],
    "_opcode": [],
    "opcode.def_op": [],
    "opcode.name_op": [
        "opcode.def_op",
        "<list>.append"
    ],
    "opcode.jrel_op": [
        "opcode.def_op",
        "<list>.append"
    ],
    "opcode.jabs_op": [
        "opcode.def_op",
        "<list>.append"
    ],
    "<str>.replace": [],
    "dis.Instruction": [],
    "dis.Bytecode": [
        "<builtin>.classmethod"
    ],
    "importlib.machinery": [],
    "linecache": [
        "functools",
        "os",
        "tokenize"
    ],
    "os": [
        "os._Environ",
        "os._fscodec",
        "os._exists",
        "<builtin>.globals",
        "os._wrap_close",
        "stat",
        "collections.abc",
        "os._AddedDllDirectory",
        "os._createenviron",
        "<builtin>.set",
        "<list>.append",
        "posixpath",
        "abc",
        "ntpath",
        "os._add",
        "<list>.extend",
        "<builtin>.ImportError",
        "os._Environ.__init__",
        "os.PathLike"
    ],
    "stat": [],
    "<builtin>.ImportError": [],
    "ntpath": [
        "stat",
        "genericpath",
        "<builtin>.hasattr",
        "os"
    ],
    "genericpath": [
        "stat",
        "os"
    ],
    "<builtin>.hasattr": [],
    "posixpath": [
        "stat",
        "genericpath",
        "os"
    ],
    "os._exists": [
        "<builtin>.globals"
    ],
    "os._add": [],
    "os._Environ": [],
    "os._createenviron": [
        "os._createenviron.encodekey",
        "os._Environ.__init__"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._createenviron.encode": [
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "os._Environ.__init__": [],
    "os._fscodec": [],
    "os._wrap_close": [],
    "os.PathLike": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "os._AddedDllDirectory": [],
    "tokenize": [
        "<builtin>.map",
        "io",
        "<builtin>.set",
        "collections",
        "collections.namedtuple",
        "tokenize.maybe",
        "tokenize.group",
        "tokenize.TokenError",
        "tokenize.TokenInfo",
        "re",
        "codecs",
        "re.compile",
        "<builtin>.sorted",
        "tokenize.StopTokenizing",
        "tokenize._all_string_prefixes",
        "token",
        "tokenize.Untokenizer",
        "<builtin>.any"
    ],
    "codecs": [
        "encodings",
        "codecs.StreamWriter",
        "codecs.IncrementalEncoder",
        "codecs.StreamReader",
        "codecs.CodecInfo",
        "codecs.Codec",
        "codecs.StreamRecoder",
        "<builtin>.SystemError",
        "codecs.BufferedIncrementalEncoder",
        "codecs.IncrementalDecoder",
        "codecs.StreamReaderWriter",
        "codecs.BufferedIncrementalDecoder"
    ],
    "<builtin>.SystemError": [],
    "codecs.CodecInfo": [],
    "codecs.Codec": [],
    "codecs.IncrementalEncoder": [],
    "codecs.BufferedIncrementalEncoder": [],
    "codecs.IncrementalDecoder": [],
    "codecs.BufferedIncrementalDecoder": [],
    "codecs.StreamWriter": [],
    "codecs.StreamReader": [],
    "codecs.StreamReaderWriter": [],
    "codecs.StreamRecoder": [],
    "encodings": [
        "encodings.CodecRegistryError",
        "codecs"
    ],
    "encodings.CodecRegistryError": [],
    "token": [
        "<builtin>.globals",
        "<list>.extend",
        "<builtin>.isinstance"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re._compile": [
        "sre_compile.compile",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.iter",
        "sre_compile.isstring",
        "<builtin>.next"
    ],
    "<builtin>.iter": [],
    "<builtin>.next": [],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [],
    "tokenize._all_string_prefixes": [],
    "<builtin>.sorted": [],
    "tokenize.TokenError": [],
    "tokenize.StopTokenizing": [],
    "tokenize.Untokenizer": [],
    "warnings": [
        "warnings._OptionError",
        "<builtin>.hasattr",
        "warnings.filterwarnings",
        "warnings.simplefilter",
        "warnings.catch_warnings",
        "warnings.WarningMessage",
        "warnings._processoptions"
    ],
    "warnings._OptionError": [],
    "warnings.WarningMessage": [],
    "warnings.catch_warnings": [],
    "warnings._processoptions": [
        "<builtin>.print",
        "warnings._setoption"
    ],
    "warnings._setoption": [
        "warnings._getaction",
        "<builtin>.int",
        "warnings.filterwarnings",
        "<builtin>.len",
        "re",
        "warnings._getcategory",
        "re.escape"
    ],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.__import__",
        "<builtin>.issubclass",
        "<builtin>.getattr"
    ],
    "<builtin>.__import__": [],
    "<builtin>.issubclass": [],
    "re.escape": [
        "<builtin>.str",
        "<str>.encode",
        "<str>.translate",
        "<builtin>.isinstance"
    ],
    "<builtin>.int": [],
    "warnings.filterwarnings": [
        "warnings._add_filter",
        "<builtin>.isinstance",
        "re",
        "re.compile",
        "<builtin>.issubclass"
    ],
    "warnings._add_filter": [
        "warnings._filters_mutated",
        "<list>.insert",
        "<list>.remove",
        "<list>.append"
    ],
    "<list>.remove": [],
    "<list>.insert": [],
    "warnings._filters_mutated": [],
    "warnings.simplefilter": [
        "warnings._add_filter",
        "<builtin>.isinstance"
    ],
    "inspect.EndOfBlock": [],
    "inspect.BlockFinder": [],
    "inspect._void": [],
    "inspect._empty": [],
    "inspect._ParameterKind": [
        "<builtin>.property"
    ],
    "inspect.Parameter": [
        "<builtin>.property"
    ],
    "inspect.BoundArguments": [
        "<builtin>.property"
    ],
    "inspect.Signature": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "gettext": [
        "locale",
        "ntpath.join",
        "gettext.GNUTranslations",
        "<builtin>.enumerate",
        "re",
        "posixpath.join",
        "re.compile",
        "os",
        "gettext.NullTranslations"
    ],
    "locale": [
        "functools.wraps",
        "encodings.aliases",
        "encodings",
        "functools",
        "<builtin>.globals",
        "<builtin>.hasattr",
        "<map>.setdefault",
        "re",
        "re.compile",
        "collections.abc",
        "<map>.items",
        "<builtin>.sorted"
    ],
    "encodings.aliases": [],
    "<map>.setdefault": [],
    "posixpath.join": [
        "<builtin>.map",
        "posixpath._get_sep",
        "genericpath._check_arg_types",
        "os._fspath",
        "<str>.endswith"
    ],
    "os._fspath": [
        "<builtin>.isinstance",
        "<str>.format",
        "<builtin>.type",
        "<builtin>.hasattr",
        "<builtin>.TypeError"
    ],
    "<str>.format": [],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "ntpath.join": [
        "<builtin>.map",
        "<str>.lower",
        "<builtin>.isinstance",
        "genericpath._check_arg_types",
        "os._fspath",
        "ntpath.splitdrive"
    ],
    "ntpath.splitdrive": [
        "<builtin>.isinstance",
        "<str>.find",
        "<builtin>.len",
        "<str>.replace",
        "os._fspath"
    ],
    "gettext.NullTranslations": [],
    "gettext.GNUTranslations": [],
    "click.types": [
        "click.types.DateTime",
        "click.utils",
        "click.types.BoolParamType",
        "click.types.ParamType",
        "typing_extensions",
        "click.types.IntParamType",
        "click.types.IntRange",
        "click.types.CompositeParamType",
        "click.types.File",
        "click.types.Path",
        "gettext",
        "click.types.FuncParamType",
        "click.types.Tuple",
        "typing",
        "click.core",
        "stat",
        "click.types.Choice",
        "click._compat",
        "click.types._NumberParamTypeBase",
        "click.types.StringParamType",
        "click.types._NumberRangeBase",
        "datetime",
        "click.types.FloatRange",
        "click.shell_completion",
        "click.exceptions",
        "click.types.FloatParamType",
        "click.types.UUIDParameterType",
        "os",
        "click.types.UnprocessedParamType"
    ],
    "datetime": [
        "datetime.timezone._create",
        "datetime.timedelta",
        "datetime.date",
        "<list>.append",
        "datetime.datetime",
        "datetime.time",
        "datetime._days_before_year",
        "_datetime",
        "datetime.timezone",
        "math",
        "datetime.tzinfo"
    ],
    "math": [],
    "datetime._days_before_year": [],
    "datetime.timedelta": [
        "<builtin>.property"
    ],
    "datetime.date": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.tzinfo": [],
    "datetime.time": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.datetime": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.timezone": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.object"
    ],
    "datetime.timezone._create": [],
    "_datetime": [],
    "click._compat": [
        "io",
        "click._compat._FixupStream",
        "weakref.WeakKeyDictionary.__init__",
        "weakref",
        "typing",
        "click._compat._NonClosingTextIOWrapper",
        "click._compat._AtomicFile",
        "re",
        "codecs",
        "re.compile",
        "click._compat._make_cached_stream_func",
        "os",
        "click._winconsole"
    ],
    "weakref": [
        "weakref.KeyedRef",
        "weakref.WeakValueDictionary",
        "_weakrefset",
        "weakref.WeakMethod",
        "weakref.WeakKeyDictionary",
        "collections.abc",
        "weakref.finalize"
    ],
    "weakref.WeakMethod": [],
    "weakref.WeakValueDictionary": [],
    "weakref.KeyedRef": [],
    "weakref.WeakKeyDictionary": [],
    "weakref.finalize": [
        "<builtin>.property",
        "weakref.finalize._Info",
        "<builtin>.classmethod"
    ],
    "weakref.finalize._Info": [],
    "click._compat._NonClosingTextIOWrapper": [],
    "click._compat._FixupStream": [],
    "click._compat._AtomicFile": [
        "<builtin>.property"
    ],
    "click._winconsole": [
        "click._compat",
        "io",
        "click._winconsole._WindowsConsoleRawIOBase",
        "click._winconsole._WindowsConsoleWriter",
        "click._winconsole.ConsoleStream",
        "typing",
        "click._winconsole._WindowsConsoleReader",
        "ctypes.WINFUNCTYPE",
        "ctypes",
        "ctypes.wintypes"
    ],
    "ctypes": [
        "ctypes.c_ubyte",
        "ctypes.c_longdouble",
        "ctypes.c_char_p",
        "ctypes.c_ushort",
        "ctypes._endian",
        "ctypes.c_longlong",
        "ctypes.PYFUNCTYPE",
        "ctypes.c_char",
        "ctypes.CFUNCTYPE",
        "ctypes.PyDLL",
        "ctypes.c_float",
        "ctypes.c_ulonglong",
        "<builtin>.Exception",
        "ctypes.OleDLL",
        "ctypes.c_ulong",
        "_ctypes",
        "ctypes.c_int",
        "ctypes.c_short",
        "ctypes.HRESULT",
        "ctypes.c_bool",
        "<builtin>.int",
        "ctypes.c_wchar",
        "ctypes.LibraryLoader.__init__",
        "ctypes.py_object",
        "ctypes.CDLL",
        "struct",
        "ctypes.LibraryLoader",
        "ctypes.c_long",
        "ctypes.c_double",
        "ctypes.c_wchar_p",
        "ctypes.c_void_p",
        "ctypes.c_uint",
        "ctypes._check_size",
        "ctypes.c_byte",
        "os",
        "ctypes.WinDLL",
        "ctypes._reset_cache"
    ],
    "_ctypes": [],
    "struct": [
        "_struct"
    ],
    "_struct": [],
    "<builtin>.Exception": [],
    "ctypes.py_object": [],
    "ctypes._check_size": [
        "struct",
        "<builtin>.SystemError"
    ],
    "ctypes.c_short": [],
    "ctypes.c_ushort": [],
    "ctypes.c_long": [],
    "ctypes.c_ulong": [],
    "ctypes.c_int": [],
    "ctypes.c_uint": [],
    "ctypes.c_float": [],
    "ctypes.c_double": [],
    "ctypes.c_longdouble": [],
    "ctypes.c_longlong": [],
    "ctypes.c_ulonglong": [],
    "ctypes.c_ubyte": [],
    "ctypes.c_byte": [],
    "ctypes.c_char": [],
    "ctypes.c_char_p": [],
    "ctypes.c_void_p": [],
    "ctypes.c_bool": [],
    "ctypes.c_wchar_p": [],
    "ctypes.c_wchar": [],
    "ctypes.CDLL": [],
    "ctypes.PyDLL": [],
    "ctypes.WinDLL": [],
    "ctypes.HRESULT": [],
    "ctypes.OleDLL": [],
    "ctypes.LibraryLoader": [],
    "ctypes.LibraryLoader.__init__": [],
    "ctypes.CFUNCTYPE": [
        "<builtin>.ValueError",
        "ctypes.CFUNCTYPE.CFunctionType"
    ],
    "ctypes.CFUNCTYPE.CFunctionType": [],
    "ctypes.PYFUNCTYPE": [
        "ctypes.PYFUNCTYPE.CFunctionType"
    ],
    "ctypes.PYFUNCTYPE.CFunctionType": [],
    "ctypes._endian": [
        "ctypes",
        "<builtin>.type",
        "ctypes._endian._swapped_meta",
        "ctypes._endian.BigEndianStructure"
    ],
    "ctypes._endian._swapped_meta": [],
    "ctypes._endian.BigEndianStructure": [],
    "ctypes._reset_cache": [
        "<map>.clear"
    ],
    "<map>.clear": [],
    "ctypes.wintypes": [
        "ctypes.wintypes.POINT",
        "ctypes.wintypes.FILETIME",
        "ctypes.wintypes.SIZE",
        "ctypes.wintypes._COORD",
        "ctypes.wintypes.WIN32_FIND_DATAA",
        "ctypes.wintypes._SMALL_RECT",
        "ctypes.wintypes.MSG",
        "ctypes",
        "ctypes.wintypes.VARIANT_BOOL",
        "ctypes.wintypes.WIN32_FIND_DATAW",
        "ctypes.wintypes.RECT"
    ],
    "ctypes.wintypes.VARIANT_BOOL": [],
    "ctypes.wintypes.RECT": [],
    "ctypes.wintypes._SMALL_RECT": [],
    "ctypes.wintypes._COORD": [],
    "ctypes.wintypes.POINT": [],
    "ctypes.wintypes.SIZE": [],
    "ctypes.wintypes.FILETIME": [],
    "ctypes.wintypes.MSG": [],
    "ctypes.wintypes.WIN32_FIND_DATAA": [],
    "ctypes.wintypes.WIN32_FIND_DATAW": [],
    "ctypes.WINFUNCTYPE": [
        "<builtin>.ValueError",
        "ctypes.WINFUNCTYPE.WinFunctionType"
    ],
    "ctypes.WINFUNCTYPE.WinFunctionType": [],
    "click._winconsole._WindowsConsoleRawIOBase": [],
    "click._winconsole._WindowsConsoleReader": [],
    "click._winconsole._WindowsConsoleWriter": [
        "<builtin>.staticmethod"
    ],
    "click._winconsole.ConsoleStream": [
        "<builtin>.property"
    ],
    "weakref.WeakKeyDictionary.__init__": [
        "weakref.WeakKeyDictionary.update",
        "_weakref.ref",
        "<builtin>.set"
    ],
    "_weakref.ref": [],
    "weakref.WeakKeyDictionary.update": [
        "<builtin>.type",
        "<builtin>.hasattr",
        "<builtin>.len",
        "weakref.WeakKeyDictionary.update",
        "_weakref.ref"
    ],
    "click._compat._make_cached_stream_func": [
        "weakref.WeakKeyDictionary.__init__"
    ],
    "click.exceptions": [
        "gettext",
        "click.utils",
        "click.exceptions.UsageError",
        "click.exceptions.BadOptionUsage",
        "click.exceptions.FileError",
        "click.exceptions.Exit",
        "typing",
        "click.core",
        "click.exceptions.MissingParameter",
        "click.exceptions.BadArgumentUsage",
        "click.exceptions.Abort",
        "click.exceptions.NoSuchOption",
        "os",
        "click.exceptions.BadParameter",
        "click._compat",
        "click.exceptions.ClickException"
    ],
    "click.utils": [
        "functools",
        "typing",
        "click.utils.KeepOpenFile",
        "re",
        "os",
        "typing_extensions",
        "click._compat",
        "click.utils.PacifyFlushWrapper",
        "click.utils.LazyFile",
        "typing.TypeVar.__init__",
        "types",
        "click.globals"
    ],
    "click.globals": [
        "threading",
        "typing",
        "_thread._local",
        "click.core",
        "typing.overload",
        "typing_extensions"
    ],
    "threading": [
        "_weakrefset.WeakSet.__init__",
        "collections.namedtuple",
        "<builtin>.hasattr",
        "threading.Thread",
        "threading.BoundedSemaphore",
        "threading.BrokenBarrierError",
        "threading._RLock",
        "threading.Semaphore",
        "_weakrefset",
        "threading.Event",
        "threading._DummyThread",
        "threading.Timer",
        "<builtin>.set",
        "itertools.count",
        "<list>.append",
        "threading.Barrier",
        "threading._MainThread",
        "traceback",
        "_threading_local",
        "threading.Condition",
        "collections",
        "threading._MainThread.__init__",
        "os"
    ],
    "threading._RLock": [],
    "threading.Condition": [],
    "threading.Semaphore": [],
    "threading.BoundedSemaphore": [],
    "threading.Event": [],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.BrokenBarrierError": [],
    "itertools.count": [],
    "_weakrefset.WeakSet.__init__": [
        "_weakref.ref",
        "<builtin>.set",
        "_weakrefset.WeakSet.update"
    ],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakrefset.WeakSet.add"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "traceback": [
        "traceback.TracebackException",
        "traceback.StackSummary",
        "collections",
        "linecache",
        "traceback.FrameSummary"
    ],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "threading.Timer": [],
    "threading._MainThread": [],
    "threading._DummyThread": [],
    "threading._MainThread.__init__": [
        "threading.Thread._set_tstate_lock",
        "threading.Thread._set_native_id",
        "threading.Thread._set_ident",
        "threading.Thread.__init__",
        "threading.Event.set"
    ],
    "threading.Thread.__init__": [
        "_weakrefset.WeakSet.add",
        "threading.current_thread",
        "threading._newname",
        "threading.Event.__init__",
        "<builtin>.str",
        "threading._make_invoke_excepthook"
    ],
    "threading._newname": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__",
        "_thread.get_ident"
    ],
    "_thread.get_ident": [],
    "threading._DummyThread.__init__": [
        "threading.Thread._set_ident",
        "threading.Thread.__init__",
        "threading._newname",
        "threading.Thread._set_native_id"
    ],
    "threading.Thread._set_ident": [
        "_thread.get_ident"
    ],
    "threading.Thread._set_native_id": [],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Condition.__init__": [
        "_collections.deque",
        "threading.RLock"
    ],
    "threading.RLock": [
        "threading._RLock.__init__",
        "_thread.RLock"
    ],
    "threading._RLock.__init__": [],
    "_collections.deque": [],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "<builtin>.RuntimeError": [],
    "threading.Thread._set_tstate_lock": [],
    "threading.Event.set": [],
    "_threading_local": [
        "threading",
        "contextlib",
        "_threading_local._localimpl",
        "_threading_local.local",
        "weakref",
        "contextlib.contextmanager"
    ],
    "_threading_local._localimpl": [],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "_threading_local.local": [],
    "typing_extensions": [
        "_collections.defaultdict",
        "typing_extensions._ConcatenateGenericAlias",
        "typing_extensions.TypeVarTuple",
        "typing_extensions._TypedDictMeta",
        "<builtin>.hasattr",
        "typing_extensions._SpecialForm",
        "typing_extensions._LiteralForm",
        "typing_extensions._AnyMeta",
        "typing_extensions._UnpackAlias",
        "typing_extensions._RequiredForm",
        "typing_extensions._UnpackSpecialForm",
        "typing_extensions.ParamSpecArgs",
        "typing_extensions._ProtocolMeta",
        "typing",
        "typing_extensions.Protocol",
        "typing_extensions._ExtensionsSpecialForm",
        "<builtin>.object",
        "typing_extensions._TypeGuardForm",
        "collections.abc",
        "typing_extensions.SupportsIndex",
        "typing_extensions.Annotated",
        "typing._tp_cache",
        "typing._alias",
        "typing_extensions._TypeAliasForm",
        "typing_extensions.Any",
        "typing_extensions.TypeVar",
        "typing_extensions.ParamSpecKwargs",
        "typing_extensions._TypedDictMeta.__init__",
        "typing_extensions._ConcatenateForm",
        "abc",
        "typing_extensions.ParamSpec",
        "typing_extensions._SpecialForm.__init__",
        "typing_extensions._Immutable",
        "typing_extensions._FinalForm",
        "functools",
        "collections",
        "typing_extensions._AnnotatedAlias",
        "operator",
        "<builtin>.frozenset",
        "typing_extensions._UnpackForm",
        "typing_extensions._NamedTupleMeta",
        "typing_extensions._DefaultMixin",
        "typing.TypeVar.__init__",
        "types"
    ],
    "typing_extensions._AnyMeta": [],
    "typing_extensions.Any": [],
    "typing_extensions._FinalForm": [],
    "typing_extensions._LiteralForm": [],
    "_collections.defaultdict": [],
    "typing_extensions._ProtocolMeta": [],
    "typing_extensions.Protocol": [
        "typing._tp_cache"
    ],
    "typing_extensions.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing_extensions._TypedDictMeta": [],
    "typing_extensions._TypedDictMeta.__init__": [
        "<builtin>.super"
    ],
    "typing_extensions._AnnotatedAlias": [],
    "typing_extensions.Annotated": [
        "typing._tp_cache"
    ],
    "typing_extensions._TypeAliasForm": [],
    "typing_extensions._DefaultMixin": [],
    "typing_extensions.TypeVar": [],
    "typing_extensions._Immutable": [],
    "typing_extensions.ParamSpecArgs": [],
    "typing_extensions.ParamSpecKwargs": [],
    "typing_extensions.ParamSpec": [
        "<builtin>.property"
    ],
    "typing_extensions._ConcatenateGenericAlias": [
        "<builtin>.property"
    ],
    "typing_extensions._ConcatenateForm": [],
    "typing_extensions._TypeGuardForm": [],
    "typing_extensions._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing_extensions._SpecialForm.__init__": [],
    "typing_extensions._RequiredForm": [],
    "typing_extensions._ExtensionsSpecialForm": [],
    "typing_extensions._UnpackAlias": [],
    "typing_extensions._UnpackForm": [],
    "typing_extensions._UnpackSpecialForm": [],
    "typing_extensions.TypeVarTuple": [],
    "typing_extensions._NamedTupleMeta": [],
    "_thread._local": [],
    "typing.overload": [],
    "click.utils.LazyFile": [],
    "click.utils.KeepOpenFile": [],
    "click.utils.PacifyFlushWrapper": [],
    "click.exceptions.ClickException": [],
    "click.exceptions.UsageError": [],
    "click.exceptions.BadParameter": [],
    "click.exceptions.MissingParameter": [],
    "click.exceptions.NoSuchOption": [],
    "click.exceptions.BadOptionUsage": [],
    "click.exceptions.BadArgumentUsage": [],
    "click.exceptions.FileError": [],
    "click.exceptions.Abort": [],
    "click.exceptions.Exit": [],
    "click.shell_completion": [
        "gettext",
        "click.shell_completion.BashComplete",
        "click.utils",
        "click.shell_completion.FishComplete",
        "typing",
        "click.parser",
        "click.core",
        "click.shell_completion.ShellComplete",
        "re",
        "os",
        "click.shell_completion.ZshComplete",
        "click.shell_completion.CompletionItem"
    ],
    "click.parser": [
        "gettext",
        "click.parser.Option",
        "click.exceptions",
        "click.parser.Argument",
        "typing",
        "collections",
        "click.core",
        "<builtin>.object",
        "click.parser.OptionParser",
        "typing_extensions",
        "click.parser.ParsingState",
        "typing.TypeVar.__init__"
    ],
    "click.parser.Option": [
        "<builtin>.property"
    ],
    "click.parser.Argument": [],
    "click.parser.ParsingState": [],
    "click.parser.OptionParser": [],
    "click.shell_completion.CompletionItem": [],
    "click.shell_completion.ShellComplete": [
        "<builtin>.property"
    ],
    "click.shell_completion.BashComplete": [],
    "click.shell_completion.ZshComplete": [],
    "click.shell_completion.FishComplete": [],
    "click.types.ParamType": [],
    "click.types.CompositeParamType": [
        "<builtin>.property"
    ],
    "click.types.FuncParamType": [],
    "click.types.UnprocessedParamType": [],
    "click.types.StringParamType": [],
    "click.types.Choice": [],
    "click.types.DateTime": [],
    "click.types._NumberParamTypeBase": [],
    "click.types._NumberRangeBase": [],
    "click.types.IntParamType": [],
    "click.types.IntRange": [],
    "click.types.FloatParamType": [],
    "click.types.FloatRange": [],
    "click.types.BoolParamType": [],
    "click.types.UUIDParameterType": [],
    "click.types.File": [],
    "click.types.Path": [],
    "click.types.Tuple": [
        "<builtin>.property"
    ],
    "click.formatting": [
        "gettext",
        "contextlib",
        "click.parser",
        "typing",
        "click.formatting.HelpFormatter",
        "click._compat"
    ],
    "click.formatting.HelpFormatter": [
        "contextlib.contextmanager"
    ],
    "click.termui": [
        "inspect",
        "gettext",
        "click.types",
        "io",
        "click.exceptions",
        "click.utils",
        "click._termui_impl",
        "typing",
        "os",
        "click._compat",
        "typing.TypeVar.__init__",
        "click.globals"
    ],
    "click._termui_impl": [
        "gettext",
        "contextlib",
        "click._termui_impl.ProgressBar",
        "click.utils",
        "click.exceptions",
        "tty",
        "typing",
        "click._termui_impl.Editor",
        "os",
        "click._compat",
        "contextlib.contextmanager",
        "math",
        "typing.TypeVar.__init__",
        "termios"
    ],
    "click._termui_impl.ProgressBar": [
        "<builtin>.property"
    ],
    "click._termui_impl.Editor": [],
    "tty": [
        "termios"
    ],
    "termios": [],
    "click.core.ParameterSource": [],
    "click.core.Context": [
        "typing.overload",
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "click.core.BaseCommand": [
        "typing.overload"
    ],
    "click.core.Command": [],
    "click.core.MultiCommand": [],
    "click.core.Group": [
        "typing.overload"
    ],
    "click.core.CommandCollection": [],
    "click.core.Parameter": [
        "typing.overload",
        "<builtin>.property"
    ],
    "click.core.Option": [
        "typing.overload"
    ],
    "click.core.Argument": [
        "<builtin>.property"
    ],
    "click.decorators": [
        "inspect",
        "gettext",
        "click.utils",
        "functools",
        "typing",
        "click.core",
        "typing.overload",
        "typing.TypeVar.__init__",
        "types",
        "click.globals"
    ],
    "pygments.util": [
        "io",
        "pygments.util.ClassNotFound",
        "pygments.util.Future",
        "pygments.util.UnclosingTextIOWrapper",
        "pygments.util.OptionError",
        "re",
        "re.compile"
    ],
    "pygments.util.ClassNotFound": [],
    "pygments.util.OptionError": [],
    "pygments.util.Future": [],
    "pygments.util.UnclosingTextIOWrapper": [],
    "rich.console": [
        "rich.pretty",
        "threading",
        "rich.emoji",
        "rich.region",
        "io",
        "rich.console.NewLine",
        "rich.console.ScreenUpdate",
        "rich.errors",
        "rich.segment",
        "rich.live",
        "rich.console.NoChange",
        "rich.pager",
        "typing_extensions",
        "rich.console.ConsoleThreadLocals",
        "rich.console.RenderHook",
        "rich.align",
        "rich._log_render",
        "rich.color",
        "rich.console.CaptureError",
        "inspect",
        "rich.protocol",
        "rich.terminal_theme",
        "rich.measure",
        "rich.status",
        "typing",
        "rich.control",
        "rich.console.ConsoleOptions",
        "rich.styled",
        "rich.markup",
        "rich.screen",
        "rich._export_format",
        "rich.console.Console",
        "rich.scope",
        "rich.console.ThemeContext",
        "rich.text",
        "rich.theme",
        "rich.style",
        "rich._windows",
        "rich.themes",
        "rich.console.Group",
        "dataclasses",
        "rich.highlighter",
        "datetime",
        "rich.console.ConsoleDimensions",
        "abc",
        "rich.console.PagerContext",
        "math",
        "rich._emoji_replace",
        "rich.console.ScreenContext",
        "rich._null_file",
        "rich.console.RichCast",
        "html",
        "zlib",
        "functools",
        "getpass",
        "<map>.items",
        "platform",
        "os",
        "platform.system",
        "rich.console.Capture",
        "rich.console.ConsoleRenderable",
        "types"
    ],
    "platform": [
        "collections",
        "collections.namedtuple",
        "re",
        "re.compile",
        "os"
    ],
    "zlib": [],
    "dataclasses": [
        "inspect",
        "dataclasses.Field",
        "dataclasses._InitVarMeta",
        "dataclasses._HAS_DEFAULT_FACTORY_CLASS",
        "keyword",
        "dataclasses._FIELD_BASE.__init__",
        "functools",
        "dataclasses.InitVar",
        "dataclasses._DataclassParams",
        "re",
        "re.compile",
        "dataclasses.FrozenInstanceError",
        "dataclasses._MISSING_TYPE",
        "dataclasses._FIELD_BASE",
        "copy",
        "types"
    ],
    "copy": [
        "copyreg",
        "copy.Error",
        "weakref",
        "<builtin>.type",
        "<builtin>.getattr",
        "types"
    ],
    "copy.Error": [],
    "dataclasses.FrozenInstanceError": [],
    "dataclasses._HAS_DEFAULT_FACTORY_CLASS": [],
    "dataclasses._MISSING_TYPE": [],
    "dataclasses._FIELD_BASE": [],
    "dataclasses._FIELD_BASE.__init__": [],
    "dataclasses._InitVarMeta": [],
    "dataclasses.InitVar": [],
    "dataclasses.Field": [],
    "dataclasses._DataclassParams": [],
    "getpass": [
        "contextlib",
        "io",
        "termios",
        "os",
        "warnings",
        "getpass.GetPassWarning"
    ],
    "getpass.GetPassWarning": [],
    "html": [
        "re",
        "html.entities",
        "re.compile"
    ],
    "html.entities": [
        "<builtin>.chr",
        "<map>.items"
    ],
    "rich._null_file": [
        "typing",
        "rich._null_file.NullFile",
        "types"
    ],
    "rich._null_file.NullFile": [
        "<builtin>.property"
    ],
    "rich.errors": [
        "rich.errors.ConsoleError",
        "rich.errors.MissingStyle",
        "rich.errors.StyleSyntaxError",
        "rich.errors.NotRenderableError",
        "rich.errors.NoAltScreen",
        "rich.errors.StyleStackError",
        "rich.errors.StyleError",
        "rich.errors.MarkupError",
        "rich.errors.LiveError"
    ],
    "rich.errors.ConsoleError": [],
    "rich.errors.StyleError": [],
    "rich.errors.StyleSyntaxError": [],
    "rich.errors.MissingStyle": [],
    "rich.errors.StyleStackError": [],
    "rich.errors.NotRenderableError": [],
    "rich.errors.MarkupError": [],
    "rich.errors.LiveError": [],
    "rich.errors.NoAltScreen": [],
    "rich.themes": [
        "rich.default_styles",
        "rich.theme",
        "rich.theme.Theme.__init__"
    ],
    "rich.default_styles": [
        "rich.style.Style.__init__",
        "typing",
        "rich.style.Style.null",
        "rich.style"
    ],
    "rich.style": [
        "rich.terminal_theme",
        "rich.errors",
        "rich.style.Style.__init__",
        "functools",
        "random",
        "typing",
        "rich.style.Style",
        "rich.style.StyleStack",
        "rich.style._Bit",
        "rich.repr",
        "rich.color"
    ],
    "random": [
        "_random",
        "_sha512",
        "<builtin>.hasattr",
        "random.Random.__init__",
        "random.Random",
        "hashlib",
        "collections.abc",
        "bisect",
        "os",
        "random.SystemRandom",
        "warnings",
        "math"
    ],
    "bisect": [
        "_bisect"
    ],
    "_bisect": [],
    "_sha512": [],
    "hashlib": [
        "logging.exception",
        "logging",
        "_hashlib",
        "<builtin>.set",
        "<builtin>.globals",
        "<builtin>.bytes",
        "<builtin>.range",
        "hashlib.__get_openssl_constructor",
        "hashlib.__get_builtin_constructor"
    ],
    "_hashlib": [],
    "hashlib.__get_builtin_constructor": [
        "_sha512",
        "<builtin>.ValueError",
        "_sha1",
        "_md5",
        "_blake2",
        "_sha3",
        "_sha256",
        "<map>.get"
    ],
    "_sha3": [],
    "_blake2": [],
    "_sha256": [],
    "_md5": [],
    "_sha1": [],
    "hashlib.__get_openssl_constructor": [
        "hashlib.__get_builtin_constructor",
        "<builtin>.getattr"
    ],
    "logging": [
        "threading",
        "io",
        "_weakrefset.WeakSet.__init__",
        "logging.LogRecord",
        "logging.PercentStyle",
        "logging._StderrHandler",
        "logging.BufferingFormatter",
        "<builtin>.hasattr",
        "posixpath.normcase",
        "logging.RootLogger.__init__",
        "logging.Formatter",
        "logging._StderrHandler.__init__",
        "logging.Filter",
        "weakref",
        "logging.StreamHandler",
        "re",
        "collections.abc",
        "threading.RLock",
        "weakref.WeakValueDictionary.__init__",
        "logging.Formatter.__init__",
        "logging.FileHandler",
        "logging.StrFormatStyle",
        "warnings",
        "ntpath.normcase",
        "traceback",
        "logging.Logger",
        "logging.Filterer",
        "logging.Manager.__init__",
        "logging.StringTemplateStyle",
        "logging.RootLogger",
        "logging.NullHandler",
        "logging.PlaceHolder",
        "logging.Manager",
        "os",
        "logging.LoggerAdapter",
        "string",
        "logging.Handler"
    ],
    "string": [
        "string.Template",
        "collections",
        "re",
        "string.Formatter",
        "string._TemplateMetaclass"
    ],
    "string._TemplateMetaclass": [],
    "string.Template": [],
    "string.Formatter": [],
    "posixpath.normcase": [
        "os._fspath"
    ],
    "ntpath.normcase": [
        "<str>.replace",
        "os._fspath",
        "<str>.lower",
        "<builtin>.isinstance"
    ],
    "logging.LogRecord": [],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.StringTemplateStyle": [],
    "logging.Formatter": [],
    "logging.Formatter.__init__": [
        "<builtin>.ValueError",
        "<map>.keys"
    ],
    "<map>.keys": [],
    "logging.BufferingFormatter": [],
    "logging.Filter": [],
    "logging.Filterer": [],
    "weakref.WeakValueDictionary.__init__": [
        "weakref.WeakValueDictionary.update",
        "_weakref.ref",
        "<builtin>.set"
    ],
    "weakref.WeakValueDictionary.update": [
        "weakref.KeyedRef.__init__",
        "<builtin>.hasattr",
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.dict"
    ],
    "weakref.WeakValueDictionary._commit_removals": [
        "_weakref._remove_dead_weakref"
    ],
    "_weakref._remove_dead_weakref": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging.StreamHandler": [],
    "logging.FileHandler": [],
    "logging._StderrHandler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.Handler.__init__": [
        "logging._checkLevel",
        "logging._addHandlerRef",
        "logging.Filterer.__init__",
        "logging.Handler.createLock"
    ],
    "logging.Filterer.__init__": [],
    "logging._checkLevel": [
        "<builtin>.ValueError",
        "<builtin>.str",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "logging._addHandlerRef": [
        "<list>.append",
        "logging._acquireLock"
    ],
    "logging._acquireLock": [
        "threading._RLock.acquire"
    ],
    "threading._RLock.acquire": [
        "_thread.get_ident"
    ],
    "logging.Handler.createLock": [
        "logging._register_at_fork_reinit_lock",
        "threading.RLock"
    ],
    "logging._register_at_fork_reinit_lock": [
        "_weakrefset.WeakSet.add",
        "logging._acquireLock"
    ],
    "logging.PlaceHolder": [],
    "logging.Manager": [],
    "logging.Logger": [],
    "logging.RootLogger": [],
    "logging.LoggerAdapter": [
        "<builtin>.property"
    ],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.Logger.__init__": [
        "logging._checkLevel",
        "logging.Filterer.__init__"
    ],
    "logging.Manager.__init__": [],
    "logging.NullHandler": [],
    "logging.exception": [
        "logging.error"
    ],
    "logging.error": [
        "logging.basicConfig",
        "logging.Logger.error",
        "<builtin>.len"
    ],
    "logging.basicConfig": [
        "logging.FileHandler.__init__",
        "<builtin>.ValueError",
        "<map>.keys",
        "logging.Handler.setFormatter",
        "logging.Formatter.__init__",
        "<builtin>.len",
        "logging.StreamHandler.__init__",
        "logging.Logger.setLevel",
        "logging.Logger.addHandler",
        "logging.Logger.removeHandler",
        "logging._acquireLock"
    ],
    "logging.Logger.removeHandler": [
        "<list>.remove",
        "logging._acquireLock"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.FileHandler.__init__": [
        "posixpath.abspath",
        "logging.FileHandler._open",
        "ntpath.abspath",
        "os._fspath",
        "logging.StreamHandler.__init__",
        "logging.Handler.__init__"
    ],
    "posixpath.abspath": [
        "posixpath.normpath",
        "<builtin>.isinstance",
        "os._fspath",
        "posixpath.join",
        "posixpath.isabs"
    ],
    "posixpath.isabs": [
        "os._fspath",
        "posixpath._get_sep",
        "<str>.startswith"
    ],
    "posixpath.normpath": [
        "<builtin>.isinstance",
        "<str>.startswith",
        "<list>.append",
        "os._fspath",
        "<str>.split",
        "<list>.pop"
    ],
    "<list>.pop": [],
    "ntpath.abspath": [],
    "logging.FileHandler._open": [
        "<builtin>.open"
    ],
    "<builtin>.open": [],
    "logging.Handler.setFormatter": [],
    "logging.Logger.addHandler": [
        "<list>.append",
        "logging._acquireLock"
    ],
    "logging.Logger.setLevel": [
        "logging._checkLevel"
    ],
    "logging.Logger.error": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "logging.Logger.isEnabledFor": [
        "logging.Logger.getEffectiveLevel",
        "logging._acquireLock"
    ],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger._log": [
        "<builtin>.isinstance",
        "logging.Logger.handle",
        "<builtin>.type",
        "logging.Logger.findCaller",
        "logging.Logger.makeRecord"
    ],
    "logging.Logger.findCaller": [
        "logging.currentframe",
        "posixpath.normcase",
        "<builtin>.hasattr",
        "traceback.print_stack",
        "ntpath.normcase",
        "_io.StringIO"
    ],
    "logging.currentframe": [],
    "_io.StringIO": [],
    "traceback.print_stack": [
        "traceback.print_list",
        "traceback.extract_stack"
    ],
    "traceback.extract_stack": [
        "traceback.walk_stack",
        "traceback.StackSummary.extract"
    ],
    "traceback.walk_stack": [],
    "traceback.StackSummary.extract": [
        "linecache.lazycache",
        "<builtin>.set",
        "linecache.checkcache",
        "_collections.deque",
        "traceback.FrameSummary.__init__",
        "<builtin>.getattr"
    ],
    "linecache.lazycache": [
        "<str>.startswith",
        "<str>.endswith",
        "<builtin>.getattr",
        "<builtin>.len"
    ],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "linecache.checkcache": [
        "<builtin>.len",
        "<builtin>.list",
        "<map>.keys"
    ],
    "traceback.print_list": [
        "traceback.StackSummary.from_list",
        "traceback.StackSummary.format",
        "<builtin>.print"
    ],
    "traceback.StackSummary.from_list": [
        "traceback.FrameSummary.__init__",
        "<builtin>.isinstance"
    ],
    "traceback.StackSummary.format": [
        "<list>.append",
        "<builtin>.sorted"
    ],
    "logging.Logger.makeRecord": [
        "logging.LogRecord.__init__",
        "<builtin>.KeyError"
    ],
    "logging.LogRecord.__init__": [
        "<builtin>.int",
        "posixpath.basename",
        "<builtin>.isinstance",
        "ntpath.splitext",
        "threading.current_thread",
        "<builtin>.hasattr",
        "<builtin>.len",
        "_thread.get_ident",
        "ntpath.basename",
        "logging.getLevelName",
        "posixpath.splitext"
    ],
    "logging.getLevelName": [
        "<map>.get"
    ],
    "posixpath.basename": [
        "os._fspath",
        "posixpath._get_sep",
        "<str>.rfind"
    ],
    "<str>.rfind": [],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "ntpath.split": [
        "os._fspath",
        "ntpath._get_bothseps",
        "ntpath.splitdrive",
        "<builtin>.len"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "<str>.find": [],
    "posixpath.splitext": [
        "os._fspath",
        "genericpath._splitext",
        "<builtin>.isinstance"
    ],
    "genericpath._splitext": [
        "<builtin>.max",
        "<str>.rfind"
    ],
    "ntpath.splitext": [
        "os._fspath",
        "genericpath._splitext",
        "<builtin>.isinstance"
    ],
    "<builtin>.KeyError": [],
    "logging.Logger.handle": [
        "logging.Filterer.filter",
        "logging.Logger.callHandlers"
    ],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging.Logger.callHandlers": [
        "logging.Handler.handle"
    ],
    "logging.Handler.handle": [
        "logging.FileHandler.emit",
        "logging.StreamHandler.emit",
        "logging.Handler.emit",
        "logging.Filterer.filter",
        "logging.Handler.acquire"
    ],
    "logging.Handler.acquire": [
        "threading._RLock.acquire"
    ],
    "logging.StreamHandler.emit": [
        "logging.StreamHandler.flush",
        "logging.Handler.format",
        "logging.Handler.handleError"
    ],
    "logging.Handler.format": [
        "logging.Formatter.format"
    ],
    "logging.Formatter.format": [
        "logging.Formatter.formatMessage",
        "logging.LogRecord.getMessage",
        "logging.Formatter.usesTime",
        "logging.Formatter.formatTime",
        "logging.Formatter.formatStack",
        "logging.Formatter.formatException"
    ],
    "logging.LogRecord.getMessage": [
        "<builtin>.str"
    ],
    "logging.Formatter.usesTime": [],
    "logging.Formatter.formatTime": [],
    "logging.Formatter.formatMessage": [],
    "logging.Formatter.formatException": [
        "traceback.print_exception",
        "_io.StringIO"
    ],
    "traceback.print_exception": [
        "traceback.TracebackException.format",
        "<builtin>.type",
        "traceback.TracebackException.__init__",
        "<builtin>.print"
    ],
    "traceback.TracebackException.__init__": [
        "traceback.TracebackException._load_lines",
        "<builtin>.type",
        "<builtin>.set",
        "traceback.StackSummary.extract",
        "traceback.TracebackException.__init__",
        "traceback.walk_tb",
        "<builtin>.id",
        "<builtin>.issubclass",
        "<builtin>.str",
        "traceback._some_str"
    ],
    "<builtin>.id": [],
    "traceback.walk_tb": [],
    "traceback._some_str": [
        "<builtin>.type",
        "<builtin>.str"
    ],
    "traceback.TracebackException._load_lines": [],
    "traceback.TracebackException.format": [
        "traceback.TracebackException.format",
        "traceback.StackSummary.format",
        "traceback.TracebackException.format_exception_only"
    ],
    "traceback.TracebackException.format_exception_only": [
        "traceback._format_final_exc_line",
        "<builtin>.len",
        "<builtin>.issubclass",
        "<builtin>.min",
        "<builtin>.str"
    ],
    "traceback._format_final_exc_line": [
        "traceback._some_str"
    ],
    "logging.Formatter.formatStack": [],
    "logging.StreamHandler.flush": [
        "logging.StreamHandler.flush",
        "logging.Handler.acquire",
        "<builtin>.hasattr"
    ],
    "logging.Handler.handleError": [
        "posixpath.dirname",
        "traceback.print_stack",
        "ntpath.dirname",
        "traceback.print_exception"
    ],
    "posixpath.dirname": [
        "os._fspath",
        "posixpath._get_sep",
        "<str>.rfind",
        "<builtin>.len"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "logging.FileHandler.emit": [
        "logging.FileHandler._open",
        "logging.StreamHandler.emit"
    ],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "<builtin>.NotImplementedError": [],
    "_random": [],
    "random.Random": [],
    "random.SystemRandom": [],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "random.Random.seed": [
        "<builtin>.map",
        "<builtin>.super",
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.ord"
    ],
    "rich.color": [
        "colorsys",
        "rich.terminal_theme",
        "rich.text",
        "rich.color.ColorParseError",
        "rich.color.ColorType",
        "functools",
        "enum",
        "typing",
        "rich.color.ColorSystem",
        "re",
        "re.compile",
        "platform",
        "rich.color_triplet",
        "rich.color.Color",
        "rich.repr",
        "platform.system",
        "rich._palettes"
    ],
    "colorsys": [],
    "rich._palettes": [
        "rich.palette",
        "rich.palette.Palette.__init__"
    ],
    "rich.palette": [
        "rich.table",
        "functools",
        "typing",
        "rich.palette.Palette",
        "rich.color_triplet",
        "math"
    ],
    "rich.color_triplet": [
        "typing",
        "rich.color_triplet.ColorTriplet"
    ],
    "rich.color_triplet.ColorTriplet": [
        "<builtin>.property"
    ],
    "rich.table": [
        "rich.table.Row",
        "rich.errors",
        "rich.segment",
        "rich._loop",
        "rich._pick",
        "rich.table.Table",
        "rich.align",
        "rich.protocol",
        "rich.measure",
        "rich.table._Cell",
        "typing",
        "rich.padding",
        "rich.text",
        "rich.console",
        "rich.style",
        "rich.table.Column",
        "rich._ratio",
        "dataclasses",
        "rich.jupyter",
        "rich.box"
    ],
    "rich.box": [
        "rich.console",
        "rich.box.Box",
        "typing",
        "rich._loop",
        "typing_extensions",
        "rich.box.Box.__init__"
    ],
    "rich._loop": [
        "typing",
        "typing.TypeVar.__init__"
    ],
    "rich.box.Box": [],
    "rich.box.Box.__init__": [
        "<str>.splitlines",
        "<builtin>.iter"
    ],
    "<str>.splitlines": [],
    "rich._pick": [
        "typing"
    ],
    "rich._ratio": [
        "fractions",
        "typing",
        "typing_extensions",
        "math",
        "rich._ratio.Edge"
    ],
    "fractions": [
        "fractions.Fraction",
        "operator",
        "re",
        "re.compile",
        "decimal",
        "numbers",
        "math"
    ],
    "decimal": [
        "_decimal",
        "_pydecimal"
    ],
    "_decimal": [],
    "_pydecimal": [
        "contextvars",
        "<builtin>.pow",
        "_pydecimal.DivisionUndefined",
        "collections.namedtuple",
        "re.compile",
        "_pydecimal.Context.__init__",
        "_pydecimal.DivisionByZero",
        "_pydecimal.Clamped",
        "_pydecimal._Log10Memoize.__init__",
        "_pydecimal.InvalidOperation",
        "re",
        "_pydecimal.Decimal",
        "_pydecimal._ContextManager",
        "_pydecimal._WorkRep",
        "locale",
        "_pydecimal.FloatOperation",
        "_pydecimal.Underflow",
        "_pydecimal._Log10Memoize",
        "math",
        "_pydecimal.Rounded",
        "_pydecimal.Subnormal",
        "_pydecimal.ConversionSyntax",
        "_pydecimal.InvalidContext",
        "_pydecimal.Overflow",
        "_pydecimal.Context",
        "_pydecimal.Inexact",
        "collections",
        "_pydecimal.DivisionImpossible",
        "numbers",
        "_pydecimal.DecimalException"
    ],
    "numbers": [
        "numbers.Real",
        "numbers.Complex",
        "numbers.Integral",
        "numbers.Rational",
        "numbers.Number",
        "abc"
    ],
    "numbers.Number": [],
    "numbers.Complex": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Real": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Rational": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Integral": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "_pydecimal.DecimalException": [],
    "_pydecimal.Clamped": [],
    "_pydecimal.InvalidOperation": [],
    "_pydecimal.ConversionSyntax": [],
    "_pydecimal.DivisionByZero": [],
    "_pydecimal.DivisionImpossible": [],
    "_pydecimal.DivisionUndefined": [],
    "_pydecimal.Inexact": [],
    "_pydecimal.InvalidContext": [],
    "_pydecimal.Rounded": [],
    "_pydecimal.Subnormal": [],
    "_pydecimal.Overflow": [],
    "_pydecimal.Underflow": [],
    "_pydecimal.FloatOperation": [],
    "contextvars": [
        "_contextvars"
    ],
    "_contextvars": [],
    "_pydecimal.Decimal": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.dict"
    ],
    "_pydecimal._ContextManager": [],
    "_pydecimal.Context": [],
    "_pydecimal._WorkRep": [],
    "_pydecimal._Log10Memoize": [],
    "_pydecimal._Log10Memoize.__init__": [],
    "_pydecimal.Context.__init__": [
        "<builtin>.int",
        "<builtin>.dict",
        "<builtin>.isinstance"
    ],
    "<builtin>.pow": [],
    "fractions.Fraction": [
        "<builtin>.property",
        "fractions.Fraction._operator_fallbacks",
        "<builtin>.classmethod"
    ],
    "fractions.Fraction._operator_fallbacks": [],
    "rich._ratio.Edge": [],
    "rich.align": [
        "rich.constrain",
        "rich.console",
        "rich.measure",
        "rich.style",
        "rich.segment",
        "typing",
        "rich.jupyter",
        "rich.align.Align",
        "typing_extensions",
        "rich.align.VerticalCenter"
    ],
    "rich.constrain": [
        "rich.console",
        "rich.measure",
        "typing",
        "rich.jupyter",
        "rich.constrain.Constrain"
    ],
    "rich.jupyter": [
        "rich.terminal_theme",
        "rich.console",
        "rich.jupyter.JupyterRenderable",
        "rich.segment",
        "typing",
        "rich.jupyter.JupyterMixin"
    ],
    "rich.segment": [
        "rich.segment.SegmentLines",
        "rich.console",
        "logging",
        "rich.style",
        "functools",
        "enum",
        "typing",
        "operator",
        "logging.getLogger",
        "rich.segment.ControlType",
        "rich.segment.Segments",
        "rich.repr",
        "rich.segment.Segment",
        "rich.cells"
    ],
    "rich.cells": [
        "rich._cell_widths",
        "functools.lru_cache.decorating_function",
        "functools",
        "typing",
        "functools._lru_cache_wrapper.wrapper",
        "re",
        "re.compile",
        "functools.lru_cache"
    ],
    "rich._cell_widths": [],
    "rich.repr": [
        "inspect",
        "functools",
        "typing",
        "typing.overload",
        "rich.repr.ReprError",
        "typing.TypeVar.__init__"
    ],
    "rich.repr.ReprError": [],
    "logging.getLogger": [],
    "rich.segment.ControlType": [],
    "rich.segment.Segment": [
        "functools.lru_cache.decorating_function",
        "<builtin>.classmethod",
        "functools._lru_cache_wrapper.wrapper",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "rich.segment.Segments": [],
    "rich.segment.SegmentLines": [],
    "rich.terminal_theme": [
        "rich.palette",
        "typing",
        "rich.terminal_theme.TerminalTheme.__init__",
        "rich.terminal_theme.TerminalTheme",
        "rich.color_triplet"
    ],
    "rich.terminal_theme.TerminalTheme": [],
    "rich.terminal_theme.TerminalTheme.__init__": [
        "rich.palette.Palette.__init__"
    ],
    "rich.palette.Palette.__init__": [],
    "rich.jupyter.JupyterRenderable": [],
    "rich.jupyter.JupyterMixin": [],
    "rich.measure": [
        "rich.protocol",
        "rich.console",
        "rich.errors",
        "typing",
        "operator",
        "rich.measure.Measurement"
    ],
    "rich.protocol": [
        "inspect",
        "rich.console",
        "typing"
    ],
    "rich.measure.Measurement": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "rich.constrain.Constrain": [],
    "rich.align.Align": [
        "<builtin>.classmethod"
    ],
    "rich.align.VerticalCenter": [],
    "rich.padding": [
        "rich.console",
        "rich.measure",
        "rich.style",
        "rich.segment",
        "typing",
        "rich.jupyter",
        "rich.padding.Padding"
    ],
    "rich.padding.Padding": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "rich.text": [
        "rich.emoji",
        "rich.segment",
        "rich._loop",
        "rich._pick",
        "re.compile",
        "rich.align",
        "rich.text.Span",
        "rich.measure",
        "typing",
        "rich.control",
        "re",
        "rich.containers",
        "rich.console",
        "rich._wrap",
        "rich.style",
        "math",
        "rich.cells",
        "functools",
        "rich.text.Text",
        "operator",
        "rich.jupyter"
    ],
    "rich._wrap": [
        "typing",
        "rich._loop",
        "re",
        "re.compile",
        "rich.cells"
    ],
    "rich.containers": [
        "rich.text",
        "rich.containers.Lines",
        "rich.console",
        "rich.measure",
        "rich.containers.Renderables",
        "typing",
        "typing.TypeVar.__init__",
        "rich.cells"
    ],
    "rich.containers.Renderables": [],
    "rich.containers.Lines": [
        "typing.overload"
    ],
    "rich.control": [
        "rich.console",
        "rich.control.Control",
        "rich.segment",
        "typing",
        "typing_extensions"
    ],
    "rich.control.Control": [
        "<builtin>.classmethod"
    ],
    "rich.emoji": [
        "rich._emoji_codes",
        "rich.console",
        "rich.style",
        "rich.segment",
        "typing",
        "rich.emoji.NoEmoji",
        "rich.emoji.Emoji",
        "rich.jupyter",
        "typing_extensions",
        "rich._emoji_replace"
    ],
    "rich._emoji_codes": [],
    "rich._emoji_replace": [
        "rich._emoji_codes",
        "re",
        "typing",
        "re.compile"
    ],
    "rich.emoji.NoEmoji": [],
    "rich.emoji.Emoji": [
        "<builtin>.classmethod"
    ],
    "rich.text.Span": [],
    "rich.text.Text": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "rich.table.Column": [
        "dataclasses.field",
        "<builtin>.property"
    ],
    "dataclasses.field": [
        "<builtin>.ValueError",
        "dataclasses.Field.__init__"
    ],
    "dataclasses.Field.__init__": [],
    "rich.table.Row": [],
    "rich.table._Cell": [],
    "rich.table.Table": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "rich.palette.Palette": [
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "platform.system": [
        "platform.uname"
    ],
    "platform.uname": [
        "platform.win32_ver",
        "platform._syscmd_ver",
        "platform.java_ver",
        "<builtin>.filter",
        "platform._syscmd_uname",
        "<builtin>.list",
        "platform._node"
    ],
    "<builtin>.filter": [],
    "platform._node": [
        "socket"
    ],
    "socket": [
        "io",
        "_socket",
        "selectors",
        "enum",
        "<builtin>.hasattr",
        "socket.socket",
        "<list>.append",
        "<builtin>.object",
        "os",
        "socket._GiveupOnSendfile",
        "socket.SocketIO",
        "<list>.extend",
        "<builtin>.getattr"
    ],
    "_socket": [],
    "selectors": [
        "selectors._BaseSelectorImpl",
        "selectors._PollLikeSelector",
        "select",
        "selectors.PollSelector",
        "collections",
        "collections.namedtuple",
        "<builtin>.hasattr",
        "selectors.DevpollSelector",
        "<builtin>.globals",
        "selectors._SelectorMapping",
        "selectors.EpollSelector",
        "collections.abc",
        "abc",
        "selectors.KqueueSelector",
        "selectors.BaseSelector",
        "math",
        "selectors.SelectSelector"
    ],
    "select": [],
    "selectors._SelectorMapping": [],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors._BaseSelectorImpl": [],
    "selectors.SelectSelector": [],
    "selectors._PollLikeSelector": [],
    "selectors.PollSelector": [],
    "selectors.EpollSelector": [],
    "selectors.DevpollSelector": [],
    "selectors.KqueueSelector": [],
    "socket._GiveupOnSendfile": [],
    "socket.socket": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "socket.SocketIO": [
        "<builtin>.property"
    ],
    "platform.win32_ver": [
        "<map>.get",
        "<builtin>.getattr",
        "sys.getwindowsversion"
    ],
    "sys.getwindowsversion": [],
    "platform._syscmd_ver": [
        "subprocess",
        "subprocess.check_output",
        "platform._norm_version"
    ],
    "subprocess": [
        "threading",
        "subprocess._use_posix_spawn",
        "io",
        "<builtin>.hasattr",
        "subprocess.SubprocessError",
        "contextlib",
        "signal",
        "selectors",
        "select",
        "subprocess.STARTUPINFO",
        "subprocess.TimeoutExpired",
        "_posixsubprocess",
        "warnings",
        "subprocess.Popen",
        "subprocess.Handle",
        "subprocess.CompletedProcess",
        "os",
        "<builtin>.getattr",
        "subprocess.CalledProcessError"
    ],
    "signal": [
        "<builtin>.globals",
        "functools",
        "enum",
        "functools.wraps"
    ],
    "_posixsubprocess": [],
    "subprocess.SubprocessError": [],
    "subprocess.CalledProcessError": [
        "<builtin>.property"
    ],
    "subprocess.TimeoutExpired": [
        "<builtin>.property"
    ],
    "subprocess.STARTUPINFO": [],
    "subprocess.Handle": [],
    "subprocess.CompletedProcess": [],
    "subprocess._use_posix_spawn": [
        "<builtin>.map",
        "<builtin>.hasattr",
        "<builtin>.tuple",
        "<builtin>.len"
    ],
    "subprocess.Popen": [
        "<builtin>.property"
    ],
    "subprocess.check_output": [
        "<builtin>.ValueError",
        "subprocess.run"
    ],
    "subprocess.run": [
        "subprocess.Popen.kill",
        "<builtin>.ValueError",
        "subprocess.Popen.wait",
        "subprocess.Popen.poll",
        "subprocess.CalledProcessError.__init__",
        "subprocess.Popen.communicate",
        "subprocess.CompletedProcess.__init__",
        "subprocess.Popen.__init__"
    ],
    "subprocess.Popen.__init__": [
        "warnings.warn",
        "subprocess.Popen._execute_child",
        "_io.open",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.bool",
        "_io.TextIOWrapper",
        "<builtin>.hasattr",
        "<builtin>.TypeError",
        "<list>.append",
        "subprocess._cleanup",
        "<builtin>.filter",
        "subprocess.Popen._get_handles"
    ],
    "subprocess._cleanup": [
        "<list>.remove"
    ],
    "warnings.warn": [
        "warnings.warn_explicit",
        "<builtin>.isinstance",
        "<builtin>.type",
        "warnings._is_internal_frame",
        "<builtin>.TypeError",
        "<builtin>.range",
        "<builtin>.issubclass",
        "warnings._next_external_frame"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings.warn_explicit": [
        "<builtin>.RuntimeError",
        "<builtin>.int",
        "<map>.clear",
        "<builtin>.isinstance",
        "warnings.WarningMessage.__init__",
        "linecache",
        "warnings._showwarnmsg",
        "linecache.getlines",
        "<map>.get",
        "<builtin>.str",
        "<builtin>.issubclass"
    ],
    "linecache.getlines": [
        "linecache.clearcache",
        "linecache.updatecache",
        "<builtin>.len"
    ],
    "linecache.updatecache": [
        "<str>.endswith",
        "ntpath.join",
        "tokenize.open",
        "<str>.startswith",
        "linecache.lazycache",
        "ntpath.isabs",
        "<builtin>.len",
        "posixpath.join",
        "posixpath.isabs"
    ],
    "<str>.startswith": [],
    "<str>.endswith": [],
    "ntpath.isabs": [
        "<builtin>.isinstance",
        "<str>.startswith",
        "<builtin>.len",
        "<str>.replace",
        "os._fspath",
        "ntpath._get_bothseps",
        "ntpath.splitdrive"
    ],
    "tokenize.open": [
        "tokenize.detect_encoding",
        "builtins.open",
        "_io.TextIOWrapper"
    ],
    "builtins.open": [],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.find_cookie",
        "tokenize.detect_encoding.read_or_stop"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "<builtin>.SyntaxError",
        "tokenize._get_normal_name"
    ],
    "tokenize._get_normal_name": [],
    "_io.TextIOWrapper": [],
    "linecache.clearcache": [],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "tracemalloc",
        "<str>.strip",
        "linecache",
        "linecache.getline"
    ],
    "linecache.getline": [
        "linecache.getlines",
        "<builtin>.len"
    ],
    "tracemalloc": [
        "tracemalloc.DomainFilter",
        "pickle",
        "tracemalloc.BaseFilter",
        "tracemalloc.Snapshot",
        "functools",
        "tracemalloc.Statistic",
        "tracemalloc.Frame",
        "linecache",
        "tracemalloc.Traceback",
        "tracemalloc.Trace",
        "posixpath",
        "tracemalloc._Traces",
        "collections.abc",
        "tracemalloc.Filter",
        "fnmatch",
        "tracemalloc.StatisticDiff"
    ],
    "fnmatch": [
        "functools.lru_cache.decorating_function",
        "functools",
        "posixpath",
        "re",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache",
        "os"
    ],
    "pickle": [
        "io",
        "pickle._Stop",
        "pickle.UnpicklingError",
        "pickle._Unpickler",
        "pickle.PicklingError",
        "re",
        "_pickle",
        "copyreg",
        "types",
        "pickle._Unframer",
        "<list>.append",
        "struct",
        "<list>.extend",
        "pickle._Framer",
        "functools",
        "_compat_pickle",
        "codecs",
        "pickle._Pickler",
        "pickle.PickleError"
    ],
    "_compat_pickle": [
        "<map>.update",
        "<map>.items",
        "<builtin>.dict",
        "<builtin>.len"
    ],
    "<map>.update": [],
    "_pickle": [],
    "pickle.PickleError": [],
    "pickle.PicklingError": [],
    "pickle.UnpicklingError": [],
    "pickle._Stop": [],
    "pickle._Framer": [],
    "pickle._Unframer": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "pickle._Unpickler": [],
    "tracemalloc.Statistic": [],
    "tracemalloc.StatisticDiff": [],
    "tracemalloc.Frame": [
        "<builtin>.property"
    ],
    "tracemalloc.Traceback": [],
    "tracemalloc.Trace": [
        "<builtin>.property"
    ],
    "tracemalloc._Traces": [],
    "tracemalloc.BaseFilter": [],
    "tracemalloc.Filter": [
        "<builtin>.property"
    ],
    "tracemalloc.DomainFilter": [
        "<builtin>.property"
    ],
    "tracemalloc.Snapshot": [
        "<builtin>.staticmethod"
    ],
    "subprocess.Popen._get_handles": [
        "subprocess.Popen._get_devnull",
        "<builtin>.isinstance"
    ],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "_io.open": [],
    "subprocess.Popen._execute_child": [
        "os._fscodec.fsdecode",
        "<builtin>.hasattr",
        "<builtin>.bytes",
        "<builtin>.len",
        "<builtin>.sorted",
        "<builtin>.list",
        "os.get_exec_path",
        "ntpath.join",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "posixpath.dirname",
        "posixpath.join",
        "<builtin>.int",
        "os._fscodec.fsencode",
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "<builtin>.set",
        "<list>.append",
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.map",
        "<builtin>.bytearray",
        "subprocess.Popen._posix_spawn",
        "subprocess.Popen._handle_exitstatus",
        "ntpath.dirname",
        "<builtin>.issubclass",
        "<builtin>.getattr"
    ],
    "subprocess.Popen._posix_spawn": [
        "<list>.append",
        "<builtin>.getattr",
        "subprocess.Popen._close_pipe_fds"
    ],
    "subprocess.Popen._close_pipe_fds": [
        "contextlib._BaseExitStack.callback",
        "<builtin>.getattr"
    ],
    "contextlib._BaseExitStack.callback": [
        "warnings.warn",
        "contextlib._BaseExitStack._create_cb_wrapper",
        "<builtin>.TypeError",
        "<builtin>.len",
        "contextlib._BaseExitStack._push_exit_callback",
        "warnings"
    ],
    "contextlib._BaseExitStack._create_cb_wrapper": [],
    "contextlib._BaseExitStack._push_exit_callback": [],
    "os._fscodec.fsdecode": [
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "os._fscodec.fsencode": [
        "os._fspath",
        "<str>.encode",
        "<builtin>.isinstance"
    ],
    "<str>.encode": [],
    "<str>.lower": [],
    "os.get_exec_path": [
        "warnings.catch_warnings.__init__",
        "warnings",
        "<str>.split"
    ],
    "warnings.catch_warnings.__init__": [],
    "subprocess.Popen._handle_exitstatus": [],
    "subprocess.Popen.communicate": [
        "subprocess.Popen._stdin_write",
        "<builtin>.ValueError",
        "time.monotonic",
        "subprocess.Popen.wait",
        "subprocess.Popen._communicate",
        "<builtin>.min",
        "<list>.count",
        "subprocess.Popen._wait",
        "subprocess.Popen._remaining_time"
    ],
    "<list>.count": [],
    "time.monotonic": [],
    "subprocess.Popen._communicate": [
        "<builtin>.RuntimeError",
        "selectors.SelectSelector.register",
        "selectors.SelectSelector.select",
        "subprocess.Popen._translate_newlines",
        "selectors.SelectSelector.__init__",
        "selectors.SelectSelector.unregister",
        "subprocess.Popen._check_timeout",
        "subprocess.Popen.wait",
        "subprocess.Popen._remaining_time",
        "selectors._BaseSelectorImpl.get_map",
        "selectors._PollLikeSelector.select",
        "selectors._PollLikeSelector.unregister",
        "<builtin>.memoryview",
        "subprocess.Popen._save_input",
        "selectors._PollLikeSelector.register"
    ],
    "subprocess.Popen._save_input": [],
    "selectors.SelectSelector.__init__": [
        "<builtin>.set",
        "<builtin>.super"
    ],
    "selectors._PollLikeSelector.register": [
        "<builtin>.super"
    ],
    "selectors.SelectSelector.register": [
        "<builtin>.super"
    ],
    "selectors._BaseSelectorImpl.get_map": [],
    "subprocess.Popen._remaining_time": [
        "time.monotonic"
    ],
    "subprocess.Popen._check_timeout": [
        "subprocess.TimeoutExpired.__init__",
        "time.monotonic"
    ],
    "subprocess.TimeoutExpired.__init__": [],
    "selectors._PollLikeSelector.select": [
        "selectors._BaseSelectorImpl._key_from_fd",
        "<list>.append"
    ],
    "selectors._BaseSelectorImpl._key_from_fd": [],
    "selectors.SelectSelector.select": [
        "selectors.SelectSelector._select",
        "selectors._BaseSelectorImpl._key_from_fd",
        "<builtin>.set",
        "<list>.append",
        "<builtin>.max"
    ],
    "selectors.SelectSelector._select": [],
    "selectors._PollLikeSelector.unregister": [
        "<builtin>.super"
    ],
    "selectors.SelectSelector.unregister": [
        "<builtin>.super"
    ],
    "subprocess.Popen.wait": [
        "subprocess.Popen._wait",
        "subprocess.Popen._remaining_time",
        "time.monotonic",
        "<builtin>.min"
    ],
    "subprocess.Popen._wait": [
        "subprocess.Popen._try_wait",
        "subprocess.TimeoutExpired.__init__",
        "time.monotonic",
        "subprocess.Popen._handle_exitstatus",
        "<builtin>.min",
        "subprocess.Popen._remaining_time"
    ],
    "subprocess.Popen._try_wait": [],
    "subprocess.Popen._translate_newlines": [],
    "subprocess.Popen._stdin_write": [],
    "subprocess.Popen.kill": [
        "subprocess.Popen.send_signal"
    ],
    "subprocess.Popen.send_signal": [],
    "subprocess.Popen.poll": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen._internal_poll": [
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.CalledProcessError.__init__": [],
    "subprocess.CompletedProcess.__init__": [],
    "platform._norm_version": [
        "<builtin>.map",
        "<str>.split"
    ],
    "platform.java_ver": [
        "platform._java_getprop"
    ],
    "platform._java_getprop": [],
    "platform._syscmd_uname": [
        "subprocess",
        "subprocess.check_output"
    ],
    "rich.color.ColorSystem": [],
    "rich.color.ColorType": [],
    "rich.color.ColorParseError": [],
    "rich.color.Color": [
        "functools.lru_cache.decorating_function",
        "<builtin>.classmethod",
        "functools._lru_cache_wrapper.wrapper",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "rich.style._Bit": [],
    "rich.style.Style": [
        "functools.lru_cache.decorating_function",
        "<builtin>.classmethod",
        "functools._lru_cache_wrapper.wrapper",
        "<builtin>.property",
        "rich.style._Bit.__init__",
        "functools.lru_cache"
    ],
    "rich.style._Bit.__init__": [],
    "rich.style.Style.__init__": [
        "<builtin>.hash",
        "rich.style.Style.__init__._make_color",
        "<builtin>.sum",
        "random.Random.randint",
        "marshal.dumps"
    ],
    "rich.style.Style.__init__._make_color": [
        "rich.color.Color.parse",
        "<builtin>.isinstance"
    ],
    "rich.color.Color.parse": [
        "<builtin>.int",
        "<str>.strip",
        "<str>.lower",
        "<builtin>.len",
        "<map>.get",
        "<builtin>.all"
    ],
    "<builtin>.all": [],
    "<builtin>.sum": [],
    "marshal.dumps": [],
    "random.Random.randint": [
        "random.Random.randrange"
    ],
    "random.Random.randrange": [
        "<builtin>.ValueError",
        "random.Random._randbelow_with_getrandbits"
    ],
    "random.Random._randbelow_with_getrandbits": [],
    "rich.style.StyleStack": [
        "<builtin>.property"
    ],
    "rich.style.Style.null": [],
    "rich.theme": [
        "rich.style",
        "rich.theme.ThemeStack",
        "typing",
        "rich.theme.Theme",
        "rich.theme.ThemeStackError",
        "rich.default_styles",
        "configparser"
    ],
    "configparser": [
        "io",
        "configparser.SafeConfigParser",
        "configparser.NoOptionError",
        "configparser.Error",
        "configparser.MissingSectionHeaderError",
        "configparser.ConfigParser",
        "configparser.RawConfigParser",
        "configparser.Interpolation",
        "<builtin>.object",
        "configparser.ConverterMapping",
        "re",
        "configparser.DuplicateOptionError",
        "collections.abc",
        "configparser.ParsingError",
        "configparser.InterpolationMissingOptionError",
        "configparser.SectionProxy",
        "configparser.InterpolationSyntaxError",
        "configparser.InterpolationDepthError",
        "configparser.InterpolationError",
        "warnings",
        "configparser.ExtendedInterpolation",
        "configparser.NoSectionError",
        "functools",
        "collections",
        "configparser.DuplicateSectionError",
        "configparser.LegacyInterpolation",
        "os",
        "configparser.BasicInterpolation"
    ],
    "configparser.Error": [],
    "configparser.NoSectionError": [],
    "configparser.DuplicateSectionError": [],
    "configparser.DuplicateOptionError": [],
    "configparser.NoOptionError": [],
    "configparser.InterpolationError": [],
    "configparser.InterpolationMissingOptionError": [],
    "configparser.InterpolationSyntaxError": [],
    "configparser.InterpolationDepthError": [],
    "configparser.ParsingError": [
        "<builtin>.property"
    ],
    "configparser.MissingSectionHeaderError": [],
    "configparser.Interpolation": [],
    "configparser.BasicInterpolation": [
        "re.compile"
    ],
    "configparser.ExtendedInterpolation": [
        "re.compile"
    ],
    "configparser.LegacyInterpolation": [
        "re.compile",
        "<builtin>.staticmethod"
    ],
    "configparser.RawConfigParser": [
        "<builtin>.property",
        "re.compile"
    ],
    "configparser.ConfigParser": [],
    "configparser.SafeConfigParser": [],
    "configparser.SectionProxy": [
        "<builtin>.property"
    ],
    "configparser.ConverterMapping": [
        "re.compile"
    ],
    "rich.theme.Theme": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "rich.theme.ThemeStackError": [],
    "rich.theme.ThemeStack": [],
    "rich.theme.Theme.__init__": [
        "rich.style.Style.parse",
        "<builtin>.isinstance"
    ],
    "rich.style.Style.parse": [
        "<str>.strip",
        "rich.style.Style.__init__",
        "rich.style.Style.null",
        "rich.color.Color.parse",
        "<map>.get",
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "rich._export_format": [],
    "rich._log_render": [
        "rich.text",
        "rich.console",
        "rich.table",
        "rich._log_render.LogRender",
        "typing",
        "datetime"
    ],
    "rich._log_render.LogRender": [],
    "rich.highlighter": [
        "rich.text",
        "rich.highlighter.JSONHighlighter",
        "typing",
        "rich.highlighter.RegexHighlighter",
        "rich.highlighter.Highlighter",
        "re",
        "rich.highlighter.ISO8601Highlighter",
        "rich.highlighter.ReprHighlighter",
        "abc",
        "rich.highlighter.NullHighlighter"
    ],
    "rich.highlighter.Highlighter": [
        "abc.abstractmethod"
    ],
    "rich.highlighter.NullHighlighter": [],
    "rich.highlighter.RegexHighlighter": [],
    "rich.highlighter.ReprHighlighter": [],
    "rich.highlighter.JSONHighlighter": [],
    "rich.highlighter.ISO8601Highlighter": [],
    "rich.markup": [
        "rich.text",
        "rich.emoji",
        "rich.errors",
        "rich.style",
        "typing",
        "operator",
        "re",
        "ast",
        "re.compile",
        "rich.markup.Tag",
        "rich._emoji_replace"
    ],
    "ast": [
        "ast.NameConstant",
        "ast.Ellipsis",
        "ast._ABC",
        "<builtin>.type",
        "ast.NodeTransformer",
        "ast.Str",
        "<builtin>.property",
        "ast.Bytes",
        "ast.NodeVisitor",
        "ast.Num"
    ],
    "ast.NodeVisitor": [],
    "ast.NodeTransformer": [],
    "ast._ABC": [],
    "ast.Num": [],
    "ast.Str": [],
    "ast.Bytes": [],
    "ast.NameConstant": [],
    "ast.Ellipsis": [],
    "rich.markup.Tag": [
        "<builtin>.property"
    ],
    "rich.pager": [
        "rich.pager.Pager",
        "rich.pager.SystemPager",
        "typing",
        "abc"
    ],
    "rich.pager.Pager": [
        "abc.abstractmethod"
    ],
    "rich.pager.SystemPager": [],
    "rich.pretty": [
        "rich.pretty._Line",
        "collections.namedtuple",
        "rich._loop",
        "rich._pick",
        "rich.repr",
        "inspect",
        "rich.measure",
        "array",
        "typing",
        "rich.text",
        "rich.console",
        "<builtin>.tuple",
        "attr",
        "dataclasses",
        "rich.highlighter",
        "rich.pretty.Pretty",
        "rich.pretty.Node",
        "rich.cells",
        "rich.abc",
        "collections",
        "rich.jupyter",
        "os",
        "types"
    ],
    "array": [],
    "attr": [
        "attr._config",
        "attr.validators",
        "<list>.extend",
        "functools",
        "attr._version_info.VersionInfo._from_version_string",
        "attr._next_gen",
        "attr.exceptions",
        "attr._funcs",
        "attr._version_info",
        "attr.setters",
        "attr.filters",
        "attr._cmp",
        "attr.converters",
        "attr._make"
    ],
    "attr.converters": [
        "typing",
        "attr._make",
        "attr._compat"
    ],
    "attr._compat": [
        "inspect",
        "threading",
        "platform.python_implementation",
        "attr._compat._AnnotationExtractor",
        "collections",
        "_thread._local",
        "collections.abc",
        "platform",
        "warnings",
        "types",
        "attr._compat.make_set_closure_cell"
    ],
    "platform.python_implementation": [
        "platform._sys_version"
    ],
    "platform._sys_version": [
        "<builtin>.ValueError",
        "<builtin>.hasattr",
        "<builtin>.len",
        "<builtin>.repr",
        "<map>.get"
    ],
    "attr._compat._AnnotationExtractor": [],
    "attr._compat.make_set_closure_cell": [
        "attr._compat.make_set_closure_cell.set_closure_cell",
        "attr._compat.make_set_closure_cell.make_func_with_cell",
        "<list>.extend",
        "<list>.append"
    ],
    "attr._compat.make_set_closure_cell.make_func_with_cell": [],
    "attr._compat.make_set_closure_cell.set_closure_cell": [],
    "attr._make": [
        "attr._make._add_repr",
        "attr._make._AndValidator",
        "copy",
        "attr._make._add_hash",
        "attr.setters.pipe",
        "typing",
        "<builtin>.object",
        "attr._make._CacheHashWrapper",
        "attr.setters",
        "attr._make._make_attr_tuple_class",
        "attr._config",
        "attr._make.Factory",
        "attr._make._Nothing",
        "attr._make._CountingAttr",
        "attr._make._ClassBuilder",
        "attr.exceptions",
        "attr._make._add_eq",
        "attr._compat",
        "linecache",
        "operator",
        "attr._make.Attribute",
        "attr._make.Attribute.__init__",
        "types"
    ],
    "attr._config": [],
    "attr.setters": [
        "attr.exceptions",
        "attr._config",
        "<builtin>.object"
    ],
    "attr.exceptions": [
        "attr.exceptions.FrozenAttributeError",
        "attr.exceptions.DefaultAlreadySetError",
        "attr.exceptions.FrozenInstanceError",
        "attr.exceptions.PythonTooOldError",
        "attr.exceptions.AttrsAttributeNotFoundError",
        "attr.exceptions.FrozenError",
        "attr.exceptions.UnannotatedAttributeError",
        "attr.exceptions.NotCallableError",
        "attr.exceptions.NotAnAttrsClassError"
    ],
    "attr.exceptions.FrozenError": [],
    "attr.exceptions.FrozenInstanceError": [],
    "attr.exceptions.FrozenAttributeError": [],
    "attr.exceptions.AttrsAttributeNotFoundError": [],
    "attr.exceptions.NotAnAttrsClassError": [],
    "attr.exceptions.DefaultAlreadySetError": [],
    "attr.exceptions.UnannotatedAttributeError": [],
    "attr.exceptions.PythonTooOldError": [],
    "attr.exceptions.NotCallableError": [],
    "attr.setters.pipe": [],
    "attr._make._Nothing": [],
    "attr._make._CacheHashWrapper": [
        "<builtin>.type"
    ],
    "attr._make._make_attr_tuple_class": [
        "attr._make._compile_and_eval",
        "<builtin>.enumerate",
        "<list>.append"
    ],
    "attr._make._compile_and_eval": [
        "<builtin>.compile",
        "<builtin>.eval"
    ],
    "<builtin>.eval": [],
    "attr._make._ClassBuilder": [],
    "attr._make.Attribute": [
        "<builtin>.classmethod"
    ],
    "attr._make.Attribute.__init__": [
        "attr._make._determine_attrib_eq_order",
        "<builtin>.dict"
    ],
    "attr._make._determine_attrib_eq_order": [
        "<builtin>.ValueError",
        "attr._make._determine_attrib_eq_order.decide_callable_or_boolean",
        "<builtin>.any"
    ],
    "attr._make._determine_attrib_eq_order.decide_callable_or_boolean": [
        "<builtin>.callable"
    ],
    "attr._make._add_repr": [
        "attr._make._make_repr"
    ],
    "attr._make._make_repr": [
        "<builtin>.tuple"
    ],
    "attr._make._add_eq": [
        "attr._make._make_eq",
        "attr._make._make_ne"
    ],
    "attr._make._make_eq": [
        "<list>.append",
        "attr._make._make_method",
        "attr._make._generate_unique_filename"
    ],
    "attr._make._generate_unique_filename": [
        "<builtin>.getattr"
    ],
    "attr._make._make_method": [
        "attr._make._compile_and_eval",
        "<str>.splitlines",
        "<map>.setdefault",
        "<builtin>.len"
    ],
    "attr._make._make_ne": [],
    "attr._make._add_hash": [
        "attr._make._make_hash"
    ],
    "attr._make._make_hash": [
        "<builtin>.hash",
        "<builtin>.tuple",
        "<list>.append",
        "attr._make._generate_unique_filename",
        "attr._make._make_hash.append_hash_computation_lines",
        "attr._make._make_method"
    ],
    "attr._make._make_hash.append_hash_computation_lines": [
        "<list>.extend",
        "<list>.append"
    ],
    "attr._make._CountingAttr": [
        "attr._make.Attribute.__init__",
        "<builtin>.tuple"
    ],
    "attr._make.Factory": [],
    "attr._make._AndValidator": [
        "attr._make.attrib"
    ],
    "attr._make.attrib": [
        "attr.setters.pipe",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "attr._make.and_",
        "<builtin>.callable",
        "<builtin>.TypeError",
        "attr._make.pipe",
        "attr._make.Factory.__init__",
        "attr._make._CountingAttr.__init__",
        "attr._make._determine_attrib_eq_order"
    ],
    "attr._make.Factory.__init__": [],
    "attr._make.and_": [],
    "attr._make.pipe": [],
    "attr._make._CountingAttr.__init__": [],
    "attr.filters": [
        "attr._make"
    ],
    "attr.validators": [
        "attr.validators._MaxLengthValidator",
        "re.compile",
        "attr.validators._MatchesReValidator",
        "attr.validators._ProvidesValidator",
        "attr.validators._MinLengthValidator",
        "attr._make",
        "contextlib",
        "attr.validators._NumberValidator",
        "re",
        "contextlib.contextmanager",
        "attr.validators._IsCallableValidator",
        "attr.validators._InValidator",
        "attr._config",
        "<builtin>.type",
        "attr.exceptions",
        "attr.validators._DeepMapping",
        "attr.validators._InstanceOfValidator",
        "operator",
        "attr.validators._OptionalValidator",
        "attr.validators._DeepIterable"
    ],
    "attr.validators._InstanceOfValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._MatchesReValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._ProvidesValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._OptionalValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._InValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._IsCallableValidator": [],
    "attr.validators._DeepIterable": [
        "attr.validators.optional",
        "attr._make.attrib",
        "attr.validators.is_callable"
    ],
    "attr.validators.is_callable": [],
    "attr.validators.optional": [
        "<builtin>.isinstance"
    ],
    "attr.validators._DeepMapping": [
        "attr.validators.optional",
        "attr._make.attrib",
        "attr.validators.is_callable"
    ],
    "attr.validators._NumberValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._MaxLengthValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._MinLengthValidator": [
        "attr._make.attrib"
    ],
    "attr._cmp": [
        "functools",
        "attr._make",
        "types"
    ],
    "attr._funcs": [
        "attr.exceptions",
        "copy",
        "attr._make"
    ],
    "attr._version_info": [
        "functools",
        "attr._funcs",
        "attr._version_info.VersionInfo",
        "attr._make"
    ],
    "attr._version_info.VersionInfo": [
        "attr._make.attrib",
        "<builtin>.classmethod"
    ],
    "attr._version_info.VersionInfo._from_version_string": [
        "<builtin>.len",
        "<builtin>.int",
        "<str>.split"
    ],
    "attr._next_gen": [
        "functools",
        "attr.exceptions",
        "attr._funcs",
        "attr.setters",
        "attr._make"
    ],
    "rich.abc": [
        "rich.abc.RichRenderable",
        "abc"
    ],
    "rich.abc.RichRenderable": [
        "<builtin>.classmethod"
    ],
    "rich.pretty.Pretty": [],
    "rich.pretty.Node": [],
    "rich.pretty._Line": [
        "<builtin>.property"
    ],
    "rich.region": [
        "rich.region.Region",
        "typing"
    ],
    "rich.region.Region": [],
    "rich.scope": [
        "rich.pretty",
        "rich.text",
        "rich.console",
        "rich.table",
        "typing",
        "rich.highlighter",
        "collections.abc",
        "rich.panel"
    ],
    "rich.panel": [
        "rich.text",
        "rich.console",
        "rich.measure",
        "rich.style",
        "rich.segment",
        "typing",
        "rich.panel.Panel",
        "rich.padding",
        "rich.jupyter",
        "rich.box",
        "rich.align",
        "rich.cells"
    ],
    "rich.panel.Panel": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "rich.screen": [
        "rich.screen.Screen",
        "rich.console",
        "rich.style",
        "rich.segment",
        "typing",
        "rich._loop"
    ],
    "rich.screen.Screen": [],
    "rich.styled": [
        "rich.styled.Styled",
        "rich.console",
        "rich.measure",
        "rich.style",
        "rich.segment",
        "typing"
    ],
    "rich.styled.Styled": [],
    "rich._windows": [
        "<builtin>.ImportError",
        "rich._windows.WindowsConsoleFeatures",
        "rich._win32_console",
        "ctypes.LibraryLoader.__init__",
        "dataclasses",
        "ctypes"
    ],
    "rich._windows.WindowsConsoleFeatures": [],
    "rich._win32_console": [
        "<builtin>.ImportError",
        "rich._win32_console.WindowsCoordinates",
        "rich.style",
        "rich.color",
        "rich._win32_console.CONSOLE_CURSOR_INFO",
        "rich._win32_console.LegacyWindowsTerm",
        "typing",
        "ctypes.LibraryLoader.__init__",
        "ctypes",
        "rich._win32_console.CONSOLE_SCREEN_BUFFER_INFO",
        "rich._win32_console.LegacyWindowsError",
        "ctypes.wintypes"
    ],
    "rich._win32_console.LegacyWindowsError": [],
    "rich._win32_console.WindowsCoordinates": [
        "<builtin>.classmethod"
    ],
    "rich._win32_console.CONSOLE_SCREEN_BUFFER_INFO": [],
    "rich._win32_console.CONSOLE_CURSOR_INFO": [],
    "rich._win32_console.LegacyWindowsTerm": [
        "<builtin>.property"
    ],
    "rich.live": [
        "rich.text",
        "threading",
        "rich.console",
        "rich.file_proxy",
        "rich.live._RefreshThread",
        "typing",
        "rich.live.Live",
        "rich.control",
        "rich.live_render",
        "rich.jupyter",
        "rich.screen",
        "types"
    ],
    "rich.file_proxy": [
        "rich.text",
        "rich.ansi",
        "rich.console",
        "io",
        "rich.file_proxy.FileProxy",
        "typing"
    ],
    "rich.ansi": [
        "io",
        "pty.spawn",
        "re.compile",
        "<builtin>.print",
        "rich.color",
        "contextlib",
        "rich.ansi.AnsiDecoder",
        "typing",
        "rich.ansi._AnsiToken",
        "re",
        "rich.ansi.AnsiDecoder.decode",
        "rich.text",
        "rich.console",
        "pty",
        "rich.style",
        "rich.console.Console.__init__",
        "rich.ansi.AnsiDecoder.__init__",
        "os",
        "_io.BytesIO"
    ],
    "rich.ansi._AnsiToken": [],
    "rich.ansi.AnsiDecoder": [],
    "pty": [
        "select",
        "tty",
        "os"
    ],
    "rich.ansi.AnsiDecoder.__init__": [
        "rich.style.Style.null"
    ],
    "_io.BytesIO": [],
    "pty.spawn": [
        "<builtin>.type",
        "os.execlp",
        "pty.fork",
        "pty._copy",
        "tty.setraw"
    ],
    "pty.fork": [
        "pty.openpty"
    ],
    "pty.openpty": [
        "pty._open_terminal",
        "pty.slave_open"
    ],
    "pty._open_terminal": [
        "<builtin>.OSError"
    ],
    "<builtin>.OSError": [],
    "pty.slave_open": [
        "fcntl"
    ],
    "fcntl": [],
    "os.execlp": [
        "os.execvp"
    ],
    "os.execvp": [
        "os._execvpe"
    ],
    "os._execvpe": [
        "<builtin>.map",
        "os._fscodec.fsdecode",
        "os._fscodec.fsencode",
        "ntpath.join",
        "ntpath.dirname",
        "posixpath.dirname",
        "posixpath.join",
        "os.get_exec_path"
    ],
    "tty.setraw": [],
    "pty._copy": [
        "<list>.remove",
        "pty._read",
        "pty._writen"
    ],
    "pty._read": [],
    "pty._writen": [],
    "rich.console.Console.__init__": [
        "rich.theme.ThemeStack.__init__",
        "<builtin>.int",
        "rich.console.Console._detect_color_system",
        "rich._log_render.LogRender.__init__",
        "rich.console._is_jupyter",
        "rich.console.detect_legacy_windows",
        "threading.RLock"
    ],
    "rich.ansi.AnsiDecoder.decode": [
        "rich.ansi.AnsiDecoder.decode_line",
        "<str>.splitlines"
    ],
    "rich.ansi.AnsiDecoder.decode_line": [
        "rich.text.Text.__init__",
        "<builtin>.int",
        "contextlib.suppress.__init__",
        "rich.style.Style.update_link",
        "rich.text.Text.append",
        "rich.style.Style.null",
        "<builtin>.iter",
        "rich.style.Style.parse",
        "<builtin>.min",
        "rich.ansi._ansi_tokenize"
    ],
    "rich.text.Text.__init__": [
        "rich.control.strip_control_codes",
        "<builtin>.len"
    ],
    "rich.control.strip_control_codes": [
        "<str>.translate"
    ],
    "<str>.translate": [],
    "rich.ansi._ansi_tokenize": [
        "<builtin>.len"
    ],
    "contextlib.suppress.__init__": [],
    "rich.style.Style.update_link": [
        "random.Random.randint"
    ],
    "rich.text.Text.append": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<list>.append",
        "<builtin>.TypeError",
        "<builtin>.len",
        "rich.control.strip_control_codes"
    ],
    "rich.file_proxy.FileProxy": [
        "<builtin>.property"
    ],
    "rich.live_render": [
        "rich.text",
        "rich.console",
        "rich.style",
        "rich.segment",
        "typing",
        "rich._loop",
        "rich.control",
        "rich.live_render.LiveRender",
        "typing_extensions"
    ],
    "rich.live_render.LiveRender": [],
    "rich.live._RefreshThread": [],
    "rich.live.Live": [
        "<builtin>.property"
    ],
    "rich.status": [
        "rich.console",
        "rich.style",
        "rich.live",
        "typing",
        "rich.spinner",
        "rich.jupyter",
        "types",
        "rich.status.Status"
    ],
    "rich.spinner": [
        "rich.text",
        "rich.console",
        "rich.measure",
        "rich.table",
        "rich.style",
        "typing",
        "rich.spinner.Spinner",
        "rich._spinners"
    ],
    "rich._spinners": [],
    "rich.spinner.Spinner": [],
    "rich.status.Status": [
        "<builtin>.property"
    ],
    "rich.console.NoChange": [],
    "rich.console.ConsoleDimensions": [],
    "rich.console.ConsoleOptions": [
        "<builtin>.property"
    ],
    "rich.console.RichCast": [],
    "rich.console.ConsoleRenderable": [],
    "rich.console.CaptureError": [],
    "rich.console.NewLine": [],
    "rich.console.ScreenUpdate": [],
    "rich.console.Capture": [],
    "rich.console.ThemeContext": [],
    "rich.console.PagerContext": [],
    "rich.console.ScreenContext": [],
    "rich.console.Group": [
        "<builtin>.property"
    ],
    "rich.console.ConsoleThreadLocals": [
        "dataclasses.field"
    ],
    "rich.console.RenderHook": [
        "abc.abstractmethod"
    ],
    "rich.console.Console": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "rich.console._is_jupyter": [
        "os.getenv",
        "<builtin>.str"
    ],
    "os.getenv": [],
    "rich.console.detect_legacy_windows": [
        "rich.console.get_windows_console_features"
    ],
    "rich.console.get_windows_console_features": [
        "rich._windows",
        "rich._windows.get_windows_console_features"
    ],
    "rich._windows.get_windows_console_features": [],
    "rich.console.Console._detect_color_system": [
        "rich.console.get_windows_console_features",
        "<map>.get"
    ],
    "rich._log_render.LogRender.__init__": [],
    "rich.theme.ThemeStack.__init__": [],
    "rich_cli.__main__.ForceWidth": [],
    "rich_cli.__main__.RichCommand": [],
    "click.decorators.option": [],
    "click.decorators.option.decorator": [
        "click.decorators._param_memo"
    ],
    "click.decorators._param_memo": [
        "<list>.append",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "click.types.Choice.__init__": [],
    "click.decorators.argument": [],
    "click.decorators.argument.decorator": [
        "click.decorators._param_memo"
    ],
    "click.decorators.command": [],
    "rich_cli.__main__.run": [
        "rich_cli.__main__.main"
    ],
    "rich_cli.__main__.main": [
        "rich_rst",
        "textual.app.App.run",
        "rich.text.Text.from_markup",
        "urllib.parse.urlparse",
        "rich.rule.Rule.__init__",
        "<builtin>.len",
        "rich_cli.pager.PagerRenderable.__init__",
        "rich_cli.__main__._line_range",
        "rich.align",
        "rich.rule",
        "rich_cli.__main__.render_csv",
        "rich.json.JSON.__init__",
        "rich.syntax.Syntax.__init__",
        "<builtin>.eval",
        "rich.console.Console.save_svg",
        "rich.styled",
        "rich.console.Console.print_exception",
        "rich.padding",
        "rich_cli.__main__.on_error",
        "<str>.upper",
        "rich._inspect",
        "rich_cli.__main__.main.print_usage",
        "rich_rst.RestructuredText.__init__",
        "rich.panel",
        "rich.text",
        "<builtin>.int",
        "<str>.splitlines",
        "<builtin>.tuple",
        "rich.panel.Panel.__init__",
        "rich.style",
        "rich.json",
        "rich.padding.Padding.__init__",
        "rich.console.Console.render_lines",
        "posixpath",
        "rich.console.Console.save_html",
        "rich.style.Style.parse",
        "rich_cli.pager",
        "rich_cli.__main__.render_ipynb",
        "rich.syntax",
        "rich.console.Console.__init__",
        "<builtin>.bool",
        "rich_cli.__main__.read_resource",
        "rich_cli.markdown",
        "rich.console.Console.print",
        "urllib.parse",
        "rich._inspect.Inspect.__init__",
        "rich.align.Align.__init__",
        "rich.markdown.Markdown.__init__",
        "rich_cli.__main__.ForceWidth.__init__",
        "<str>.split",
        "<builtin>.getattr",
        "rich.box"
    ],
    "rich_cli.__main__.on_error": [
        "rich.console.Console.print",
        "rich.text.Text.__init__",
        "<builtin>.str",
        "rich.text.Text.stylize"
    ],
    "rich.console.Console.print": [
        "rich.console.NewLine.__init__"
    ],
    "rich.console.NewLine.__init__": [],
    "rich.text.Text.stylize": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "urllib.parse": [
        "urllib.parse.DefragResultBytes",
        "collections.namedtuple",
        "<builtin>.bytes",
        "re.compile",
        "urllib.parse.SplitResultBytes",
        "urllib.parse.ParseResultBytes",
        "urllib.parse._NetlocResultMixinBase",
        "re",
        "urllib.parse._fix_result_transcoding",
        "urllib.parse._ResultMixinStr",
        "urllib.parse._NetlocResultMixinStr",
        "urllib.parse._NetlocResultMixinBytes",
        "urllib.parse._ResultMixinBytes",
        "warnings",
        "urllib.parse.Quoter",
        "urllib.parse.DefragResult",
        "collections",
        "<builtin>.frozenset",
        "urllib.parse.SplitResult",
        "urllib.parse.ParseResult"
    ],
    "urllib.parse._ResultMixinStr": [],
    "urllib.parse._ResultMixinBytes": [],
    "urllib.parse._NetlocResultMixinBase": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinStr": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinBytes": [
        "<builtin>.property"
    ],
    "urllib.parse.DefragResult": [],
    "urllib.parse.SplitResult": [],
    "urllib.parse.ParseResult": [],
    "urllib.parse.DefragResultBytes": [],
    "urllib.parse.SplitResultBytes": [],
    "urllib.parse.ParseResultBytes": [],
    "urllib.parse._fix_result_transcoding": [],
    "urllib.parse.Quoter": [],
    "urllib.parse.urlparse": [
        "urllib.parse.urlsplit",
        "urllib.parse._coerce_args",
        "urllib.parse._splitparams"
    ],
    "urllib.parse._coerce_args": [
        "<builtin>.TypeError",
        "urllib.parse._decode_args",
        "<builtin>.isinstance"
    ],
    "urllib.parse._decode_args": [
        "<builtin>.tuple"
    ],
    "urllib.parse.urlsplit": [
        "<builtin>.ValueError",
        "<str>.find",
        "<builtin>.bool",
        "<builtin>.type",
        "urllib.parse._splitnetloc",
        "<builtin>.len",
        "urllib.parse._checknetloc",
        "urllib.parse._coerce_args",
        "urllib.parse.clear_cache",
        "<map>.get",
        "<str>.split"
    ],
    "urllib.parse.clear_cache": [
        "<map>.clear"
    ],
    "urllib.parse._splitnetloc": [
        "<builtin>.min",
        "<str>.find",
        "<builtin>.len"
    ],
    "urllib.parse._checknetloc": [
        "<str>.replace",
        "<str>.isascii",
        "unicodedata",
        "<builtin>.ValueError"
    ],
    "<str>.isascii": [],
    "unicodedata": [],
    "urllib.parse._splitparams": [
        "<str>.find"
    ],
    "rich_cli.__main__.main.print_usage": [
        "rich.console.Console.print"
    ],
    "rich.syntax": [
        "rich.segment",
        "rich.style.Style.__init__",
        "rich._loop",
        "pygments.style",
        "rich.color",
        "pygments.lexers",
        "rich.measure",
        "rich.syntax.SyntaxTheme",
        "rich.syntax.Syntax",
        "typing",
        "rich.padding",
        "re",
        "pygments.util",
        "rich.containers",
        "rich.syntax._SyntaxHighlightRange",
        "rich.syntax.ANSISyntaxTheme",
        "pygments.token",
        "rich.text",
        "rich.console",
        "rich.style",
        "pygments.styles",
        "rich.syntax.PygmentsSyntaxTheme",
        "posixpath",
        "abc",
        "rich.cells",
        "pygments.lexer",
        "textwrap",
        "rich.jupyter",
        "platform",
        "platform.system"
    ],
    "textwrap": [
        "textwrap.TextWrapper",
        "re",
        "re.compile"
    ],
    "textwrap.TextWrapper": [
        "<builtin>.ord",
        "re.escape",
        "re.compile"
    ],
    "pygments.lexer": [
        "pygments.lexer.LexerMeta",
        "pygments.lexer.RegexLexerMeta",
        "pygments.regexopt",
        "pygments.lexer.RegexLexer",
        "pygments.lexer.ProfilingRegexLexerMeta",
        "pygments.lexer.ProfilingRegexLexer",
        "pygments.lexer.words",
        "pygments.lexer.DelegatingLexer",
        "pygments.lexer.default",
        "pygments.lexer._PseudoMatch",
        "re",
        "pygments.lexer.ExtendedRegexLexer",
        "pygments.lexer.combined",
        "pygments.lexer._inherit",
        "pygments.util",
        "pygments.lexer._This",
        "pygments.token",
        "pygments.lexer.include",
        "<builtin>.staticmethod",
        "pygments.filter",
        "pygments.lexer.LexerContext",
        "pygments.filters",
        "pygments.lexer.Lexer"
    ],
    "pygments.filter": [
        "pygments.filter.FunctionFilter",
        "pygments.filter.Filter"
    ],
    "pygments.filter.Filter": [],
    "pygments.filter.FunctionFilter": [],
    "pygments.filters": [
        "pygments.token",
        "pygments.filters.SymbolFilter",
        "pygments.filters.NameHighlightFilter",
        "pygments.filters.CodeTagFilter",
        "pygments.filter",
        "pygments.filters.RaiseOnErrorTokenFilter",
        "pygments.filters.ErrorToken",
        "pygments.filters.TokenMergeFilter",
        "re",
        "pygments.filters.GobbleFilter",
        "pygments.filters.KeywordCaseFilter",
        "pygments.util",
        "pygments.filters.VisibleWhitespaceFilter",
        "pygments.plugin"
    ],
    "pygments.token": [
        "pygments.token._TokenType.__init__",
        "pygments.token._TokenType"
    ],
    "pygments.token._TokenType": [],
    "pygments.token._TokenType.__init__": [
        "<builtin>.set"
    ],
    "pygments.plugin": [],
    "pygments.filters.CodeTagFilter": [],
    "pygments.filters.SymbolFilter": [],
    "pygments.filters.KeywordCaseFilter": [],
    "pygments.filters.NameHighlightFilter": [],
    "pygments.filters.ErrorToken": [],
    "pygments.filters.RaiseOnErrorTokenFilter": [],
    "pygments.filters.VisibleWhitespaceFilter": [],
    "pygments.filters.GobbleFilter": [],
    "pygments.filters.TokenMergeFilter": [],
    "pygments.regexopt": [
        "operator.itemgetter.__init__",
        "posixpath",
        "re",
        "operator",
        "re.compile"
    ],
    "pygments.lexer.LexerMeta": [],
    "pygments.lexer.Lexer": [],
    "pygments.lexer.DelegatingLexer": [],
    "pygments.lexer.include": [],
    "pygments.lexer._inherit": [],
    "pygments.lexer.combined": [],
    "pygments.lexer._PseudoMatch": [],
    "pygments.lexer._This": [],
    "pygments.lexer.default": [],
    "pygments.lexer.words": [],
    "pygments.lexer.RegexLexerMeta": [],
    "pygments.lexer.RegexLexer": [],
    "pygments.lexer.LexerContext": [],
    "pygments.lexer.ExtendedRegexLexer": [],
    "pygments.lexer.ProfilingRegexLexerMeta": [],
    "pygments.lexer.ProfilingRegexLexer": [],
    "pygments.lexers": [
        "pygments.lexers._automodule",
        "pygments.modeline",
        "pygments.lexers._mapping",
        "posixpath",
        "re",
        "fnmatch",
        "<builtin>.list",
        "pygments.util",
        "pygments.plugin",
        "types"
    ],
    "pygments.lexers._mapping": [],
    "pygments.modeline": [
        "re",
        "re.compile"
    ],
    "pygments.lexers._automodule": [],
    "pygments.style": [
        "pygments.token",
        "<builtin>.set",
        "pygments.style.StyleMeta",
        "pygments.style.Style"
    ],
    "pygments.style.StyleMeta": [],
    "pygments.style.Style": [],
    "pygments.styles": [
        "pygments.util",
        "pygments.plugin"
    ],
    "rich.syntax.SyntaxTheme": [
        "abc.abstractmethod"
    ],
    "rich.syntax.PygmentsSyntaxTheme": [],
    "rich.syntax.ANSISyntaxTheme": [],
    "rich.syntax._SyntaxHighlightRange": [],
    "rich.syntax.Syntax": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "rich_cli.__main__.read_resource": [
        "pygments.lexers",
        "requests.api.get",
        "rich_cli.__main__.on_error",
        "requests",
        "<map>.get",
        "<builtin>.open",
        "pygments.lexers.guess_lexer_for_filename",
        "rich.markup.escape"
    ],
    "requests": [
        "urllib3",
        "warnings.simplefilter",
        "logging.getLogger",
        "urllib3.exceptions",
        "requests.models",
        "requests.api",
        "ssl",
        "cryptography",
        "requests.utils",
        "requests.exceptions",
        "charset_normalizer",
        "logging",
        "urllib3.contrib.pyopenssl",
        "logging.Logger.addHandler",
        "warnings",
        "requests.packages",
        "warnings.warn",
        "requests.sessions",
        "requests.status_codes",
        "requests._check_cryptography",
        "requests.__version__",
        "requests.check_compatibility",
        "urllib3.contrib.pyopenssl.inject_into_urllib3",
        "<builtin>.getattr"
    ],
    "urllib3": [
        "urllib3.poolmanager",
        "urllib3._version",
        "logging",
        "urllib3.util.retry",
        "urllib3.util.url",
        "urllib3.response",
        "__future__",
        "urllib3.util.request",
        "urllib3.util.timeout",
        "logging.getLogger",
        "urllib3.connectionpool",
        "warnings.simplefilter",
        "urllib3.exceptions",
        "logging.Logger.addHandler",
        "warnings",
        "urllib3.filepost"
    ],
    "__future__": [
        "__future__._Feature.__init__",
        "__future__._Feature"
    ],
    "__future__._Feature": [],
    "__future__._Feature.__init__": [],
    "urllib3.exceptions": [
        "urllib3.exceptions.EmptyPoolError",
        "urllib3.exceptions.ProxyError",
        "urllib3.exceptions.NewConnectionError",
        "urllib3.exceptions.InsecureRequestWarning",
        "urllib3.exceptions.MaxRetryError",
        "urllib3.exceptions.HeaderParsingError",
        "urllib3.exceptions.ProxySchemeUnknown",
        "urllib3.exceptions.IncompleteRead",
        "urllib3.exceptions.ProtocolError",
        "urllib3.exceptions.SecurityWarning",
        "urllib3.exceptions.InsecurePlatformWarning",
        "urllib3.exceptions.ResponseError",
        "urllib3.exceptions.HTTPError",
        "urllib3.exceptions.InvalidHeader",
        "urllib3.exceptions.LocationValueError",
        "urllib3.exceptions.HTTPWarning",
        "__future__",
        "urllib3.exceptions.SubjectAltNameWarning",
        "urllib3.exceptions.InvalidChunkLength",
        "urllib3.exceptions.RequestError",
        "urllib3.exceptions.PoolError",
        "urllib3.exceptions.ReadTimeoutError",
        "urllib3.exceptions.DependencyWarning",
        "urllib3.exceptions.URLSchemeUnknown",
        "urllib3.exceptions.DecodeError",
        "urllib3.exceptions.TimeoutStateError",
        "urllib3.exceptions.SystemTimeWarning",
        "urllib3.exceptions.BodyNotHttplibCompatible",
        "urllib3.exceptions.LocationParseError",
        "urllib3.exceptions.ConnectTimeoutError",
        "urllib3.exceptions.TimeoutError",
        "urllib3.exceptions.ResponseNotChunked",
        "urllib3.exceptions.SSLError",
        "urllib3.exceptions.SNIMissingWarning",
        "urllib3.exceptions.UnrewindableBodyError",
        "urllib3.exceptions.ProxySchemeUnsupported",
        "urllib3.exceptions.HostChangedError",
        "urllib3.exceptions.ClosedPoolError"
    ],
    "urllib3.exceptions.HTTPError": [],
    "urllib3.exceptions.HTTPWarning": [],
    "urllib3.exceptions.PoolError": [],
    "urllib3.exceptions.RequestError": [],
    "urllib3.exceptions.SSLError": [],
    "urllib3.exceptions.ProxyError": [],
    "urllib3.exceptions.DecodeError": [],
    "urllib3.exceptions.ProtocolError": [],
    "urllib3.exceptions.MaxRetryError": [],
    "urllib3.exceptions.HostChangedError": [],
    "urllib3.exceptions.TimeoutStateError": [],
    "urllib3.exceptions.TimeoutError": [],
    "urllib3.exceptions.ReadTimeoutError": [],
    "urllib3.exceptions.ConnectTimeoutError": [],
    "urllib3.exceptions.NewConnectionError": [],
    "urllib3.exceptions.EmptyPoolError": [],
    "urllib3.exceptions.ClosedPoolError": [],
    "urllib3.exceptions.LocationValueError": [],
    "urllib3.exceptions.LocationParseError": [],
    "urllib3.exceptions.URLSchemeUnknown": [],
    "urllib3.exceptions.ResponseError": [],
    "urllib3.exceptions.SecurityWarning": [],
    "urllib3.exceptions.SubjectAltNameWarning": [],
    "urllib3.exceptions.InsecureRequestWarning": [],
    "urllib3.exceptions.SystemTimeWarning": [],
    "urllib3.exceptions.InsecurePlatformWarning": [],
    "urllib3.exceptions.SNIMissingWarning": [],
    "urllib3.exceptions.DependencyWarning": [],
    "urllib3.exceptions.ResponseNotChunked": [],
    "urllib3.exceptions.BodyNotHttplibCompatible": [],
    "urllib3.exceptions.IncompleteRead": [],
    "urllib3.exceptions.InvalidChunkLength": [],
    "urllib3.exceptions.InvalidHeader": [],
    "urllib3.exceptions.ProxySchemeUnknown": [],
    "urllib3.exceptions.ProxySchemeUnsupported": [],
    "urllib3.exceptions.HeaderParsingError": [],
    "urllib3.exceptions.UnrewindableBodyError": [],
    "urllib3._version": [],
    "urllib3.connectionpool": [
        "urllib3.util.queue",
        "urllib3.util.url",
        "urllib3.response",
        "urllib3.connectionpool.HTTPConnectionPool",
        "urllib3.util.timeout",
        "logging.getLogger",
        "urllib3.util.ssl_match_hostname",
        "urllib3.exceptions",
        "urllib3.util.retry",
        "urllib3.connection",
        "<builtin>.object",
        "__future__",
        "re",
        "urllib3.util.connection",
        "logging",
        "urllib3.connectionpool.ConnectionPool",
        "warnings",
        "urllib3.util.proxy",
        "urllib3.util.response",
        "urllib3.packages.six",
        "urllib3.util.request",
        "urllib3.request",
        "urllib3.connectionpool.HTTPSConnectionPool",
        "socket"
    ],
    "urllib3.connection": [
        "urllib3.connection.BaseSSLError",
        "urllib3.connection.HTTPSConnection",
        "urllib3.util.ssl_",
        "re.compile",
        "logging.getLogger",
        "urllib3.util.ssl_match_hostname",
        "urllib3.exceptions",
        "ssl",
        "urllib3.connection.BrokenPipeError",
        "__future__",
        "re",
        "urllib3.util",
        "urllib3.util.connection",
        "urllib3._version",
        "urllib3.connection.DummyConnection",
        "logging",
        "urllib3.connection.HTTPConnection",
        "datetime",
        "urllib3.connection.ConnectionError",
        "warnings",
        "urllib3.util.proxy",
        "urllib3.packages.six",
        "os",
        "socket"
    ],
    "urllib3.packages.six": [
        "io",
        "urllib3.packages.six.Module_six_moves_urllib_request",
        "urllib3.packages.six.exec_",
        "<builtin>.len",
        "operator.methodcaller.__init__",
        "urllib3.packages.six.Module_six_moves_urllib_error",
        "urllib3.packages.six.MovedModule",
        "urllib3.packages.six._SixMetaPathImporter.__init__",
        "urllib3.packages.six.Module_six_moves_urllib",
        "urllib3.packages.six.Module_six_moves_urllib_parse",
        "importlib.util",
        "<builtin>.globals",
        "__future__",
        "urllib3.packages.six.MovedAttribute",
        "urllib3.packages.six._SixMetaPathImporter",
        "<builtin>.getattr",
        "urllib3.packages.six.Iterator",
        "urllib3.packages.six._LazyDescr",
        "<builtin>.int",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.setattr",
        "urllib3.packages.six._MovedItems",
        "urllib3.packages.six.Module_six_moves_urllib_response",
        "struct",
        "operator.itemgetter.__init__",
        "urllib3.packages.six._LazyModule",
        "urllib3.packages.six._SixMetaPathImporter._add_module",
        "functools",
        "operator.attrgetter.__init__",
        "<builtin>.enumerate",
        "urllib3.packages.six._add_doc",
        "operator",
        "urllib3.packages.six.Module_six_moves_urllib_robotparser",
        "urllib3.packages.six.X",
        "types"
    ],
    "urllib3.packages.six.X": [],
    "importlib.util": [
        "contextlib",
        "functools",
        "importlib.util._LazyModule",
        "importlib.util.LazyLoader",
        "contextlib.contextmanager",
        "warnings",
        "types"
    ],
    "importlib.util._LazyModule": [],
    "importlib.util.LazyLoader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "urllib3.packages.six._LazyDescr": [],
    "urllib3.packages.six.MovedModule": [],
    "urllib3.packages.six._LazyModule": [],
    "urllib3.packages.six.MovedAttribute": [],
    "urllib3.packages.six._SixMetaPathImporter": [],
    "urllib3.packages.six._SixMetaPathImporter.__init__": [],
    "urllib3.packages.six._MovedItems": [],
    "<builtin>.setattr": [],
    "urllib3.packages.six._SixMetaPathImporter._add_module": [],
    "urllib3.packages.six.Module_six_moves_urllib_parse": [],
    "urllib3.packages.six.Module_six_moves_urllib_error": [],
    "urllib3.packages.six.Module_six_moves_urllib_request": [],
    "urllib3.packages.six.Module_six_moves_urllib_response": [],
    "urllib3.packages.six.Module_six_moves_urllib_robotparser": [],
    "urllib3.packages.six.Module_six_moves_urllib": [
        "urllib3.packages.six._SixMetaPathImporter._get_module"
    ],
    "urllib3.packages.six._SixMetaPathImporter._get_module": [],
    "urllib3.packages.six.Iterator": [],
    "urllib3.packages.six._add_doc": [],
    "operator.attrgetter.__init__": [
        "<builtin>.map",
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<str>.split"
    ],
    "operator.methodcaller.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "urllib3.packages.six.exec_": [
        "<builtin>.exec"
    ],
    "urllib3.util.proxy": [
        "urllib3.util.ssl_"
    ],
    "urllib3.util.ssl_": [
        "urllib3.util.ssl_.SSLContext",
        "urllib3.packages.six",
        "ssl",
        "binascii",
        "urllib3.util.ssltransport",
        "urllib3.util.url",
        "__future__",
        "hashlib",
        "os",
        "urllib3.exceptions",
        "hmac",
        "warnings",
        "<builtin>.getattr"
    ],
    "hmac": [
        "_hashlib",
        "<builtin>.bytes",
        "<builtin>.range",
        "hashlib",
        "warnings",
        "hmac.HMAC"
    ],
    "hmac.HMAC": [
        "<builtin>.property"
    ],
    "binascii": [],
    "urllib3.util.url": [
        "urllib3.packages.six",
        "<builtin>.set",
        "collections",
        "collections.namedtuple",
        "__future__",
        "re",
        "re.compile",
        "urllib3.exceptions",
        "urllib3.util.url.Url"
    ],
    "urllib3.util.url.Url": [
        "<builtin>.property"
    ],
    "ssl": [
        "<builtin>.hasattr",
        "ssl._TLSAlertType",
        "collections.namedtuple",
        "ssl.TLSVersion",
        "ssl._ASN1Object",
        "ssl._TLSMessageType",
        "ssl.SSLContext",
        "_ssl",
        "ssl._TLSContentType",
        "warnings",
        "ssl.Purpose",
        "ssl.SSLObject",
        "enum",
        "collections",
        "ssl.SSLSocket",
        "os",
        "base64",
        "socket",
        "<builtin>.getattr"
    ],
    "_ssl": [],
    "ssl.TLSVersion": [],
    "ssl._TLSContentType": [],
    "ssl._TLSAlertType": [],
    "ssl._TLSMessageType": [],
    "base64": [
        "binascii",
        "re",
        "struct"
    ],
    "ssl._ASN1Object": [
        "<builtin>.classmethod"
    ],
    "ssl.Purpose": [],
    "ssl.SSLContext": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "ssl.SSLObject": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "ssl.SSLSocket": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "ssl._sslcopydoc"
    ],
    "ssl._sslcopydoc": [
        "<builtin>.getattr"
    ],
    "urllib3.util.ssltransport": [
        "urllib3.packages.six",
        "ssl",
        "io",
        "urllib3.util.ssltransport.SSLTransport",
        "urllib3.exceptions",
        "socket"
    ],
    "urllib3.util.ssltransport.SSLTransport": [
        "<builtin>.staticmethod"
    ],
    "urllib3.util.ssl_.SSLContext": [],
    "urllib3.connection.BaseSSLError": [],
    "urllib3.connection.ConnectionError": [],
    "urllib3.connection.BrokenPipeError": [],
    "urllib3.util": [
        "urllib3.util.retry",
        "urllib3.util.url",
        "__future__",
        "urllib3.util.wait",
        "urllib3.util.request",
        "urllib3.util.ssl_",
        "urllib3.util.timeout",
        "urllib3.util.connection",
        "urllib3.util.response"
    ],
    "urllib3.util.connection": [
        "urllib3.packages.six",
        "urllib3.util.connection._has_ipv6",
        "urllib3.contrib._appengine_environ",
        "__future__",
        "urllib3.util.wait",
        "urllib3.exceptions",
        "socket"
    ],
    "urllib3.contrib._appengine_environ": [
        "os"
    ],
    "urllib3.util.wait": [
        "urllib3.util.wait.NoWayToWaitForSocketError",
        "select",
        "functools"
    ],
    "urllib3.util.wait.NoWayToWaitForSocketError": [],
    "urllib3.util.connection._has_ipv6": [
        "socket.socket.__init__",
        "urllib3.contrib._appengine_environ.is_appengine_sandbox",
        "socket.socket.close"
    ],
    "urllib3.contrib._appengine_environ.is_appengine_sandbox": [
        "urllib3.contrib._appengine_environ.is_appengine"
    ],
    "urllib3.contrib._appengine_environ.is_appengine": [
        "urllib3.contrib._appengine_environ.is_local_appengine",
        "urllib3.contrib._appengine_environ.is_prod_appengine"
    ],
    "urllib3.contrib._appengine_environ.is_local_appengine": [],
    "urllib3.contrib._appengine_environ.is_prod_appengine": [],
    "socket.socket.__init__": [],
    "socket.socket.close": [
        "socket.socket._real_close"
    ],
    "socket.socket._real_close": [],
    "urllib3.util.request": [
        "urllib3.packages.six",
        "<builtin>.object",
        "__future__",
        "<builtin>.frozenset",
        "urllib3.exceptions",
        "base64"
    ],
    "urllib3.util.response": [
        "urllib3.exceptions",
        "email.errors",
        "__future__"
    ],
    "email.errors": [
        "email.errors.HeaderParseError",
        "email.errors.NonPrintableDefect",
        "email.errors.ObsoleteHeaderDefect",
        "email.errors.InvalidHeaderDefect",
        "email.errors.MultipartConversionError",
        "email.errors.MissingHeaderBodySeparatorDefect",
        "email.errors.MessageError",
        "email.errors.HeaderDefect",
        "email.errors.UndecodableBytesDefect",
        "email.errors.InvalidBase64LengthDefect",
        "email.errors.MessageDefect",
        "email.errors.InvalidBase64PaddingDefect",
        "email.errors.HeaderMissingRequiredValue",
        "email.errors.FirstHeaderLineIsContinuationDefect",
        "email.errors.NonASCIILocalPartDefect",
        "email.errors.MisplacedEnvelopeHeaderDefect",
        "email.errors.MessageParseError",
        "email.errors.NoBoundaryInMultipartDefect",
        "email.errors.InvalidBase64CharactersDefect",
        "email.errors.InvalidMultipartContentTransferEncodingDefect",
        "email.errors.BoundaryError",
        "email.errors.MultipartInvariantViolationDefect",
        "email.errors.CloseBoundaryNotFoundDefect",
        "email.errors.CharsetError",
        "email.errors.StartBoundaryNotFoundDefect"
    ],
    "email.errors.MessageError": [],
    "email.errors.MessageParseError": [],
    "email.errors.HeaderParseError": [],
    "email.errors.BoundaryError": [],
    "email.errors.MultipartConversionError": [],
    "email.errors.CharsetError": [],
    "email.errors.MessageDefect": [],
    "email.errors.NoBoundaryInMultipartDefect": [],
    "email.errors.StartBoundaryNotFoundDefect": [],
    "email.errors.CloseBoundaryNotFoundDefect": [],
    "email.errors.FirstHeaderLineIsContinuationDefect": [],
    "email.errors.MisplacedEnvelopeHeaderDefect": [],
    "email.errors.MissingHeaderBodySeparatorDefect": [],
    "email.errors.MultipartInvariantViolationDefect": [],
    "email.errors.InvalidMultipartContentTransferEncodingDefect": [],
    "email.errors.UndecodableBytesDefect": [],
    "email.errors.InvalidBase64PaddingDefect": [],
    "email.errors.InvalidBase64CharactersDefect": [],
    "email.errors.InvalidBase64LengthDefect": [],
    "email.errors.HeaderDefect": [],
    "email.errors.InvalidHeaderDefect": [],
    "email.errors.HeaderMissingRequiredValue": [],
    "email.errors.NonPrintableDefect": [],
    "email.errors.ObsoleteHeaderDefect": [],
    "email.errors.NonASCIILocalPartDefect": [],
    "urllib3.util.retry": [
        "urllib3.packages.six",
        "urllib3.util.retry.Retry",
        "logging",
        "collections",
        "collections.namedtuple",
        "<builtin>.object",
        "__future__",
        "urllib3.util.retry._RetryMeta",
        "re",
        "email",
        "logging.getLogger",
        "urllib3.util.retry.Retry.__init__",
        "urllib3.exceptions",
        "warnings"
    ],
    "email": [],
    "urllib3.util.retry._RetryMeta": [
        "<builtin>.property"
    ],
    "urllib3.util.retry.Retry": [
        "<builtin>.frozenset",
        "<builtin>.classmethod"
    ],
    "urllib3.util.retry.Retry.__init__": [
        "warnings.warn",
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.set",
        "<builtin>.frozenset"
    ],
    "urllib3.util.timeout": [
        "<builtin>.object",
        "__future__",
        "urllib3.util.timeout.Timeout",
        "urllib3.exceptions",
        "socket",
        "<builtin>.getattr"
    ],
    "urllib3.util.timeout.Timeout": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "urllib3.util.ssl_match_hostname": [
        "urllib3.util.ssl_match_hostname.CertificateError",
        "re",
        "ipaddress"
    ],
    "ipaddress": [
        "ipaddress._BaseNetwork",
        "ipaddress.IPv4Network",
        "ipaddress._BaseV6",
        "ipaddress._IPAddressBase",
        "ipaddress.NetmaskValueError",
        "functools",
        "ipaddress.IPv4Interface",
        "ipaddress.AddressValueError",
        "ipaddress.IPv6Interface",
        "ipaddress.IPv4Address",
        "ipaddress.IPv6Address",
        "ipaddress._BaseAddress",
        "ipaddress.IPv6Network",
        "ipaddress._IPv4Constants",
        "ipaddress._IPv6Constants",
        "ipaddress._BaseV4"
    ],
    "ipaddress.AddressValueError": [],
    "ipaddress.NetmaskValueError": [],
    "ipaddress._IPAddressBase": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "ipaddress._BaseAddress": [],
    "ipaddress._BaseNetwork": [
        "<builtin>.property",
        "<builtin>.staticmethod",
        "functools.cached_property.__init__"
    ],
    "functools.cached_property.__init__": [
        "_thread.RLock"
    ],
    "ipaddress._BaseV4": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "ipaddress.IPv4Address": [
        "functools._lru_cache_wrapper.wrapper",
        "<builtin>.property",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "ipaddress.IPv4Interface": [
        "<builtin>.property",
        "functools.cached_property.__init__"
    ],
    "ipaddress.IPv4Network": [
        "functools._lru_cache_wrapper.wrapper",
        "<builtin>.property",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "ipaddress._IPv4Constants": [
        "ipaddress.IPv4Network.__init__",
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv4Network.__init__": [
        "<builtin>.int",
        "<builtin>.ValueError",
        "ipaddress.IPv4Address.__init__",
        "ipaddress._IPAddressBase._split_addr_prefix",
        "ipaddress._BaseV4._make_netmask"
    ],
    "ipaddress._IPAddressBase._split_addr_prefix": [
        "ipaddress._split_optional_netmask",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "ipaddress._split_optional_netmask": [
        "<builtin>.str",
        "<builtin>.len"
    ],
    "ipaddress.IPv4Address.__init__": [
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._check_int_address",
        "<builtin>.str",
        "ipaddress._BaseV4._ip_int_from_string",
        "ipaddress._IPAddressBase._check_packed_address"
    ],
    "ipaddress._IPAddressBase._check_int_address": [],
    "ipaddress._IPAddressBase._check_packed_address": [
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._ip_int_from_string": [
        "<builtin>.map",
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._make_netmask": [
        "ipaddress._IPAddressBase._report_invalid_netmask",
        "ipaddress._IPAddressBase._prefix_from_ip_string",
        "<builtin>.isinstance",
        "ipaddress.IPv4Address.__init__",
        "ipaddress._IPAddressBase._prefix_from_prefix_string",
        "ipaddress._IPAddressBase._ip_int_from_prefix"
    ],
    "ipaddress._IPAddressBase._prefix_from_prefix_string": [
        "<builtin>.int",
        "ipaddress._IPAddressBase._report_invalid_netmask"
    ],
    "ipaddress._IPAddressBase._report_invalid_netmask": [],
    "ipaddress._IPAddressBase._prefix_from_ip_string": [
        "ipaddress._BaseV4._ip_int_from_string",
        "ipaddress._IPAddressBase._prefix_from_ip_int",
        "ipaddress._IPAddressBase._report_invalid_netmask"
    ],
    "ipaddress._IPAddressBase._prefix_from_ip_int": [
        "<builtin>.ValueError",
        "ipaddress._count_righthand_zero_bits"
    ],
    "ipaddress._count_righthand_zero_bits": [
        "<builtin>.min"
    ],
    "ipaddress._IPAddressBase._ip_int_from_prefix": [],
    "ipaddress._BaseV6": [
        "<builtin>.property",
        "<builtin>.frozenset",
        "<builtin>.classmethod"
    ],
    "ipaddress.IPv6Address": [
        "functools._lru_cache_wrapper.wrapper",
        "<builtin>.property",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "ipaddress.IPv6Interface": [
        "<builtin>.property",
        "functools.cached_property.__init__"
    ],
    "ipaddress.IPv6Network": [
        "<builtin>.property"
    ],
    "ipaddress._IPv6Constants": [
        "ipaddress.IPv6Network.__init__"
    ],
    "ipaddress.IPv6Network.__init__": [
        "<builtin>.int",
        "ipaddress.IPv6Address.__init__",
        "<builtin>.ValueError",
        "ipaddress._IPAddressBase._split_addr_prefix",
        "ipaddress._BaseV6._make_netmask"
    ],
    "ipaddress.IPv6Address.__init__": [
        "<builtin>.isinstance",
        "ipaddress._BaseV6._ip_int_from_string",
        "ipaddress._IPAddressBase._check_int_address",
        "<builtin>.str",
        "ipaddress._IPAddressBase._check_packed_address"
    ],
    "ipaddress._BaseV6._ip_int_from_string": [
        "<builtin>.range",
        "ipaddress._BaseV6._parse_hextet",
        "ipaddress.IPv4Address.__init__",
        "<builtin>.len"
    ],
    "ipaddress._BaseV6._parse_hextet": [
        "<builtin>.ValueError",
        "<builtin>.int",
        "<builtin>.len"
    ],
    "ipaddress._BaseV6._make_netmask": [
        "ipaddress._IPAddressBase._report_invalid_netmask",
        "<builtin>.isinstance",
        "ipaddress.IPv6Address.__init__",
        "ipaddress._IPAddressBase._prefix_from_prefix_string",
        "ipaddress._IPAddressBase._ip_int_from_prefix"
    ],
    "urllib3.util.ssl_match_hostname.CertificateError": [],
    "urllib3.connection.HTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3.connection.HTTPSConnection": [],
    "urllib3.connection.DummyConnection": [],
    "urllib3.request": [
        "urllib3.filepost",
        "urllib3.request.RequestMethods",
        "__future__"
    ],
    "urllib3.filepost": [
        "urllib3.packages.six",
        "io",
        "binascii",
        "__future__",
        "codecs",
        "os",
        "urllib3.fields"
    ],
    "urllib3.fields": [
        "urllib3.packages.six",
        "mimetypes",
        "urllib3.fields.RequestField",
        "__future__",
        "re",
        "email.utils",
        "<map>.update"
    ],
    "email.utils": [
        "random",
        "urllib.parse",
        "email._parseaddr",
        "re",
        "datetime",
        "email.charset",
        "re.compile",
        "os",
        "socket"
    ],
    "email._parseaddr": [
        "email._parseaddr.AddrlistClass",
        "calendar",
        "email._parseaddr.AddressList"
    ],
    "calendar": [
        "locale",
        "calendar._localized_month",
        "calendar._localized_month.__init__",
        "calendar.Calendar",
        "calendar.HTMLCalendar",
        "calendar.different_locale",
        "calendar.IllegalWeekdayError",
        "calendar._localized_day.__init__",
        "<builtin>.range",
        "calendar.LocaleHTMLCalendar",
        "datetime",
        "calendar.LocaleTextCalendar",
        "calendar._localized_day",
        "calendar.IllegalMonthError",
        "calendar.TextCalendar",
        "datetime.date.toordinal"
    ],
    "calendar.IllegalMonthError": [],
    "calendar.IllegalWeekdayError": [],
    "calendar._localized_month": [
        "<builtin>.range"
    ],
    "calendar._localized_day": [
        "<builtin>.range"
    ],
    "calendar._localized_day.__init__": [],
    "calendar._localized_month.__init__": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "calendar.TextCalendar": [],
    "calendar.HTMLCalendar": [],
    "calendar.different_locale": [],
    "calendar.LocaleTextCalendar": [],
    "calendar.LocaleHTMLCalendar": [],
    "datetime.date.toordinal": [
        "datetime._ymd2ord"
    ],
    "datetime._ymd2ord": [
        "datetime._days_in_month",
        "datetime._days_before_year",
        "datetime._days_before_month"
    ],
    "datetime._days_in_month": [
        "datetime._is_leap"
    ],
    "datetime._is_leap": [],
    "datetime._days_before_month": [
        "datetime._is_leap"
    ],
    "email._parseaddr.AddrlistClass": [],
    "email._parseaddr.AddressList": [],
    "email.charset": [
        "functools",
        "email.errors",
        "email.charset.Charset",
        "email.encoders",
        "email.base64mime",
        "email.quoprimime"
    ],
    "email.base64mime": [
        "binascii",
        "base64"
    ],
    "email.quoprimime": [
        "<builtin>.chr",
        "<builtin>.range",
        "re",
        "<builtin>.ord",
        "string",
        "<str>.encode"
    ],
    "email.encoders": [
        "quopri",
        "base64"
    ],
    "quopri": [
        "binascii"
    ],
    "email.charset.Charset": [],
    "mimetypes": [
        "mimetypes.MimeTypes",
        "urllib.parse",
        "mimetypes._default_mime_types",
        "posixpath",
        "os"
    ],
    "mimetypes.MimeTypes": [],
    "mimetypes._default_mime_types": [],
    "urllib3.fields.RequestField": [
        "<builtin>.classmethod"
    ],
    "urllib3.request.RequestMethods": [],
    "urllib3.response": [
        "urllib3.response.GzipDecoderState",
        "contextlib",
        "urllib3.packages.six",
        "io",
        "logging",
        "urllib3.response.MultiDecoder",
        "zlib",
        "urllib3.response.HTTPResponse",
        "urllib3.connection",
        "__future__",
        "urllib3.util",
        "logging.getLogger",
        "urllib3.response.GzipDecoder",
        "urllib3.exceptions",
        "urllib3.response.BrotliDecoder",
        "socket",
        "urllib3.response.DeflateDecoder",
        "urllib3.util.response"
    ],
    "urllib3.response.DeflateDecoder": [],
    "urllib3.response.GzipDecoderState": [],
    "urllib3.response.GzipDecoder": [],
    "urllib3.response.BrotliDecoder": [],
    "urllib3.response.MultiDecoder": [],
    "urllib3.response.HTTPResponse": [
        "<builtin>.property",
        "contextlib.contextmanager",
        "<builtin>.classmethod"
    ],
    "urllib3.util.queue": [
        "urllib3.packages.six",
        "collections",
        "urllib3.util.queue.LifoQueue"
    ],
    "urllib3.util.queue.LifoQueue": [],
    "urllib3.connectionpool.ConnectionPool": [],
    "urllib3.connectionpool.HTTPConnectionPool": [],
    "urllib3.connectionpool.HTTPSConnectionPool": [],
    "urllib3.poolmanager": [
        "urllib3.packages.six",
        "logging",
        "urllib3.util.retry",
        "urllib3.poolmanager.ProxyManager",
        "functools",
        "collections",
        "urllib3.util.url",
        "collections.namedtuple",
        "__future__",
        "urllib3.poolmanager.PoolManager",
        "logging.getLogger",
        "urllib3.connectionpool",
        "urllib3.request",
        "urllib3.exceptions",
        "urllib3.util.proxy"
    ],
    "urllib3.poolmanager.PoolManager": [],
    "urllib3.poolmanager.ProxyManager": [],
    "requests.exceptions": [
        "requests.exceptions.InvalidProxyURL",
        "requests.exceptions.RetryError",
        "requests.exceptions.Timeout",
        "requests.exceptions.ConnectTimeout",
        "requests.exceptions.RequestsDependencyWarning",
        "requests.exceptions.TooManyRedirects",
        "requests.exceptions.InvalidHeader",
        "requests.exceptions.HTTPError",
        "urllib3.exceptions",
        "requests.exceptions.InvalidJSONError",
        "requests.exceptions.RequestsWarning",
        "requests.exceptions.MissingSchema",
        "requests.exceptions.InvalidURL",
        "requests.exceptions.ReadTimeout",
        "requests.exceptions.URLRequired",
        "requests.compat",
        "requests.exceptions.JSONDecodeError",
        "requests.exceptions.ConnectionError",
        "requests.exceptions.ChunkedEncodingError",
        "requests.exceptions.UnrewindableBodyError",
        "requests.exceptions.RequestException",
        "requests.exceptions.ProxyError",
        "requests.exceptions.FileModeWarning",
        "requests.exceptions.ContentDecodingError",
        "requests.exceptions.StreamConsumedError",
        "requests.exceptions.InvalidSchema",
        "requests.exceptions.SSLError"
    ],
    "requests.compat": [
        "json",
        "http.cookies",
        "http.cookiejar",
        "io",
        "charset_normalizer",
        "urllib.request",
        "collections",
        "urllib.parse",
        "collections.abc"
    ],
    "charset_normalizer": [
        "logging",
        "charset_normalizer.api",
        "charset_normalizer.legacy",
        "charset_normalizer.models",
        "charset_normalizer.version",
        "logging.getLogger",
        "charset_normalizer.utils",
        "logging.Logger.addHandler"
    ],
    "charset_normalizer.api": [
        "logging",
        "charset_normalizer.cd",
        "logging.Handler.setFormatter",
        "typing",
        "charset_normalizer.md",
        "logging.Formatter.__init__",
        "charset_normalizer.models",
        "posixpath",
        "logging.StreamHandler.__init__",
        "logging.getLogger",
        "os",
        "charset_normalizer.constant",
        "charset_normalizer.utils",
        "warnings"
    ],
    "charset_normalizer.cd": [
        "functools.lru_cache.decorating_function",
        "importlib",
        "functools",
        "typing",
        "collections",
        "charset_normalizer.md",
        "charset_normalizer.models",
        "functools._lru_cache_wrapper.wrapper",
        "codecs",
        "functools.lru_cache",
        "charset_normalizer.constant",
        "charset_normalizer.utils",
        "charset_normalizer.assets"
    ],
    "importlib": [
        "warnings",
        "types"
    ],
    "charset_normalizer.assets": [
        "typing"
    ],
    "charset_normalizer.constant": [
        "<builtin>.int",
        "<map>.values",
        "encodings.aliases",
        "typing",
        "<builtin>.set",
        "<builtin>.range",
        "<builtin>.len",
        "re",
        "codecs",
        "re.compile",
        "<builtin>.sorted",
        "<builtin>.filter",
        "<builtin>.list",
        "charset_normalizer.assets"
    ],
    "<map>.values": [],
    "charset_normalizer.md": [
        "charset_normalizer.md.UnprintablePlugin",
        "charset_normalizer.md.MessDetectorPlugin",
        "functools.lru_cache.decorating_function",
        "charset_normalizer.md.TooManySymbolOrPunctuationPlugin",
        "functools",
        "typing",
        "charset_normalizer.md.SuspiciousDuplicateAccentPlugin",
        "charset_normalizer.md.ArchaicUpperLowerPlugin",
        "charset_normalizer.md.TooManyAccentuatedPlugin",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache",
        "charset_normalizer.md.CjkInvalidStopPlugin",
        "charset_normalizer.constant",
        "charset_normalizer.utils",
        "charset_normalizer.md.SuperWeirdWordPlugin",
        "charset_normalizer.md.SuspiciousRange"
    ],
    "charset_normalizer.utils": [
        "logging",
        "encodings.aliases",
        "importlib",
        "functools.lru_cache.decorating_function",
        "functools",
        "typing",
        "_multibytecodec",
        "<builtin>.len",
        "functools._lru_cache_wrapper.wrapper",
        "re",
        "codecs",
        "functools.lru_cache",
        "charset_normalizer.constant",
        "unicodedata"
    ],
    "_multibytecodec": [],
    "charset_normalizer.md.MessDetectorPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.TooManySymbolOrPunctuationPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.TooManyAccentuatedPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.UnprintablePlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuspiciousDuplicateAccentPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuspiciousRange": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuperWeirdWordPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.CjkInvalidStopPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.ArchaicUpperLowerPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.models": [
        "json",
        "charset_normalizer.models.CharsetMatches",
        "encodings.aliases",
        "typing",
        "collections",
        "charset_normalizer.md",
        "hashlib",
        "re",
        "charset_normalizer.models.CliDetectionResult",
        "charset_normalizer.constant",
        "charset_normalizer.utils",
        "charset_normalizer.models.CharsetMatch",
        "warnings"
    ],
    "json": [
        "codecs",
        "decoder.JSONDecoder",
        "encoder.JSONEncoder"
    ],
    "encoder.JSONEncoder": [],
    "decoder.JSONDecoder": [],
    "charset_normalizer.models.CharsetMatch": [
        "<builtin>.property"
    ],
    "charset_normalizer.models.CharsetMatches": [],
    "charset_normalizer.models.CliDetectionResult": [
        "<builtin>.property"
    ],
    "charset_normalizer.legacy": [
        "charset_normalizer.legacy.CharsetNormalizerMatches",
        "charset_normalizer.api",
        "typing",
        "charset_normalizer.legacy.CharsetNormalizerMatch",
        "charset_normalizer.models",
        "charset_normalizer.legacy.CharsetDetector",
        "charset_normalizer.constant",
        "charset_normalizer.legacy.CharsetDoctor",
        "warnings"
    ],
    "charset_normalizer.legacy.CharsetNormalizerMatch": [],
    "charset_normalizer.legacy.CharsetNormalizerMatches": [
        "<builtin>.staticmethod"
    ],
    "charset_normalizer.legacy.CharsetDetector": [],
    "charset_normalizer.legacy.CharsetDoctor": [],
    "charset_normalizer.version": [
        "<str>.split"
    ],
    "http.cookiejar": [
        "threading",
        "re.compile",
        "<builtin>.str",
        "copy",
        "http.cookiejar.CookiePolicy",
        "http.cookiejar.LoadError",
        "http.cookiejar.MozillaCookieJar",
        "http.cookiejar.CookieJar",
        "http.client",
        "re",
        "http.cookiejar.FileCookieJar",
        "http.cookiejar.DefaultCookiePolicy",
        "<list>.append",
        "http.cookiejar.Cookie",
        "datetime",
        "calendar",
        "http.cookiejar.LWPCookieJar",
        "urllib.request",
        "urllib.parse",
        "os",
        "http.cookiejar.Absent"
    ],
    "urllib.request": [
        "urllib.request.FancyURLopener",
        "io",
        "urllib.request.HTTPHandler",
        "urllib.request.Request",
        "<builtin>.hasattr",
        "nturl2path",
        "re.compile",
        "urllib.request.ProxyDigestAuthHandler",
        "urllib.request.HTTPErrorProcessor",
        "bisect",
        "urllib.request.ProxyBasicAuthHandler",
        "_scproxy",
        "socket",
        "contextlib",
        "ssl",
        "urllib.request.UnknownHandler",
        "urllib.request.HTTPDefaultErrorHandler",
        "urllib.request.AbstractBasicAuthHandler",
        "urllib.request.HTTPPasswordMgr",
        "hashlib",
        "http.client",
        "re",
        "urllib.request.OpenerDirector",
        "urllib.request.DataHandler",
        "email",
        "urllib.request.URLopener",
        "urllib.request.HTTPCookieProcessor",
        "urllib.request.ProxyHandler",
        "urllib.request.HTTPSHandler",
        "urllib.request.AbstractHTTPHandler",
        "urllib.request.FileHandler",
        "urllib.request.AbstractDigestAuthHandler",
        "urllib.request.HTTPRedirectHandler",
        "<list>.append",
        "urllib.request.HTTPPasswordMgrWithPriorAuth",
        "posixpath",
        "urllib.request.HTTPDigestAuthHandler",
        "warnings",
        "urllib.request.BaseHandler",
        "tempfile",
        "urllib.request.FTPHandler",
        "urllib.request.CacheFTPHandler",
        "urllib.request.HTTPBasicAuthHandler",
        "urllib.parse",
        "urllib.request.HTTPPasswordMgrWithDefaultRealm",
        "os",
        "urllib.error",
        "urllib.request.ftpwrapper",
        "string",
        "base64",
        "urllib.response"
    ],
    "http.client": [
        "http.client.HTTPResponse",
        "io",
        "re.compile",
        "email.parser",
        "http.client.LineTooLong",
        "email.message",
        "http.client.CannotSendRequest",
        "http.client.BadStatusLine",
        "ssl",
        "http.client.IncompleteRead",
        "<builtin>.globals",
        "http.client.ResponseNotReady",
        "re",
        "collections.abc",
        "http",
        "http.client.HTTPConnection",
        "http.client.CannotSendHeader",
        "http.client.HTTPMessage",
        "http.client.HTTPException",
        "http.client.ImproperConnectionState",
        "http.client.UnknownProtocol",
        "http.client.NotConnected",
        "http.client.RemoteDisconnected",
        "urllib.parse",
        "http.client.UnknownTransferEncoding",
        "http.client.InvalidURL",
        "socket",
        "http.client.UnimplementedFileMode"
    ],
    "email.parser": [
        "io",
        "email.parser.Parser",
        "email.parser.BytesHeaderParser",
        "email._policybase",
        "email.parser.HeaderParser",
        "email.feedparser",
        "email.parser.BytesParser"
    ],
    "email.feedparser": [
        "io",
        "email.feedparser.BytesFeedParser",
        "email._policybase",
        "email.errors",
        "collections",
        "email.feedparser.FeedParser",
        "<builtin>.object",
        "re",
        "re.compile",
        "email.feedparser.BufferedSubFile"
    ],
    "email._policybase": [
        "email._policybase.Compat32",
        "email._policybase.Policy",
        "email.charset",
        "abc",
        "email._policybase._PolicyBase",
        "email.utils",
        "email.header"
    ],
    "email.header": [
        "email.header.Header",
        "binascii",
        "email.errors",
        "email.header._ValueFormatter",
        "re",
        "email.charset",
        "email.base64mime",
        "re.compile",
        "email.header._Accumulator",
        "email.quoprimime",
        "email.charset.Charset.__init__"
    ],
    "email.charset.Charset.__init__": [
        "<str>.lower",
        "<builtin>.isinstance",
        "<map>.get",
        "<builtin>.str",
        "<str>.encode"
    ],
    "email.header.Header": [],
    "email.header._ValueFormatter": [],
    "email.header._Accumulator": [],
    "email._policybase._PolicyBase": [],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email._policybase.Compat32": [],
    "email.feedparser.BufferedSubFile": [],
    "email.feedparser.FeedParser": [],
    "email.feedparser.BytesFeedParser": [],
    "email.parser.Parser": [],
    "email.parser.HeaderParser": [],
    "email.parser.BytesParser": [],
    "email.parser.BytesHeaderParser": [],
    "email.message": [
        "quopri",
        "email._encoded_words",
        "io",
        "email.message.Message",
        "email._policybase",
        "email.errors",
        "email.message.MIMEPart",
        "email.message.EmailMessage",
        "re",
        "email.charset",
        "re.compile",
        "email.utils",
        "uu"
    ],
    "uu": [
        "binascii",
        "os",
        "uu.Error"
    ],
    "uu.Error": [],
    "email._encoded_words": [
        "binascii",
        "functools",
        "email.errors",
        "email._encoded_words._QByteMap",
        "re",
        "re.compile",
        "<builtin>.ord",
        "string",
        "base64"
    ],
    "email._encoded_words._QByteMap": [
        "<str>.encode"
    ],
    "email.message.Message": [
        "email.iterators"
    ],
    "email.iterators": [
        "io"
    ],
    "email.message.MIMEPart": [],
    "email.message.EmailMessage": [],
    "http": [
        "http.HTTPStatus",
        "enum"
    ],
    "http.HTTPStatus": [],
    "http.client.HTTPMessage": [],
    "http.client.HTTPResponse": [],
    "http.client.HTTPConnection": [
        "<builtin>.staticmethod"
    ],
    "http.client.HTTPException": [],
    "http.client.NotConnected": [],
    "http.client.InvalidURL": [],
    "http.client.UnknownProtocol": [],
    "http.client.UnknownTransferEncoding": [],
    "http.client.UnimplementedFileMode": [],
    "http.client.IncompleteRead": [],
    "http.client.ImproperConnectionState": [],
    "http.client.CannotSendRequest": [],
    "http.client.CannotSendHeader": [],
    "http.client.ResponseNotReady": [],
    "http.client.BadStatusLine": [],
    "http.client.LineTooLong": [],
    "http.client.RemoteDisconnected": [],
    "tempfile": [
        "tempfile.SpooledTemporaryFile",
        "io",
        "shutil",
        "functools",
        "random",
        "weakref",
        "<builtin>.hasattr",
        "tempfile._TemporaryFileCloser",
        "tempfile.TemporaryDirectory",
        "os",
        "tempfile._TemporaryFileWrapper",
        "warnings",
        "tempfile._RandomNameSequence"
    ],
    "shutil": [
        "shutil.RegistryError",
        "zlib",
        "lzma",
        "collections",
        "<builtin>.hasattr",
        "shutil.Error",
        "shutil._GiveupOnFastCopy",
        "<list>.append",
        "bz2",
        "grp",
        "stat",
        "shutil.SameFileError",
        "collections.namedtuple",
        "os",
        "fnmatch",
        "shutil.ExecError",
        "shutil.ReadError",
        "shutil.SpecialFileError"
    ],
    "bz2": [
        "threading",
        "_compression",
        "_bz2",
        "io",
        "bz2.BZ2File",
        "<builtin>.object",
        "os",
        "warnings"
    ],
    "_compression": [
        "_compression.DecompressReader",
        "io",
        "_compression.BaseStream"
    ],
    "_compression.BaseStream": [],
    "_compression.DecompressReader": [],
    "_bz2": [],
    "bz2.BZ2File": [
        "<builtin>.property"
    ],
    "lzma": [
        "_compression",
        "io",
        "lzma.LZMAFile",
        "_lzma",
        "os"
    ],
    "_lzma": [],
    "lzma.LZMAFile": [
        "<builtin>.property"
    ],
    "grp": [],
    "shutil.Error": [],
    "shutil.SameFileError": [],
    "shutil.SpecialFileError": [],
    "shutil.ExecError": [],
    "shutil.ReadError": [],
    "shutil.RegistryError": [],
    "shutil._GiveupOnFastCopy": [],
    "tempfile._RandomNameSequence": [
        "<builtin>.property"
    ],
    "tempfile._TemporaryFileCloser": [],
    "tempfile._TemporaryFileWrapper": [],
    "tempfile.SpooledTemporaryFile": [
        "<builtin>.property"
    ],
    "tempfile.TemporaryDirectory": [
        "<builtin>.classmethod"
    ],
    "urllib.error": [
        "urllib.error.HTTPError",
        "urllib.error.ContentTooShortError",
        "urllib.response",
        "urllib.error.URLError"
    ],
    "urllib.response": [
        "tempfile",
        "urllib.response.addinfo",
        "urllib.response.addinfourl",
        "urllib.response.addclosehook",
        "urllib.response.addbase"
    ],
    "urllib.response.addbase": [],
    "urllib.response.addclosehook": [],
    "urllib.response.addinfo": [],
    "urllib.response.addinfourl": [],
    "urllib.error.URLError": [],
    "urllib.error.HTTPError": [
        "<builtin>.property"
    ],
    "urllib.error.ContentTooShortError": [],
    "urllib.request.Request": [
        "<builtin>.property"
    ],
    "urllib.request.OpenerDirector": [],
    "urllib.request.BaseHandler": [],
    "urllib.request.HTTPErrorProcessor": [],
    "urllib.request.HTTPDefaultErrorHandler": [],
    "urllib.request.HTTPRedirectHandler": [],
    "urllib.request.ProxyHandler": [],
    "urllib.request.HTTPPasswordMgr": [],
    "urllib.request.HTTPPasswordMgrWithDefaultRealm": [],
    "urllib.request.HTTPPasswordMgrWithPriorAuth": [],
    "urllib.request.AbstractBasicAuthHandler": [
        "re.compile"
    ],
    "urllib.request.HTTPBasicAuthHandler": [],
    "urllib.request.ProxyBasicAuthHandler": [],
    "urllib.request.AbstractDigestAuthHandler": [],
    "urllib.request.HTTPDigestAuthHandler": [],
    "urllib.request.ProxyDigestAuthHandler": [],
    "urllib.request.AbstractHTTPHandler": [],
    "urllib.request.HTTPHandler": [],
    "urllib.request.HTTPSHandler": [],
    "urllib.request.HTTPCookieProcessor": [],
    "urllib.request.UnknownHandler": [],
    "urllib.request.FileHandler": [],
    "urllib.request.FTPHandler": [],
    "urllib.request.CacheFTPHandler": [],
    "urllib.request.DataHandler": [],
    "nturl2path": [],
    "urllib.request.URLopener": [],
    "urllib.request.FancyURLopener": [],
    "urllib.request.ftpwrapper": [],
    "_scproxy": [],
    "http.cookiejar.Cookie": [],
    "http.cookiejar.CookiePolicy": [],
    "http.cookiejar.DefaultCookiePolicy": [],
    "http.cookiejar.Absent": [],
    "http.cookiejar.CookieJar": [
        "re.compile"
    ],
    "http.cookiejar.LoadError": [],
    "http.cookiejar.FileCookieJar": [],
    "http.cookiejar.LWPCookieJar": [],
    "http.cookiejar.MozillaCookieJar": [
        "re.compile"
    ],
    "http.cookies": [
        "<builtin>.map",
        "http.cookies.BaseCookie",
        "<builtin>.set",
        "http.cookies.CookieError",
        "<builtin>.range",
        "re",
        "<builtin>.ord",
        "re.escape",
        "re.compile",
        "http.cookies.Morsel",
        "string",
        "http.cookies.SimpleCookie"
    ],
    "http.cookies.CookieError": [],
    "http.cookies.Morsel": [
        "<builtin>.property"
    ],
    "http.cookies.BaseCookie": [],
    "http.cookies.SimpleCookie": [],
    "requests.exceptions.RequestException": [],
    "requests.exceptions.InvalidJSONError": [],
    "requests.exceptions.JSONDecodeError": [],
    "requests.exceptions.HTTPError": [],
    "requests.exceptions.ConnectionError": [],
    "requests.exceptions.ProxyError": [],
    "requests.exceptions.SSLError": [],
    "requests.exceptions.Timeout": [],
    "requests.exceptions.ConnectTimeout": [],
    "requests.exceptions.ReadTimeout": [],
    "requests.exceptions.URLRequired": [],
    "requests.exceptions.TooManyRedirects": [],
    "requests.exceptions.MissingSchema": [],
    "requests.exceptions.InvalidSchema": [],
    "requests.exceptions.InvalidURL": [],
    "requests.exceptions.InvalidHeader": [],
    "requests.exceptions.InvalidProxyURL": [],
    "requests.exceptions.ChunkedEncodingError": [],
    "requests.exceptions.ContentDecodingError": [],
    "requests.exceptions.StreamConsumedError": [],
    "requests.exceptions.RetryError": [],
    "requests.exceptions.UnrewindableBodyError": [],
    "requests.exceptions.RequestsWarning": [],
    "requests.exceptions.FileModeWarning": [],
    "requests.exceptions.RequestsDependencyWarning": [],
    "requests.check_compatibility": [
        "<builtin>.len",
        "<builtin>.int",
        "<builtin>.Exception",
        "<str>.split"
    ],
    "urllib3.contrib.pyopenssl": [
        "io",
        "<builtin>.hasattr",
        "urllib3",
        "urllib3.util.ssl_",
        "logging.getLogger",
        "cryptography.hazmat.backends.openssl.x509",
        "ssl",
        "urllib3.contrib.pyopenssl.WrappedSocket",
        "<builtin>.dict",
        "cryptography.x509",
        "__future__",
        "logging",
        "urllib3.contrib.pyopenssl.PyOpenSSLContext",
        "warnings",
        "warnings.warn",
        "urllib3.packages.six",
        "urllib3.packages.backports.makefile",
        "cryptography.hazmat.backends.openssl.backend",
        "urllib3.contrib.pyopenssl.UnsupportedExtension",
        "<map>.items",
        "socket"
    ],
    "cryptography.x509": [
        "cryptography.x509.certificate_transparency",
        "cryptography.x509.base",
        "cryptography.x509.name",
        "cryptography.x509.oid",
        "cryptography.x509.general_name",
        "cryptography.x509.extensions"
    ],
    "cryptography.x509.certificate_transparency": [
        "cryptography.x509.certificate_transparency.SignatureAlgorithm",
        "cryptography.x509.certificate_transparency.Version",
        "cryptography.x509.certificate_transparency.SignedCertificateTimestamp",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.x509.certificate_transparency.LogEntryType",
        "datetime",
        "cryptography.hazmat.bindings._rust",
        "abc",
        "cryptography.utils"
    ],
    "cryptography.utils": [
        "inspect",
        "cryptography.utils.InterfaceNotImplemented",
        "enum",
        "typing",
        "cryptography.utils._DeprecatedValue",
        "cryptography.utils._ModuleWithDeprecations",
        "cryptography.utils.Enum",
        "abc",
        "cryptography.utils.CryptographyDeprecationWarning",
        "warnings",
        "types"
    ],
    "cryptography.utils.CryptographyDeprecationWarning": [],
    "cryptography.utils.InterfaceNotImplemented": [],
    "cryptography.utils._DeprecatedValue": [],
    "cryptography.utils._ModuleWithDeprecations": [],
    "cryptography.utils.Enum": [],
    "cryptography.hazmat.bindings._rust": [],
    "cryptography.hazmat.primitives.hashes": [
        "cryptography.hazmat.primitives.hashes.BLAKE2s",
        "cryptography.hazmat.primitives.hashes.SHA3_224",
        "cryptography.hazmat.primitives.hashes.SHA512_224",
        "cryptography.hazmat.primitives.hashes.ExtendableOutputFunction",
        "cryptography.hazmat.primitives.hashes.SHA3_256",
        "cryptography.hazmat.primitives.hashes.Hash",
        "cryptography.hazmat.primitives.hashes.SHA1",
        "cryptography.utils",
        "cryptography.hazmat.primitives.hashes.MD5",
        "cryptography.hazmat.primitives.hashes.SM3",
        "cryptography.hazmat.primitives.hashes.SHAKE128",
        "cryptography.hazmat.primitives.hashes.BLAKE2b",
        "typing",
        "cryptography.hazmat.primitives.hashes.SHA384",
        "cryptography.hazmat.primitives.hashes.SHA224",
        "cryptography.hazmat.primitives.hashes.SHA3_512",
        "cryptography.hazmat.primitives.hashes.SHAKE256",
        "cryptography.hazmat.primitives.hashes.SHA512",
        "cryptography.exceptions",
        "abc",
        "cryptography.hazmat.primitives.hashes.HashAlgorithm",
        "cryptography.hazmat.primitives.hashes.SHA256",
        "cryptography.hazmat.primitives.hashes.SHA512_256",
        "cryptography.hazmat.primitives.hashes.SHA3_384",
        "cryptography.hazmat.primitives.hashes.HashContext"
    ],
    "cryptography.exceptions": [
        "cryptography.exceptions.NotYetFinalized",
        "cryptography.exceptions.AlreadyFinalized",
        "typing",
        "cryptography.exceptions.AlreadyUpdated",
        "cryptography.exceptions.InvalidTag",
        "cryptography.exceptions.InvalidKey",
        "cryptography.exceptions.InvalidSignature",
        "cryptography.exceptions.InternalError",
        "cryptography.hazmat.bindings.openssl.binding",
        "cryptography.utils",
        "cryptography.exceptions._Reasons",
        "cryptography.exceptions.UnsupportedAlgorithm"
    ],
    "cryptography.hazmat.bindings.openssl.binding": [
        "threading",
        "cryptography.hazmat.bindings.openssl.binding.Binding",
        "cryptography.hazmat.bindings.openssl.binding._verify_openssl_version",
        "cryptography.hazmat.bindings.openssl.binding.Binding.init_static_locks",
        "typing",
        "cryptography",
        "cryptography.hazmat.bindings.openssl.binding._OpenSSLError",
        "cryptography.hazmat.bindings.openssl.binding._verify_package_version",
        "cryptography.hazmat.bindings.openssl._conditional",
        "cryptography.utils",
        "warnings",
        "cryptography.hazmat.bindings._openssl",
        "types",
        "cryptography.exceptions"
    ],
    "cryptography": [
        "cryptography.__about__",
        "warnings.warn",
        "cryptography.utils",
        "warnings"
    ],
    "cryptography.__about__": [],
    "cryptography.hazmat.bindings._openssl": [],
    "cryptography.hazmat.bindings.openssl._conditional": [
        "typing"
    ],
    "cryptography.hazmat.bindings.openssl.binding._OpenSSLError": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.bindings.openssl.binding._verify_package_version": [
        "<builtin>.ImportError",
        "<str>.encode"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding.init_static_locks": [
        "cryptography.hazmat.bindings.openssl.binding.Binding._ensure_ffi_initialized"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding._ensure_ffi_initialized": [],
    "cryptography.hazmat.bindings.openssl.binding._verify_openssl_version": [
        "warnings.warn"
    ],
    "cryptography.exceptions._Reasons": [],
    "cryptography.exceptions.UnsupportedAlgorithm": [],
    "cryptography.exceptions.AlreadyFinalized": [],
    "cryptography.exceptions.AlreadyUpdated": [],
    "cryptography.exceptions.NotYetFinalized": [],
    "cryptography.exceptions.InvalidTag": [],
    "cryptography.exceptions.InvalidSignature": [],
    "cryptography.exceptions.InternalError": [],
    "cryptography.exceptions.InvalidKey": [],
    "cryptography.hazmat.primitives.hashes.HashAlgorithm": [],
    "cryptography.hazmat.primitives.hashes.HashContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.hashes.ExtendableOutputFunction": [],
    "cryptography.hazmat.primitives.hashes.Hash": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.SHA1": [],
    "cryptography.hazmat.primitives.hashes.SHA512_224": [],
    "cryptography.hazmat.primitives.hashes.SHA512_256": [],
    "cryptography.hazmat.primitives.hashes.SHA224": [],
    "cryptography.hazmat.primitives.hashes.SHA256": [],
    "cryptography.hazmat.primitives.hashes.SHA384": [],
    "cryptography.hazmat.primitives.hashes.SHA512": [],
    "cryptography.hazmat.primitives.hashes.SHA3_224": [],
    "cryptography.hazmat.primitives.hashes.SHA3_256": [],
    "cryptography.hazmat.primitives.hashes.SHA3_384": [],
    "cryptography.hazmat.primitives.hashes.SHA3_512": [],
    "cryptography.hazmat.primitives.hashes.SHAKE128": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.SHAKE256": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.MD5": [],
    "cryptography.hazmat.primitives.hashes.BLAKE2b": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.BLAKE2s": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.SM3": [],
    "cryptography.x509.certificate_transparency.LogEntryType": [],
    "cryptography.x509.certificate_transparency.Version": [],
    "cryptography.x509.certificate_transparency.SignatureAlgorithm": [],
    "cryptography.x509.certificate_transparency.SignedCertificateTimestamp": [],
    "cryptography.x509.base": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.x509.base.Version",
        "cryptography.x509.base.AttributeNotFound",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.x509.base.Attributes",
        "cryptography.utils",
        "cryptography.x509.base.Attribute",
        "cryptography.x509.base.CertificateSigningRequestBuilder",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.x509.base.CertificateBuilder",
        "cryptography.x509.base.CertificateRevocationListBuilder",
        "cryptography.x509.base.CertificateSigningRequest",
        "cryptography.x509.base.Certificate",
        "cryptography.x509.base._RawRevokedCertificate",
        "cryptography.x509.base.RevokedCertificateBuilder",
        "cryptography.x509.oid",
        "datetime",
        "cryptography.hazmat.bindings._rust",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.x509.base.CertificateRevocationList",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.x509.name",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.x509.base.RevokedCertificate",
        "cryptography.x509.base.InvalidVersion",
        "cryptography.x509.extensions",
        "os",
        "cryptography.hazmat.primitives.asymmetric.ed25519"
    ],
    "cryptography.hazmat.primitives.serialization": [
        "cryptography.hazmat.primitives.serialization.base",
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat.primitives.serialization.ssh"
    ],
    "cryptography.hazmat.primitives._serialization": [
        "cryptography.hazmat.primitives._serialization.PBES",
        "cryptography.hazmat.primitives._serialization.Encoding",
        "typing",
        "cryptography.hazmat.primitives._serialization.BestAvailableEncryption",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives._serialization.ParameterFormat",
        "cryptography.hazmat.primitives._serialization.NoEncryption",
        "cryptography.hazmat.primitives._serialization._KeySerializationEncryption",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder",
        "abc",
        "cryptography.hazmat.primitives._serialization.PrivateFormat",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryption",
        "cryptography.utils",
        "cryptography.hazmat.primitives._serialization.PublicFormat"
    ],
    "cryptography.hazmat.primitives._serialization.PBES": [],
    "cryptography.hazmat.primitives._serialization.Encoding": [],
    "cryptography.hazmat.primitives._serialization.PrivateFormat": [],
    "cryptography.hazmat.primitives._serialization.PublicFormat": [],
    "cryptography.hazmat.primitives._serialization.ParameterFormat": [],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryption": [],
    "cryptography.hazmat.primitives._serialization.BestAvailableEncryption": [],
    "cryptography.hazmat.primitives._serialization.NoEncryption": [],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder": [],
    "cryptography.hazmat.primitives._serialization._KeySerializationEncryption": [],
    "cryptography.hazmat.primitives.serialization.base": [
        "cryptography.hazmat.primitives.asymmetric.dh",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.types"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh": [
        "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers",
        "cryptography.hazmat.primitives._serialization",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers",
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameters"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameters": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.types": [
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "cryptography.hazmat.primitives.asymmetric.dh",
        "cryptography.hazmat.primitives.asymmetric.dsa"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa": [
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey",
        "cryptography.hazmat.primitives._serialization",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameters",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.utils"
    ],
    "cryptography.hazmat.primitives.asymmetric.utils": [
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.utils.Prehashed",
        "cryptography.hazmat.bindings._rust"
    ],
    "cryptography.hazmat.primitives.asymmetric.utils.Prehashed": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameters": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec": [
        "cryptography.hazmat.primitives.asymmetric.ec.SECP256K1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1",
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT283K1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1",
        "cryptography.hazmat._oid",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.utils",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP512R1",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve",
        "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP256R1",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1",
        "warnings",
        "cryptography.hazmat.primitives.asymmetric.ec.ECDH",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP384R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT571R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT163R2"
    ],
    "cryptography.hazmat._oid": [
        "cryptography.hazmat._oid.CRLEntryExtensionOID",
        "cryptography.hazmat._oid.ExtensionOID",
        "cryptography.hazmat._oid.SubjectInformationAccessOID",
        "cryptography.hazmat._oid.AttributeOID",
        "cryptography.hazmat._oid.SignatureAlgorithmOID",
        "typing",
        "cryptography.hazmat._oid.NameOID",
        "cryptography.hazmat._oid.OCSPExtensionOID",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat._oid.AuthorityInformationAccessOID",
        "cryptography.hazmat._oid.CertificatePoliciesOID",
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat._oid.ExtendedKeyUsageOID"
    ],
    "cryptography.hazmat._oid.ExtensionOID": [],
    "cryptography.hazmat._oid.OCSPExtensionOID": [],
    "cryptography.hazmat._oid.CRLEntryExtensionOID": [],
    "cryptography.hazmat._oid.NameOID": [],
    "cryptography.hazmat._oid.SignatureAlgorithmOID": [],
    "cryptography.hazmat._oid.ExtendedKeyUsageOID": [],
    "cryptography.hazmat._oid.AuthorityInformationAccessOID": [],
    "cryptography.hazmat._oid.SubjectInformationAccessOID": [],
    "cryptography.hazmat._oid.CertificatePoliciesOID": [],
    "cryptography.hazmat._oid.AttributeOID": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT571R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT163R2": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT283K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP256K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP256R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP384R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP512R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.ECDSA": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.ECDH": [],
    "cryptography.hazmat.primitives.asymmetric.ed25519": [
        "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey",
        "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey",
        "cryptography.hazmat.primitives._serialization",
        "abc",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448": [
        "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey",
        "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey",
        "cryptography.hazmat.primitives._serialization",
        "abc",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa": [
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers",
        "cryptography.hazmat.primitives._serialization",
        "typing",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.primitives._asymmetric",
        "math"
    ],
    "cryptography.hazmat.primitives._asymmetric": [
        "cryptography.hazmat.primitives._asymmetric.AsymmetricPadding",
        "abc"
    ],
    "cryptography.hazmat.primitives._asymmetric.AsymmetricPadding": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519": [
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey",
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey",
        "abc",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448": [
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.serialization.ssh": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA",
        "re.compile",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.ciphers",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA",
        "cryptography.utils",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.__init__",
        "bcrypt",
        "typing",
        "cryptography.hazmat.primitives.ciphers.modes",
        "re",
        "<builtin>.memoryview",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.serialization.ssh._FragList",
        "<builtin>.range",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "<builtin>.bytearray",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "binascii",
        "os",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "base64",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA"
    ],
    "cryptography.hazmat.primitives.ciphers": [
        "cryptography.hazmat.primitives._cipheralgorithm",
        "cryptography.hazmat.primitives.ciphers.base"
    ],
    "cryptography.hazmat.primitives._cipheralgorithm": [
        "cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm",
        "typing",
        "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm",
        "abc"
    ],
    "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm": [],
    "cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm": [],
    "cryptography.hazmat.primitives.ciphers.base": [
        "cryptography.hazmat.backends.openssl.ciphers",
        "cryptography.hazmat.primitives._cipheralgorithm",
        "typing",
        "cryptography.hazmat.primitives.ciphers.base.AEADCipherContext",
        "cryptography.hazmat.primitives.ciphers.modes",
        "cryptography.hazmat.primitives.ciphers.base.Cipher",
        "typing.TypeVar.__init__",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext",
        "cryptography.hazmat.primitives.ciphers.base._AEADEncryptionContext",
        "cryptography.hazmat.primitives.ciphers.base.AEADDecryptionContext",
        "abc",
        "cryptography.hazmat.primitives.ciphers.base._AEADDecryptionContext",
        "cryptography.hazmat.primitives.ciphers.base.CipherContext",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext",
        "cryptography.hazmat.primitives.ciphers.base.AEADEncryptionContext",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.primitives.ciphers.modes": [
        "cryptography.hazmat.primitives.ciphers.modes.CBC",
        "cryptography.hazmat.primitives.ciphers.modes.GCM",
        "cryptography.utils",
        "cryptography.hazmat.primitives.ciphers.modes.Mode",
        "cryptography.hazmat.primitives.ciphers.modes.ECB",
        "cryptography.hazmat.primitives.ciphers.modes.CFB",
        "typing",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.ciphers.modes.OFB",
        "cryptography.hazmat.primitives._cipheralgorithm",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce",
        "abc",
        "cryptography.hazmat.primitives.ciphers.modes.CFB8",
        "cryptography.hazmat.primitives.ciphers.modes.XTS",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithInitializationVector",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithTweak",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithAuthenticationTag",
        "cryptography.hazmat.primitives.ciphers.modes.CTR"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms": [
        "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES256",
        "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20",
        "cryptography.utils.deprecated",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES128",
        "cryptography.hazmat.primitives.ciphers.algorithms.SEED",
        "cryptography.hazmat.primitives.ciphers.algorithms.ARC4",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES",
        "cryptography.hazmat.primitives.ciphers",
        "cryptography.hazmat.primitives.ciphers.algorithms.Camellia",
        "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES",
        "cryptography.hazmat.primitives.ciphers.algorithms.CAST5",
        "cryptography.hazmat.primitives.ciphers.algorithms.IDEA",
        "cryptography.hazmat.primitives.ciphers.algorithms.SM4",
        "cryptography.utils"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES128": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES256": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Camellia": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish": [
        "<builtin>.frozenset",
        "<builtin>.property",
        "<builtin>.range"
    ],
    "cryptography.utils.deprecated": [
        "cryptography.utils._ModuleWithDeprecations.__init__",
        "<builtin>.setattr",
        "cryptography.utils._DeprecatedValue.__init__",
        "<builtin>.isinstance"
    ],
    "cryptography.utils._ModuleWithDeprecations.__init__": [
        "<builtin>.super"
    ],
    "cryptography.utils._DeprecatedValue.__init__": [],
    "cryptography.hazmat.primitives.ciphers.algorithms.CAST5": [
        "<builtin>.frozenset",
        "<builtin>.property",
        "<builtin>.range"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ARC4": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.IDEA": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SEED": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SM4": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.Mode": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithInitializationVector": [],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithTweak": [],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce": [],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithAuthenticationTag": [],
    "cryptography.hazmat.primitives.ciphers.modes.CBC": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.XTS": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ECB": [],
    "cryptography.hazmat.primitives.ciphers.modes.OFB": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CFB": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CFB8": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CTR": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.GCM": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.ciphers": [
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.primitives.ciphers.modes",
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext",
        "cryptography.hazmat.primitives.ciphers",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.backends.openssl.backend": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.dsa",
        "cryptography.hazmat.primitives.asymmetric.padding",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "cryptography.hazmat.backends.openssl.backend._RC2",
        "cryptography.hazmat.backends.openssl.rsa",
        "collections.namedtuple",
        "cryptography.hazmat.backends.openssl.backend.Backend",
        "cryptography.hazmat.backends.openssl.backend.GetCipherByName",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.ciphers",
        "cryptography.utils",
        "cryptography.hazmat.backends.openssl.ec",
        "cryptography.hazmat.primitives.kdf.scrypt",
        "contextlib",
        "cryptography.hazmat.primitives.serialization.pkcs7",
        "typing",
        "cryptography.x509",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.hazmat.primitives.ciphers.modes",
        "cryptography.hazmat.backends.openssl.hashes",
        "cryptography.hazmat.backends.openssl.dh",
        "cryptography.hazmat.backends.openssl.hmac",
        "cryptography.hazmat.bindings.openssl.binding",
        "cryptography.hazmat.primitives._asymmetric",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.ciphers",
        "cryptography.hazmat.backends.openssl.ed25519",
        "cryptography.hazmat.primitives.serialization.ssh",
        "cryptography.hazmat.primitives.serialization.pkcs12",
        "cryptography.hazmat.backends.openssl.x448",
        "cryptography.hazmat.backends.openssl.ed448",
        "cryptography.hazmat.backends.openssl.aead",
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "warnings",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.backends.openssl.backend.Backend.__init__",
        "collections",
        "cryptography.hazmat.backends.openssl.cmac",
        "cryptography.hazmat.backends.openssl.x25519",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.primitives.asymmetric.dh",
        "cryptography.hazmat.backends.openssl.poly1305"
    ],
    "cryptography.hazmat.backends.openssl.aead": [
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.primitives.ciphers.aead",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.primitives.ciphers.aead": [
        "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305",
        "cryptography.hazmat.primitives.ciphers.aead.AESGCM",
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.primitives.ciphers.aead.AESSIV",
        "cryptography.hazmat.backends.openssl.aead",
        "os",
        "cryptography.hazmat.primitives.ciphers.aead.AESCCM",
        "cryptography.utils",
        "cryptography.hazmat.primitives.ciphers.aead.AESOCB3",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESGCM": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESOCB3": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESSIV": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.backends.openssl.cmac": [
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.backends.openssl.cmac._CMACContext",
        "cryptography.hazmat.primitives.ciphers.modes",
        "cryptography.hazmat.primitives.ciphers",
        "cryptography.hazmat.primitives.constant_time",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.primitives.constant_time": [
        "hmac"
    ],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext": [],
    "cryptography.hazmat.backends.openssl.dh": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.dh._DHPublicKey",
        "cryptography.hazmat.backends.openssl.dh._DHParameters",
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey",
        "cryptography.hazmat.primitives.asymmetric.dh",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHParameters": [],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPublicKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.dsa": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey",
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey",
        "cryptography.hazmat.backends.openssl.dsa._DSAParameters",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.backends.openssl.utils",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.backends.openssl.utils": [
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "typing",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAParameters": [],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.ec": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey",
        "cryptography.hazmat.backends.openssl.utils",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.ed25519": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey",
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PublicKey": [],
    "cryptography.hazmat.backends.openssl.ed25519._Ed25519PrivateKey": [],
    "cryptography.hazmat.backends.openssl.ed448": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "typing",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey",
        "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PublicKey": [],
    "cryptography.hazmat.backends.openssl.ed448._Ed448PrivateKey": [],
    "cryptography.hazmat.backends.openssl.hashes": [
        "cryptography.hazmat.backends.openssl.hashes._HashContext",
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.hmac": [
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.backends.openssl.hmac._HMACContext",
        "cryptography.hazmat.primitives.constant_time",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.backends.openssl.hmac._HMACContext": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.poly1305": [
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context",
        "cryptography.hazmat.primitives.constant_time",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context": [],
    "cryptography.hazmat.backends.openssl.rsa": [
        "threading",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.asymmetric.padding",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey",
        "typing",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey",
        "cryptography.hazmat.backends.openssl.utils",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding": [
        "cryptography.hazmat.primitives.asymmetric.padding.MGF",
        "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15",
        "cryptography.hazmat.primitives.asymmetric.padding.MGF1",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.padding._Auto",
        "cryptography.hazmat.primitives.asymmetric.padding._DigestLength",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.padding.PSS",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.padding.OAEP",
        "cryptography.hazmat.primitives._asymmetric",
        "cryptography.hazmat.primitives.asymmetric.padding._MaxLength"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15": [],
    "cryptography.hazmat.primitives.asymmetric.padding._MaxLength": [],
    "cryptography.hazmat.primitives.asymmetric.padding._Auto": [],
    "cryptography.hazmat.primitives.asymmetric.padding._DigestLength": [],
    "cryptography.hazmat.primitives.asymmetric.padding.PSS": [],
    "cryptography.hazmat.primitives.asymmetric.padding.OAEP": [],
    "cryptography.hazmat.primitives.asymmetric.padding.MGF": [],
    "cryptography.hazmat.primitives.asymmetric.padding.MGF1": [],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.x25519": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey",
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey",
        "cryptography.hazmat.backends.openssl.utils"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey": [],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey": [],
    "cryptography.hazmat.backends.openssl.x448": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.x448._X448PublicKey",
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey",
        "cryptography.hazmat.backends.openssl.backend",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "cryptography.hazmat.backends.openssl.utils"
    ],
    "cryptography.hazmat.backends.openssl.x448._X448PublicKey": [],
    "cryptography.hazmat.backends.openssl.x448._X448PrivateKey": [],
    "cryptography.hazmat.primitives.kdf.scrypt": [
        "typing",
        "cryptography.hazmat.primitives.kdf.scrypt.Scrypt",
        "cryptography.hazmat.primitives.constant_time",
        "cryptography.utils",
        "cryptography.hazmat.primitives.kdf",
        "cryptography.exceptions"
    ],
    "cryptography.hazmat.primitives.kdf": [
        "abc",
        "cryptography.hazmat.primitives.kdf.KeyDerivationFunction"
    ],
    "cryptography.hazmat.primitives.kdf.KeyDerivationFunction": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.kdf.scrypt.Scrypt": [],
    "cryptography.hazmat.primitives.serialization.pkcs7": [
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "typing",
        "cryptography.x509",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7Options",
        "cryptography.utils"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7Options": [],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder": [],
    "cryptography.hazmat.primitives.serialization.pkcs12": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "cryptography.hazmat.primitives._serialization",
        "typing",
        "cryptography.x509",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.backend._RC2": [],
    "cryptography.hazmat.backends.openssl.backend.Backend": [
        "contextlib.contextmanager"
    ],
    "cryptography.hazmat.backends.openssl.backend.GetCipherByName": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.__init__": [
        "warnings.warn",
        "cryptography.hazmat.backends.openssl.backend.Backend._is_fips_enabled",
        "cryptography.hazmat.backends.openssl.backend.Backend.activate_osrandom_engine",
        "cryptography.hazmat.bindings.openssl.binding.Binding.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._register_default_ciphers"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding.__init__": [
        "cryptography.hazmat.bindings.openssl.binding.Binding._ensure_ffi_initialized"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._is_fips_enabled": [
        "<builtin>.bool",
        "<builtin>.getattr"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._register_default_ciphers": [
        "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__init__",
        "<builtin>.type",
        "cryptography.hazmat.backends.openssl.backend.Backend.register_cipher_adapter"
    ],
    "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__init__": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.register_cipher_adapter": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.activate_osrandom_engine": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._get_osurandom_engine",
        "cryptography.hazmat.backends.openssl.backend.Backend.activate_builtin_random"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.activate_builtin_random": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert": [
        "cryptography.hazmat.bindings.openssl.binding._openssl_assert"
    ],
    "cryptography.hazmat.bindings.openssl.binding._openssl_assert": [
        "cryptography.hazmat.bindings.openssl.binding._errors_with_text",
        "cryptography.exceptions.InternalError.__init__",
        "cryptography.hazmat.bindings.openssl.binding._consume_errors"
    ],
    "cryptography.hazmat.bindings.openssl.binding._consume_errors": [
        "<list>.append"
    ],
    "cryptography.hazmat.bindings.openssl.binding._errors_with_text": [
        "<list>.append",
        "<builtin>.len"
    ],
    "cryptography.exceptions.InternalError.__init__": [
        "<builtin>.super"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._get_osurandom_engine": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.base.CipherContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADCipherContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADDecryptionContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADEncryptionContext": [],
    "cryptography.hazmat.primitives.ciphers.base.Cipher": [
        "typing.overload"
    ],
    "cryptography.hazmat.primitives.ciphers.base._CipherContext": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADDecryptionContext": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADEncryptionContext": [
        "<builtin>.property"
    ],
    "bcrypt": [
        "bcrypt.__about__",
        "__future__",
        "bcrypt._bcrypt",
        "os",
        "hmac",
        "warnings"
    ],
    "bcrypt.__about__": [
        "__future__"
    ],
    "bcrypt._bcrypt": [],
    "cryptography.hazmat.primitives.serialization.ssh._FragList": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.__init__": [],
    "cryptography.x509.extensions": [
        "cryptography.hazmat.primitives.serialization",
        "cryptography.x509.extensions.Extensions",
        "cryptography.x509.extensions.SignedCertificateTimestamps",
        "cryptography.x509.extensions.IssuingDistributionPoint",
        "cryptography.x509.extensions.CRLDistributionPoints",
        "cryptography.x509.extensions.InhibitAnyPolicy",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.x509.extensions.InvalidityDate",
        "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps",
        "cryptography.utils",
        "cryptography.x509.extensions.SubjectKeyIdentifier",
        "cryptography.x509.extensions.AccessDescription",
        "cryptography.x509.extensions.DeltaCRLIndicator",
        "cryptography.x509.extensions.AuthorityInformationAccess",
        "ipaddress",
        "cryptography.x509.extensions.BasicConstraints",
        "cryptography.x509.extensions.FreshestCRL",
        "cryptography.x509.extensions.UserNotice",
        "typing",
        "cryptography.x509.extensions.NameConstraints",
        "cryptography.x509.extensions.Extension",
        "cryptography.x509.extensions.CRLReason",
        "hashlib",
        "cryptography.x509.extensions.DuplicateExtension",
        "cryptography.x509.extensions.ExtendedKeyUsage",
        "cryptography.x509.extensions.KeyUsage",
        "cryptography.x509.extensions.AuthorityKeyIdentifier",
        "cryptography.x509.extensions.ReasonFlags",
        "cryptography.x509.extensions.PolicyInformation",
        "cryptography.x509.extensions.DistributionPoint",
        "cryptography.x509.oid",
        "cryptography.x509.extensions.CRLNumber",
        "cryptography.x509.extensions.OCSPNonce",
        "cryptography.x509.extensions.SubjectInformationAccess",
        "cryptography.x509.general_name",
        "datetime",
        "cryptography.hazmat.bindings._rust",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.x509.extensions.ExtensionNotFound",
        "cryptography.hazmat.primitives.constant_time",
        "cryptography.x509.extensions.CertificatePolicies",
        "cryptography.x509.extensions.PrecertPoison",
        "cryptography.x509.extensions.IssuerAlternativeName",
        "cryptography.x509.extensions.UnrecognizedExtension",
        "cryptography.x509.certificate_transparency",
        "cryptography.x509.name",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.x509.extensions.CertificateIssuer",
        "cryptography.x509.extensions.ExtensionType",
        "cryptography.x509.extensions.SubjectAlternativeName",
        "cryptography.x509.extensions.GeneralNames",
        "cryptography.x509.extensions.TLSFeatureType",
        "cryptography.x509.extensions.NoticeReference",
        "cryptography.x509.extensions.PolicyConstraints",
        "cryptography.x509.extensions.TLSFeature",
        "typing.TypeVar.__init__",
        "cryptography.x509.extensions.OCSPNoCheck"
    ],
    "cryptography.x509.general_name": [
        "cryptography.x509.oid",
        "cryptography.x509.name",
        "cryptography.x509.general_name.UniformResourceIdentifier",
        "ipaddress",
        "cryptography.x509.general_name.DirectoryName",
        "cryptography.x509.general_name.IPAddress",
        "cryptography.x509.general_name.UnsupportedGeneralNameType",
        "typing",
        "cryptography.x509.general_name.DNSName",
        "cryptography.x509.general_name.OtherName",
        "cryptography.x509.general_name.RegisteredID",
        "abc",
        "cryptography.x509.general_name.RFC822Name",
        "email.utils",
        "cryptography.x509.general_name.GeneralName"
    ],
    "cryptography.x509.name": [
        "cryptography.x509.oid",
        "binascii",
        "cryptography.x509.name.NameAttribute",
        "typing",
        "cryptography.x509.name.Name",
        "cryptography.x509.name.RelativeDistinguishedName",
        "re",
        "cryptography.hazmat.bindings._rust",
        "cryptography.x509.name._ASN1Type",
        "cryptography.utils",
        "warnings",
        "cryptography.x509.name._RFC4514NameParser"
    ],
    "cryptography.x509.oid": [
        "cryptography.hazmat._oid"
    ],
    "cryptography.x509.name._ASN1Type": [],
    "cryptography.x509.name.NameAttribute": [
        "<builtin>.property"
    ],
    "cryptography.x509.name.RelativeDistinguishedName": [],
    "cryptography.x509.name.Name": [
        "typing.overload",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "cryptography.x509.name._RFC4514NameParser": [
        "<builtin>.chr",
        "re.compile"
    ],
    "cryptography.x509.general_name.UnsupportedGeneralNameType": [],
    "cryptography.x509.general_name.GeneralName": [],
    "cryptography.x509.general_name.RFC822Name": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "cryptography.x509.general_name.DNSName": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "cryptography.x509.general_name.UniformResourceIdentifier": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "cryptography.x509.general_name.DirectoryName": [
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.RegisteredID": [
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.IPAddress": [
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.OtherName": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.DuplicateExtension": [],
    "cryptography.x509.extensions.ExtensionNotFound": [],
    "cryptography.x509.extensions.ExtensionType": [],
    "cryptography.x509.extensions.Extensions": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions._make_sequence_methods": [],
    "cryptography.x509.extensions.CRLNumber": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "cryptography.x509.extensions.SubjectKeyIdentifier": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "cryptography.x509.extensions.AuthorityInformationAccess": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SubjectInformationAccess": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.AccessDescription": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.BasicConstraints": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.DeltaCRLIndicator": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.CRLDistributionPoints": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.FreshestCRL": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.DistributionPoint": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.ReasonFlags": [],
    "cryptography.x509.extensions.PolicyConstraints": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.CertificatePolicies": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.PolicyInformation": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.UserNotice": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.NoticeReference": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.ExtendedKeyUsage": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.OCSPNoCheck": [],
    "cryptography.x509.extensions.PrecertPoison": [],
    "cryptography.x509.extensions.TLSFeature": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.TLSFeatureType": [],
    "cryptography.x509.extensions.InhibitAnyPolicy": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.KeyUsage": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.NameConstraints": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.Extension": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.GeneralNames": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SubjectAlternativeName": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.IssuerAlternativeName": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.CertificateIssuer": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.CRLReason": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.InvalidityDate": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SignedCertificateTimestamps": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.OCSPNonce": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.IssuingDistributionPoint": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.UnrecognizedExtension": [
        "<builtin>.property"
    ],
    "cryptography.x509.base.AttributeNotFound": [],
    "cryptography.x509.base.Attribute": [
        "<builtin>.property"
    ],
    "cryptography.x509.base.Attributes": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.base.Version": [],
    "cryptography.x509.base.InvalidVersion": [],
    "cryptography.x509.base.Certificate": [
        "abc.abstractmethod"
    ],
    "cryptography.x509.base.RevokedCertificate": [],
    "cryptography.x509.base._RawRevokedCertificate": [
        "<builtin>.property"
    ],
    "cryptography.x509.base.CertificateRevocationList": [
        "typing.overload",
        "abc.abstractmethod"
    ],
    "cryptography.x509.base.CertificateSigningRequest": [
        "abc.abstractmethod"
    ],
    "cryptography.x509.base.CertificateSigningRequestBuilder": [],
    "cryptography.x509.base.CertificateBuilder": [],
    "cryptography.x509.base.CertificateRevocationListBuilder": [],
    "cryptography.x509.base.RevokedCertificateBuilder": [],
    "cryptography.hazmat.backends.openssl.x509": [
        "cryptography.utils",
        "warnings",
        "cryptography.x509"
    ],
    "urllib3.contrib.pyopenssl.UnsupportedExtension": [],
    "urllib3.packages.backports.makefile": [
        "io",
        "socket"
    ],
    "urllib3.contrib.pyopenssl.WrappedSocket": [],
    "urllib3.contrib.pyopenssl.PyOpenSSLContext": [
        "<builtin>.property"
    ],
    "urllib3.contrib.pyopenssl.inject_into_urllib3": [
        "urllib3.contrib.pyopenssl._validate_dependencies_met"
    ],
    "urllib3.contrib.pyopenssl._validate_dependencies_met": [
        "OpenSSL.crypto.X509",
        "cryptography.x509.extensions",
        "<builtin>.ImportError",
        "<builtin>.getattr"
    ],
    "OpenSSL.crypto.X509": [],
    "requests._check_cryptography": [
        "warnings.warn",
        "<builtin>.map",
        "<builtin>.list",
        "<str>.split"
    ],
    "requests.packages": [
        "<builtin>.locals",
        "charset_normalizer",
        "warnings.filterwarnings",
        "<builtin>.__import__",
        "<builtin>.list",
        "warnings"
    ],
    "<builtin>.locals": [],
    "requests.utils": [
        "requests.cookies",
        "io",
        "requests._internal_utils",
        "urllib3.util.request.make_headers",
        "contextlib",
        "re",
        "urllib3.util",
        "requests.exceptions",
        "zipfile",
        "contextlib.contextmanager",
        "re.split",
        "certifi.core.where",
        "requests.structures",
        "requests.compat",
        "struct",
        "warnings",
        "tempfile",
        "requests.certs",
        "collections",
        "requests.__version__",
        "<builtin>.frozenset",
        "codecs",
        "os",
        "<str>.encode",
        "socket"
    ],
    "zipfile": [
        "threading",
        "io",
        "zipfile._ZipWriteFile",
        "zipfile.PyZipFile",
        "zipfile.LZMADecompressor",
        "zipfile.ZipInfo",
        "zipfile.ZipFile",
        "contextlib",
        "zipfile.Path",
        "importlib.util",
        "stat",
        "zipfile.BadZipFile",
        "zipfile._SharedFile",
        "zipfile.LargeZipFile",
        "posixpath",
        "bz2",
        "zipfile.ZipExtFile",
        "struct",
        "zipfile.CompleteDirs",
        "zipfile._Tellable",
        "binascii",
        "functools",
        "shutil",
        "zlib",
        "lzma",
        "zipfile.LZMACompressor",
        "os",
        "zipfile.FastLookup"
    ],
    "zipfile.BadZipFile": [],
    "zipfile.LargeZipFile": [],
    "zipfile.ZipInfo": [
        "<builtin>.classmethod"
    ],
    "zipfile.LZMACompressor": [],
    "zipfile.LZMADecompressor": [],
    "zipfile._SharedFile": [],
    "zipfile._Tellable": [],
    "zipfile.ZipExtFile": [],
    "zipfile._ZipWriteFile": [
        "<builtin>.property"
    ],
    "zipfile.ZipFile": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "zipfile.PyZipFile": [],
    "zipfile.CompleteDirs": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "zipfile.FastLookup": [],
    "zipfile.Path": [
        "<builtin>.property"
    ],
    "requests.certs": [
        "certifi"
    ],
    "certifi": [
        "certifi.core"
    ],
    "certifi.core": [
        "types",
        "typing",
        "importlib.resources",
        "os"
    ],
    "importlib.resources": [
        "contextlib",
        "io",
        "tempfile",
        "pathlib",
        "importlib",
        "typing",
        "importlib.abc",
        "os",
        "contextlib.contextmanager",
        "types"
    ],
    "importlib.abc": [
        "importlib.abc.PathEntryFinder",
        "warnings",
        "importlib.abc.ResourceReader",
        "importlib.abc.InspectLoader",
        "importlib.abc.FileLoader",
        "importlib.machinery",
        "importlib.abc.Finder",
        "importlib.abc.Loader",
        "abc",
        "importlib.abc.ExecutionLoader",
        "importlib.abc.SourceLoader",
        "importlib.abc.MetaPathFinder",
        "importlib.abc._register",
        "importlib.abc.ResourceLoader"
    ],
    "importlib.abc.Finder": [],
    "importlib.abc.MetaPathFinder": [],
    "importlib.abc._register": [
        "<builtin>.getattr"
    ],
    "importlib.abc.PathEntryFinder": [],
    "importlib.abc.Loader": [],
    "importlib.abc.ResourceLoader": [],
    "importlib.abc.InspectLoader": [
        "<builtin>.staticmethod"
    ],
    "importlib.abc.ExecutionLoader": [],
    "importlib.abc.FileLoader": [],
    "importlib.abc.SourceLoader": [],
    "importlib.abc.ResourceReader": [],
    "pathlib": [
        "pathlib._Accessor",
        "io",
        "pathlib._PosixFlavour",
        "<builtin>.hasattr",
        "pathlib._Selector",
        "pathlib._WildcardSelector",
        "pathlib._WindowsFlavour",
        "pathlib._PathParents",
        "pathlib.PurePath",
        "pathlib.Path",
        "fnmatch",
        "pathlib._PreciseSelector",
        "pathlib.WindowsPath",
        "functools.lru_cache.decorating_function",
        "pathlib._NormalAccessor",
        "re",
        "stat",
        "collections.abc",
        "functools.lru_cache",
        "pathlib.PosixPath",
        "pathlib._TerminatingSelector",
        "posixpath",
        "pathlib.PureWindowsPath",
        "ntpath",
        "pathlib._RecursiveWildcardSelector",
        "pathlib._Flavour",
        "functools",
        "urllib.parse",
        "operator",
        "functools._lru_cache_wrapper.wrapper",
        "pathlib.PurePosixPath",
        "os"
    ],
    "pathlib._Flavour": [],
    "pathlib._WindowsFlavour": [
        "<builtin>.set",
        "<builtin>.range"
    ],
    "pathlib._PosixFlavour": [],
    "pathlib._Accessor": [],
    "pathlib._NormalAccessor": [
        "<builtin>.staticmethod",
        "<builtin>.hasattr"
    ],
    "pathlib._Selector": [],
    "pathlib._TerminatingSelector": [],
    "pathlib._PreciseSelector": [],
    "pathlib._WildcardSelector": [],
    "pathlib._RecursiveWildcardSelector": [],
    "pathlib._PathParents": [],
    "pathlib.PurePath": [
        "<builtin>.property",
        "operator.attrgetter.__init__",
        "<builtin>.classmethod"
    ],
    "pathlib.PurePosixPath": [],
    "pathlib.PureWindowsPath": [],
    "pathlib.Path": [
        "<builtin>.classmethod"
    ],
    "pathlib.PosixPath": [],
    "pathlib.WindowsPath": [],
    "requests.__version__": [],
    "requests._internal_utils": [
        "re",
        "requests.compat",
        "re.compile"
    ],
    "requests.cookies": [
        "threading",
        "requests.cookies.MockRequest",
        "requests.cookies.RequestsCookieJar",
        "requests._internal_utils",
        "dummy_threading",
        "requests.cookies.MockResponse",
        "requests.cookies.CookieConflictError",
        "requests.compat",
        "copy",
        "calendar"
    ],
    "dummy_threading": [
        "threading",
        "_dummy_thread"
    ],
    "_dummy_thread": [
        "_dummy_thread.LockType",
        "_dummy_thread.RLock"
    ],
    "_dummy_thread.LockType": [],
    "_dummy_thread.RLock": [],
    "requests.cookies.MockRequest": [
        "<builtin>.property"
    ],
    "requests.cookies.MockResponse": [],
    "requests.cookies.CookieConflictError": [],
    "requests.cookies.RequestsCookieJar": [],
    "requests.structures": [
        "requests.structures.LookupDict",
        "collections",
        "requests.compat",
        "requests.structures.CaseInsensitiveDict"
    ],
    "requests.structures.CaseInsensitiveDict": [],
    "requests.structures.LookupDict": [],
    "certifi.core.where": [
        "posixpath.dirname",
        "posixpath.join",
        "ntpath.dirname",
        "ntpath.join"
    ],
    "urllib3.util.request.make_headers": [
        "base64.b64encode",
        "<builtin>.isinstance",
        "urllib3.packages.six.b"
    ],
    "urllib3.packages.six.b": [],
    "base64.b64encode": [
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "re.split": [
        "re._compile",
        "<str>.split"
    ],
    "requests.api": [
        "requests.sessions"
    ],
    "requests.sessions": [
        "requests.cookies",
        "requests.sessions.SessionRedirectMixin",
        "requests.adapters",
        "requests.sessions.Session",
        "requests.auth",
        "collections",
        "requests.status_codes",
        "requests._internal_utils",
        "requests.hooks",
        "datetime",
        "requests.exceptions",
        "requests.compat",
        "os",
        "requests.structures",
        "requests.utils",
        "requests.models"
    ],
    "requests.adapters": [
        "requests.cookies",
        "requests.adapters.BaseAdapter",
        "urllib3.poolmanager",
        "urllib3.util.retry",
        "requests.adapters.HTTPAdapter",
        "requests.auth",
        "urllib3.response",
        "posixpath",
        "urllib3.util",
        "requests.structures",
        "requests.exceptions",
        "requests.compat",
        "requests.utils",
        "urllib3.exceptions",
        "requests.models",
        "socket",
        "urllib3.contrib.socks"
    ],
    "requests.auth": [
        "requests.cookies",
        "threading",
        "requests.auth.AuthBase",
        "base64",
        "requests.auth.HTTPBasicAuth",
        "requests.auth.HTTPProxyAuth",
        "requests.auth.HTTPDigestAuth",
        "hashlib",
        "requests._internal_utils",
        "re",
        "requests.utils",
        "requests.compat",
        "os",
        "warnings"
    ],
    "requests.auth.AuthBase": [],
    "requests.auth.HTTPBasicAuth": [],
    "requests.auth.HTTPProxyAuth": [],
    "requests.auth.HTTPDigestAuth": [],
    "requests.models": [
        "requests.cookies",
        "encodings.idna",
        "io",
        "requests._internal_utils",
        "urllib3.exceptions",
        "urllib3.filepost",
        "requests.models.RequestEncodingMixin",
        "urllib3.util",
        "requests.hooks",
        "requests.exceptions",
        "requests.utils",
        "urllib3.fields",
        "requests.auth",
        "requests.structures",
        "datetime",
        "requests.compat",
        "requests.models.RequestHooksMixin",
        "requests.models.PreparedRequest",
        "requests.status_codes",
        "requests.models.Request",
        "requests.models.Response"
    ],
    "encodings.idna": [
        "encodings.idna.IncrementalDecoder",
        "encodings.idna.StreamWriter",
        "encodings.idna.Codec",
        "re",
        "codecs",
        "re.compile",
        "unicodedata",
        "encodings.idna.StreamReader",
        "encodings.idna.IncrementalEncoder",
        "stringprep"
    ],
    "stringprep": [
        "unicodedata",
        "<builtin>.list",
        "<builtin>.set",
        "<builtin>.range"
    ],
    "encodings.idna.Codec": [],
    "encodings.idna.IncrementalEncoder": [],
    "encodings.idna.IncrementalDecoder": [],
    "encodings.idna.StreamWriter": [],
    "encodings.idna.StreamReader": [],
    "requests.hooks": [],
    "requests.status_codes": [
        "requests.status_codes._init",
        "requests.structures",
        "requests.structures.LookupDict.__init__"
    ],
    "requests.structures.LookupDict.__init__": [
        "<builtin>.super"
    ],
    "requests.status_codes._init": [
        "<builtin>.sorted",
        "<map>.items",
        "requests.status_codes._init.doc",
        "<builtin>.setattr"
    ],
    "requests.status_codes._init.doc": [],
    "requests.models.RequestEncodingMixin": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "requests.models.RequestHooksMixin": [],
    "requests.models.Request": [],
    "requests.models.PreparedRequest": [
        "<builtin>.staticmethod"
    ],
    "requests.models.Response": [
        "<builtin>.property"
    ],
    "urllib3.contrib.socks": [
        "urllib3.contrib.socks.SOCKSProxyManager",
        "warnings.warn",
        "urllib3.poolmanager",
        "ssl",
        "urllib3.contrib.socks.SOCKSHTTPConnectionPool",
        "urllib3.contrib.socks.SOCKSHTTPSConnection",
        "urllib3.contrib.socks.SOCKSConnection",
        "urllib3.connection",
        "urllib3.util.url",
        "__future__",
        "urllib3.contrib.socks.SOCKSHTTPSConnectionPool",
        "urllib3.connectionpool",
        "urllib3.exceptions",
        "warnings",
        "socket"
    ],
    "urllib3.contrib.socks.SOCKSConnection": [],
    "urllib3.contrib.socks.SOCKSHTTPSConnection": [],
    "urllib3.contrib.socks.SOCKSHTTPConnectionPool": [],
    "urllib3.contrib.socks.SOCKSHTTPSConnectionPool": [],
    "urllib3.contrib.socks.SOCKSProxyManager": [],
    "requests.adapters.BaseAdapter": [],
    "requests.adapters.HTTPAdapter": [],
    "requests.sessions.SessionRedirectMixin": [],
    "requests.sessions.Session": [],
    "requests.api.get": [
        "requests.api.request"
    ],
    "requests.api.request": [
        "requests.sessions.Session.__init__",
        "requests.sessions.Session.request"
    ],
    "requests.sessions.Session.__init__": [
        "requests.adapters.HTTPAdapter.__init__",
        "requests.sessions.Session.mount",
        "requests.utils.default_headers",
        "collections.OrderedDict.__init__",
        "requests.hooks.default_hooks",
        "requests.cookies.cookiejar_from_dict"
    ],
    "requests.utils.default_headers": [
        "requests.structures.CaseInsensitiveDict.__init__",
        "requests.utils.default_user_agent"
    ],
    "requests.utils.default_user_agent": [],
    "requests.structures.CaseInsensitiveDict.__init__": [
        "collections.OrderedDict.__init__"
    ],
    "collections.OrderedDict.__init__": [
        "_weakref.proxy"
    ],
    "_weakref.proxy": [],
    "requests.hooks.default_hooks": [],
    "requests.cookies.cookiejar_from_dict": [
        "requests.cookies.RequestsCookieJar.set_cookie",
        "requests.cookies.create_cookie"
    ],
    "requests.cookies.create_cookie": [
        "<builtin>.bool",
        "<builtin>.set",
        "<builtin>.TypeError",
        "<map>.update",
        "<builtin>.list",
        "http.cookiejar.Cookie.__init__"
    ],
    "http.cookiejar.Cookie.__init__": [
        "<builtin>.int",
        "<builtin>.float",
        "<str>.lower",
        "copy.copy",
        "<builtin>.ValueError"
    ],
    "<builtin>.float": [],
    "copy.copy": [
        "<map>",
        "<builtin>.isinstance",
        "<builtin>.type",
        "copy._copy_immutable",
        "copy._reconstruct",
        "<map>.get",
        "<builtin>.issubclass",
        "<builtin>.getattr"
    ],
    "<map>": [],
    "copy._copy_immutable": [],
    "copy._reconstruct": [
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.setattr",
        "<builtin>.len",
        "copy.deepcopy",
        "<builtin>.id"
    ],
    "copy.deepcopy": [
        "copy._deepcopy_atomic",
        "<map>",
        "<builtin>.isinstance",
        "copy._keep_alive",
        "<builtin>.type",
        "copy._reconstruct",
        "<map>.get",
        "<builtin>.issubclass",
        "<builtin>.id",
        "<builtin>.getattr"
    ],
    "copy._deepcopy_atomic": [],
    "copy._keep_alive": [
        "<builtin>.id"
    ],
    "requests.cookies.RequestsCookieJar.set_cookie": [
        "<builtin>.super",
        "<builtin>.hasattr"
    ],
    "requests.adapters.HTTPAdapter.__init__": [
        "<builtin>.super",
        "requests.adapters.HTTPAdapter.init_poolmanager",
        "urllib3.util.retry.Retry.from_int",
        "urllib3.util.retry.Retry.__init__"
    ],
    "urllib3.util.retry.Retry.from_int": [
        "<builtin>.bool",
        "logging.Logger.debug",
        "<builtin>.isinstance",
        "urllib3.util.retry.Retry.__init__"
    ],
    "logging.Logger.debug": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "requests.adapters.HTTPAdapter.init_poolmanager": [
        "urllib3.poolmanager.PoolManager.__init__"
    ],
    "urllib3.poolmanager.PoolManager.__init__": [
        "urllib3.request.RequestMethods.__init__",
        "_collections.RecentlyUsedContainer",
        "<map>.copy"
    ],
    "urllib3.request.RequestMethods.__init__": [],
    "_collections.RecentlyUsedContainer": [],
    "<map>.copy": [],
    "requests.sessions.Session.mount": [
        "<builtin>.len"
    ],
    "requests.sessions.Session.request": [
        "requests.sessions.Session.prepare_request",
        "requests.models.Request.__init__",
        "<str>.upper",
        "requests.sessions.Session.merge_environment_settings",
        "requests.sessions.Session.send",
        "<map>.update"
    ],
    "<str>.upper": [],
    "requests.models.Request.__init__": [
        "<builtin>.list",
        "requests.hooks.default_hooks",
        "requests.models.RequestHooksMixin.register_hook"
    ],
    "requests.models.RequestHooksMixin.register_hook": [
        "<builtin>.ValueError",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "requests.sessions.Session.prepare_request": [
        "<builtin>.isinstance",
        "requests.models.PreparedRequest.prepare",
        "requests.sessions.merge_setting",
        "<str>.upper",
        "requests.utils.get_netrc_auth",
        "requests.sessions.merge_hooks",
        "requests.models.PreparedRequest.__init__",
        "requests.cookies.cookiejar_from_dict",
        "requests.cookies.merge_cookies"
    ],
    "requests.cookies.merge_cookies": [
        "requests.cookies.RequestsCookieJar.set_cookie",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "requests.cookies.RequestsCookieJar.update",
        "<map>.update",
        "requests.cookies.cookiejar_from_dict"
    ],
    "requests.cookies.RequestsCookieJar.update": [
        "requests.cookies.RequestsCookieJar.set_cookie",
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "requests.utils.get_netrc_auth": [
        "ntpath.expanduser",
        "<builtin>.isinstance",
        "urllib.parse.urlparse",
        "posixpath.expanduser",
        "netrc",
        "genericpath.exists"
    ],
    "netrc": [
        "shlex",
        "stat",
        "netrc.netrc",
        "os",
        "netrc.NetrcParseError"
    ],
    "shlex": [
        "io",
        "collections",
        "re",
        "re.compile",
        "os",
        "shlex.shlex"
    ],
    "shlex.shlex": [
        "<builtin>.property"
    ],
    "netrc.NetrcParseError": [],
    "netrc.netrc": [],
    "posixpath.expanduser": [
        "os._fscodec.fsdecode",
        "os._fscodec.fsencode",
        "<builtin>.isinstance",
        "<str>.startswith",
        "posixpath._get_sep",
        "<str>.find",
        "<builtin>.len",
        "os._fspath",
        "<builtin>.str",
        "<str>.rstrip"
    ],
    "<str>.rstrip": [],
    "ntpath.expanduser": [
        "os._fscodec.fsdecode",
        "os._fscodec.fsencode",
        "<builtin>.isinstance",
        "ntpath.join",
        "<str>.startswith",
        "ntpath.dirname",
        "<builtin>.len",
        "os._fspath",
        "ntpath._get_bothseps"
    ],
    "genericpath.exists": [],
    "requests.models.PreparedRequest.__init__": [
        "requests.hooks.default_hooks"
    ],
    "requests.sessions.merge_setting": [
        "<builtin>.isinstance",
        "collections.OrderedDict.__init__",
        "requests.utils.to_key_val_list",
        "collections.OrderedDict.items",
        "requests.structures.CaseInsensitiveDict.__init__"
    ],
    "requests.utils.to_key_val_list": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "collections.OrderedDict.items",
        "<map>.items",
        "<builtin>.list"
    ],
    "collections.OrderedDict.items": [],
    "requests.sessions.merge_hooks": [
        "requests.sessions.merge_setting"
    ],
    "requests.models.PreparedRequest.prepare": [
        "requests.models.PreparedRequest.prepare_cookies",
        "requests.models.PreparedRequest.prepare_headers",
        "requests.models.PreparedRequest.prepare_method",
        "requests.models.PreparedRequest.prepare_body",
        "requests.models.PreparedRequest.prepare_auth",
        "requests.models.PreparedRequest.prepare_url",
        "requests.models.PreparedRequest.prepare_hooks"
    ],
    "requests.models.PreparedRequest.prepare_method": [
        "requests._internal_utils.to_native_string",
        "<str>.upper"
    ],
    "requests._internal_utils.to_native_string": [
        "<builtin>.isinstance"
    ],
    "requests.models.PreparedRequest.prepare_url": [
        "urllib3.util.url.parse_url",
        "requests._internal_utils.to_native_string",
        "requests._internal_utils.unicode_is_ascii",
        "requests.exceptions.RequestException.__init__",
        "<builtin>.isinstance",
        "requests.models.RequestEncodingMixin._encode_params",
        "requests.models.PreparedRequest._get_idna_encoded_host",
        "urllib.parse.urlunparse",
        "requests.utils.requote_uri",
        "<builtin>.str"
    ],
    "urllib3.util.url.parse_url": [
        "urllib3.util.url.parse_url.ensure_type",
        "<builtin>.int",
        "urllib3.util.url._normalize_host",
        "<str>.lower",
        "<builtin>.isinstance",
        "urllib3.util.url._encode_invalid_chars",
        "urllib3.exceptions.LocationParseError.__init__",
        "urllib3.util.url._remove_path_dot_segments",
        "urllib3.packages.six.raise_from"
    ],
    "urllib3.util.url._encode_invalid_chars": [
        "<builtin>.bytearray",
        "<str>.count",
        "urllib3.packages.six.ensure_text",
        "<builtin>.hex",
        "<builtin>.range",
        "<builtin>.len",
        "<builtin>.ord"
    ],
    "urllib3.packages.six.ensure_text": [
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "<str>.count": [],
    "<builtin>.hex": [],
    "urllib3.exceptions.LocationParseError.__init__": [],
    "urllib3.util.url._normalize_host": [
        "<str>.lower",
        "<builtin>.isinstance",
        "urllib3.util.url._encode_invalid_chars",
        "urllib3.util.url._idna_encode",
        "<str>.split",
        "urllib3.packages.six.ensure_str"
    ],
    "urllib3.packages.six.ensure_str": [
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "urllib3.util.url._idna_encode": [
        "idna",
        "idna.core.encode",
        "<builtin>.ord",
        "urllib3.exceptions.LocationParseError.__init__",
        "urllib3.packages.six.raise_from",
        "<builtin>.any"
    ],
    "idna": [
        "idna.core",
        "idna.intranges",
        "idna.package_data"
    ],
    "idna.package_data": [],
    "idna.core": [
        "idna.idnadata",
        "idna.core.InvalidCodepoint",
        "typing",
        "idna.core.IDNABidiError",
        "re",
        "re.compile",
        "idna.intranges",
        "bisect",
        "idna.core.InvalidCodepointContext",
        "unicodedata",
        "idna.core.IDNAError"
    ],
    "idna.idnadata": [],
    "idna.intranges": [
        "typing",
        "bisect"
    ],
    "idna.core.IDNAError": [],
    "idna.core.IDNABidiError": [],
    "idna.core.InvalidCodepoint": [],
    "idna.core.InvalidCodepointContext": [],
    "urllib3.packages.six.raise_from": [
        "urllib3.exceptions.LocationParseError.__init__"
    ],
    "idna.core.encode": [
        "idna.core.uts46_remap",
        "<builtin>.isinstance",
        "idna.core.alabel",
        "<list>.append",
        "<str>.split",
        "idna.core.valid_string_length"
    ],
    "idna.core.uts46_remap": [
        "bisect.bisect_left",
        "<builtin>.enumerate",
        "<builtin>.len",
        "idna.uts46data",
        "<builtin>.IndexError",
        "<builtin>.ord",
        "<builtin>.repr",
        "idna.core._unot"
    ],
    "idna.uts46data": [
        "idna.uts46data._seg_52",
        "idna.uts46data._seg_71",
        "idna.uts46data._seg_33",
        "idna.uts46data._seg_55",
        "idna.uts46data._seg_69",
        "idna.uts46data._seg_26",
        "idna.uts46data._seg_64",
        "idna.uts46data._seg_54",
        "idna.uts46data._seg_19",
        "idna.uts46data._seg_23",
        "idna.uts46data._seg_42",
        "idna.uts46data._seg_8",
        "idna.uts46data._seg_24",
        "idna.uts46data._seg_20",
        "idna.uts46data._seg_29",
        "idna.uts46data._seg_41",
        "idna.uts46data._seg_6",
        "idna.uts46data._seg_48",
        "idna.uts46data._seg_47",
        "idna.uts46data._seg_73",
        "idna.uts46data._seg_59",
        "idna.uts46data._seg_79",
        "idna.uts46data._seg_70",
        "idna.uts46data._seg_2",
        "idna.uts46data._seg_76",
        "idna.uts46data._seg_16",
        "idna.uts46data._seg_36",
        "idna.uts46data._seg_34",
        "idna.uts46data._seg_30",
        "idna.uts46data._seg_66",
        "idna.uts46data._seg_58",
        "idna.uts46data._seg_3",
        "idna.uts46data._seg_43",
        "idna.uts46data._seg_5",
        "idna.uts46data._seg_75",
        "idna.uts46data._seg_81",
        "idna.uts46data._seg_17",
        "idna.uts46data._seg_28",
        "idna.uts46data._seg_61",
        "idna.uts46data._seg_37",
        "idna.uts46data._seg_10",
        "idna.uts46data._seg_67",
        "idna.uts46data._seg_77",
        "idna.uts46data._seg_45",
        "idna.uts46data._seg_44",
        "idna.uts46data._seg_46",
        "idna.uts46data._seg_27",
        "idna.uts46data._seg_31",
        "idna.uts46data._seg_22",
        "idna.uts46data._seg_80",
        "idna.uts46data._seg_50",
        "<builtin>.tuple",
        "idna.uts46data._seg_32",
        "idna.uts46data._seg_21",
        "idna.uts46data._seg_72",
        "idna.uts46data._seg_14",
        "idna.uts46data._seg_35",
        "idna.uts46data._seg_1",
        "idna.uts46data._seg_9",
        "idna.uts46data._seg_13",
        "idna.uts46data._seg_53",
        "idna.uts46data._seg_7",
        "idna.uts46data._seg_56",
        "idna.uts46data._seg_60",
        "idna.uts46data._seg_40",
        "idna.uts46data._seg_38",
        "idna.uts46data._seg_74",
        "idna.uts46data._seg_65",
        "idna.uts46data._seg_12",
        "idna.uts46data._seg_11",
        "idna.uts46data._seg_68",
        "idna.uts46data._seg_4",
        "idna.uts46data._seg_49",
        "typing",
        "idna.uts46data._seg_78",
        "idna.uts46data._seg_57",
        "idna.uts46data._seg_62",
        "idna.uts46data._seg_63",
        "idna.uts46data._seg_39",
        "idna.uts46data._seg_18",
        "idna.uts46data._seg_25",
        "idna.uts46data._seg_0",
        "idna.uts46data._seg_51",
        "idna.uts46data._seg_15"
    ],
    "idna.uts46data._seg_0": [],
    "idna.uts46data._seg_1": [],
    "idna.uts46data._seg_2": [],
    "idna.uts46data._seg_3": [],
    "idna.uts46data._seg_4": [],
    "idna.uts46data._seg_5": [],
    "idna.uts46data._seg_6": [],
    "idna.uts46data._seg_7": [],
    "idna.uts46data._seg_8": [],
    "idna.uts46data._seg_9": [],
    "idna.uts46data._seg_10": [],
    "idna.uts46data._seg_11": [],
    "idna.uts46data._seg_12": [],
    "idna.uts46data._seg_13": [],
    "idna.uts46data._seg_14": [],
    "idna.uts46data._seg_15": [],
    "idna.uts46data._seg_16": [],
    "idna.uts46data._seg_17": [],
    "idna.uts46data._seg_18": [],
    "idna.uts46data._seg_19": [],
    "idna.uts46data._seg_20": [],
    "idna.uts46data._seg_21": [],
    "idna.uts46data._seg_22": [],
    "idna.uts46data._seg_23": [],
    "idna.uts46data._seg_24": [],
    "idna.uts46data._seg_25": [],
    "idna.uts46data._seg_26": [],
    "idna.uts46data._seg_27": [],
    "idna.uts46data._seg_28": [],
    "idna.uts46data._seg_29": [],
    "idna.uts46data._seg_30": [],
    "idna.uts46data._seg_31": [],
    "idna.uts46data._seg_32": [],
    "idna.uts46data._seg_33": [],
    "idna.uts46data._seg_34": [],
    "idna.uts46data._seg_35": [],
    "idna.uts46data._seg_36": [],
    "idna.uts46data._seg_37": [],
    "idna.uts46data._seg_38": [],
    "idna.uts46data._seg_39": [],
    "idna.uts46data._seg_40": [],
    "idna.uts46data._seg_41": [],
    "idna.uts46data._seg_42": [],
    "idna.uts46data._seg_43": [],
    "idna.uts46data._seg_44": [],
    "idna.uts46data._seg_45": [],
    "idna.uts46data._seg_46": [],
    "idna.uts46data._seg_47": [],
    "idna.uts46data._seg_48": [],
    "idna.uts46data._seg_49": [],
    "idna.uts46data._seg_50": [],
    "idna.uts46data._seg_51": [],
    "idna.uts46data._seg_52": [],
    "idna.uts46data._seg_53": [],
    "idna.uts46data._seg_54": [],
    "idna.uts46data._seg_55": [],
    "idna.uts46data._seg_56": [],
    "idna.uts46data._seg_57": [],
    "idna.uts46data._seg_58": [],
    "idna.uts46data._seg_59": [],
    "idna.uts46data._seg_60": [],
    "idna.uts46data._seg_61": [],
    "idna.uts46data._seg_62": [],
    "idna.uts46data._seg_63": [],
    "idna.uts46data._seg_64": [],
    "idna.uts46data._seg_65": [],
    "idna.uts46data._seg_66": [],
    "idna.uts46data._seg_67": [],
    "idna.uts46data._seg_68": [],
    "idna.uts46data._seg_69": [],
    "idna.uts46data._seg_70": [],
    "idna.uts46data._seg_71": [],
    "idna.uts46data._seg_72": [],
    "idna.uts46data._seg_73": [],
    "idna.uts46data._seg_74": [],
    "idna.uts46data._seg_75": [],
    "idna.uts46data._seg_76": [],
    "idna.uts46data._seg_77": [],
    "idna.uts46data._seg_78": [],
    "idna.uts46data._seg_79": [],
    "idna.uts46data._seg_80": [],
    "idna.uts46data._seg_81": [],
    "bisect.bisect_left": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "<builtin>.IndexError": [],
    "idna.core._unot": [],
    "idna.core.alabel": [
        "idna.core.check_label",
        "idna.core.valid_label_length",
        "idna.core._punycode",
        "idna.core.ulabel",
        "<builtin>.str"
    ],
    "idna.core.ulabel": [
        "idna.core.check_label",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "idna.core.check_label": [
        "idna.core.check_bidi",
        "<builtin>.isinstance",
        "idna.core.check_hyphen_ok",
        "<builtin>.enumerate",
        "idna.core.check_nfc",
        "<builtin>.len",
        "idna.core.valid_contexto",
        "<builtin>.ord",
        "<builtin>.repr",
        "idna.core.valid_contextj",
        "idna.core.check_initial_combiner",
        "idna.core._unot",
        "idna.intranges.intranges_contain"
    ],
    "idna.core.check_nfc": [],
    "idna.core.check_hyphen_ok": [],
    "idna.core.check_initial_combiner": [],
    "idna.intranges.intranges_contain": [
        "<builtin>.len",
        "idna.intranges._encode_range",
        "bisect.bisect_left",
        "idna.intranges._decode_range"
    ],
    "idna.intranges._encode_range": [],
    "idna.intranges._decode_range": [],
    "idna.core.valid_contexto": [
        "<builtin>.ord",
        "idna.core._is_script",
        "<builtin>.len"
    ],
    "idna.core._is_script": [
        "<builtin>.ord",
        "idna.intranges.intranges_contain"
    ],
    "idna.core.valid_contextj": [
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.ord",
        "<map>.get",
        "idna.core._combining_class"
    ],
    "idna.core._combining_class": [
        "<builtin>.chr",
        "<builtin>.ValueError"
    ],
    "idna.core.check_bidi": [
        "<builtin>.repr",
        "<builtin>.enumerate"
    ],
    "idna.core.valid_label_length": [
        "<builtin>.len"
    ],
    "idna.core._punycode": [],
    "idna.core.valid_string_length": [
        "<builtin>.len"
    ],
    "urllib3.util.url._remove_path_dot_segments": [
        "<list>.append",
        "<list>.pop",
        "<list>.insert"
    ],
    "urllib3.util.url.parse_url.ensure_type": [
        "urllib3.packages.six.ensure_text",
        "urllib3.packages.six.ensure_str"
    ],
    "requests.exceptions.RequestException.__init__": [
        "<builtin>.super",
        "<builtin>.hasattr"
    ],
    "requests._internal_utils.unicode_is_ascii": [
        "<builtin>.isinstance"
    ],
    "requests.models.PreparedRequest._get_idna_encoded_host": [
        "idna.core.encode",
        "idna"
    ],
    "requests.models.RequestEncodingMixin._encode_params": [
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "requests.utils.to_key_val_list",
        "<list>.append",
        "urllib.parse.urlencode"
    ],
    "urllib.parse.urlencode": [
        "<builtin>.isinstance",
        "urllib.parse.quote_plus",
        "<builtin>.hasattr",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<list>.append",
        "<builtin>.str"
    ],
    "urllib.parse.quote_plus": [
        "urllib.parse.quote",
        "<str>.replace",
        "<builtin>.isinstance"
    ],
    "urllib.parse.quote": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "urllib.parse.quote_from_bytes"
    ],
    "urllib.parse.quote_from_bytes": [
        "<builtin>.isinstance",
        "urllib.parse.Quoter.__init__",
        "<builtin>.bytes",
        "<builtin>.TypeError",
        "<str>.rstrip"
    ],
    "urllib.parse.Quoter.__init__": [],
    "urllib.parse.urlunparse": [
        "urllib.parse._coerce_args",
        "urllib.parse.urlunsplit"
    ],
    "urllib.parse.urlunsplit": [
        "urllib.parse._coerce_args"
    ],
    "requests.utils.requote_uri": [
        "urllib.parse.quote",
        "requests.utils.unquote_unreserved"
    ],
    "requests.utils.unquote_unreserved": [
        "<builtin>.int",
        "requests.exceptions.RequestException.__init__",
        "<builtin>.chr",
        "<builtin>.range",
        "<builtin>.len",
        "<str>.split"
    ],
    "requests.models.PreparedRequest.prepare_headers": [
        "requests._internal_utils.to_native_string",
        "collections.OrderedDict.items",
        "<map>.items",
        "requests.structures.CaseInsensitiveDict.__init__",
        "requests.utils.check_header_validity"
    ],
    "requests.utils.check_header_validity": [
        "<builtin>.type",
        "requests.exceptions.RequestException.__init__",
        "requests.utils._validate_header_part"
    ],
    "requests.utils._validate_header_part": [
        "requests.exceptions.RequestException.__init__"
    ],
    "requests.models.PreparedRequest.prepare_cookies": [
        "requests.cookies.get_cookie_header",
        "requests.cookies.cookiejar_from_dict",
        "<builtin>.isinstance"
    ],
    "requests.cookies.get_cookie_header": [
        "http.cookiejar.CookieJar.add_cookie_header",
        "requests.cookies.MockRequest.get_new_headers",
        "requests.cookies.MockRequest.__init__",
        "<map>.get"
    ],
    "requests.cookies.MockRequest.__init__": [
        "urllib.parse.urlparse"
    ],
    "http.cookiejar.CookieJar.add_cookie_header": [
        "<builtin>.int",
        "http.cookiejar._debug",
        "http.cookiejar.CookieJar.clear_expired_cookies",
        "requests.cookies.MockRequest.add_unredirected_header",
        "http.cookiejar.CookieJar._cookies_for_request",
        "requests.cookies.MockRequest.has_header",
        "http.cookiejar.CookieJar._cookie_attrs"
    ],
    "http.cookiejar._debug": [
        "logging.Logger.debug",
        "logging.getLogger",
        "logging"
    ],
    "http.cookiejar.CookieJar._cookies_for_request": [
        "<list>.extend"
    ],
    "http.cookiejar.CookieJar._cookie_attrs": [
        "<list>.sort",
        "<list>.append"
    ],
    "<list>.sort": [],
    "requests.cookies.MockRequest.has_header": [],
    "requests.cookies.MockRequest.add_unredirected_header": [],
    "http.cookiejar.CookieJar.clear_expired_cookies": [
        "http.cookiejar.CookieJar.__iter__",
        "http.cookiejar.CookieJar.clear"
    ],
    "http.cookiejar.CookieJar.__iter__": [],
    "http.cookiejar.CookieJar.clear": [
        "<builtin>.ValueError"
    ],
    "requests.cookies.MockRequest.get_new_headers": [],
    "requests.models.PreparedRequest.prepare_body": [
        "requests.exceptions.RequestException.__init__",
        "<builtin>.isinstance",
        "requests.models.RequestEncodingMixin._encode_params",
        "<builtin>.hasattr",
        "requests.models.RequestEncodingMixin._encode_files",
        "requests.utils.super_len",
        "<builtin>.object",
        "<builtin>.NotImplementedError",
        "json.dumps",
        "requests.models.PreparedRequest.prepare_content_length",
        "<builtin>.all",
        "<builtin>.getattr"
    ],
    "json.dumps": [
        "encoder.JSONEncoder"
    ],
    "requests.models.RequestEncodingMixin._encode_files": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "urllib3.fields.RequestField.__init__",
        "requests.utils.guess_filename",
        "<builtin>.hasattr",
        "requests.utils.to_key_val_list",
        "<list>.append",
        "<builtin>.len",
        "<builtin>.str",
        "urllib3.filepost.encode_multipart_formdata",
        "urllib3.fields.RequestField.make_multipart"
    ],
    "requests.utils.guess_filename": [
        "<builtin>.isinstance",
        "ntpath.basename",
        "posixpath.basename",
        "<builtin>.getattr"
    ],
    "urllib3.fields.RequestField.__init__": [
        "<builtin>.dict"
    ],
    "urllib3.fields.RequestField.make_multipart": [],
    "urllib3.filepost.encode_multipart_formdata": [
        "urllib3.filepost.choose_boundary",
        "<builtin>.isinstance",
        "<builtin>.str",
        "urllib3.filepost.iter_field_objects",
        "_io.BytesIO",
        "urllib3.packages.six.b"
    ],
    "urllib3.filepost.choose_boundary": [],
    "urllib3.filepost.iter_field_objects": [
        "urllib3.packages.six.iteritems",
        "urllib3.fields.RequestField.from_tuples",
        "<builtin>.iter",
        "<builtin>.isinstance"
    ],
    "urllib3.packages.six.iteritems": [],
    "urllib3.fields.RequestField.from_tuples": [
        "<builtin>.isinstance",
        "urllib3.fields.RequestField.__init__",
        "urllib3.fields.guess_content_type",
        "<builtin>.len",
        "urllib3.fields.RequestField.make_multipart"
    ],
    "urllib3.fields.guess_content_type": [
        "mimetypes.guess_type"
    ],
    "mimetypes.guess_type": [
        "mimetypes.init"
    ],
    "mimetypes.init": [
        "mimetypes.MimeTypes.read_windows_registry",
        "mimetypes.MimeTypes.__init__",
        "genericpath.isfile",
        "<builtin>.list",
        "mimetypes.MimeTypes.read"
    ],
    "mimetypes.MimeTypes.__init__": [
        "mimetypes.MimeTypes.add_type",
        "mimetypes.init",
        "mimetypes.MimeTypes.read"
    ],
    "mimetypes.MimeTypes.add_type": [],
    "mimetypes.MimeTypes.read": [
        "<builtin>.open",
        "mimetypes.MimeTypes.readfp"
    ],
    "mimetypes.MimeTypes.readfp": [
        "<builtin>.range",
        "mimetypes.MimeTypes.add_type",
        "<builtin>.len"
    ],
    "mimetypes.MimeTypes.read_windows_registry": [
        "mimetypes.MimeTypes.add_type",
        "mimetypes.MimeTypes.read_windows_registry.enum_types"
    ],
    "mimetypes.MimeTypes.read_windows_registry.enum_types": [],
    "genericpath.isfile": [
        "stat.S_ISREG"
    ],
    "stat.S_ISREG": [
        "stat.S_IFMT"
    ],
    "stat.S_IFMT": [],
    "requests.models.PreparedRequest.prepare_content_length": [
        "requests.utils.super_len"
    ],
    "requests.utils.super_len": [
        "<builtin>.hasattr",
        "<builtin>.max",
        "<builtin>.len"
    ],
    "requests.models.PreparedRequest.prepare_auth": [
        "requests.utils.get_auth_from_url",
        "<map>",
        "requests.auth.HTTPBasicAuth.__init__",
        "<builtin>.isinstance",
        "collections.OrderedDict.__init__",
        "<builtin>.len",
        "requests.models.PreparedRequest.prepare_content_length",
        "requests.structures.CaseInsensitiveDict.__init__",
        "<builtin>.any"
    ],
    "requests.utils.get_auth_from_url": [
        "urllib.parse.urlparse",
        "urllib.parse.unquote"
    ],
    "urllib.parse.unquote": [
        "<builtin>.len",
        "<builtin>.range",
        "<list>",
        "<str>.split"
    ],
    "requests.auth.HTTPBasicAuth.__init__": [],
    "requests.models.PreparedRequest.prepare_hooks": [
        "requests.models.RequestHooksMixin.register_hook",
        "collections.OrderedDict.__iter__",
        "requests.structures.CaseInsensitiveDict.__iter__"
    ],
    "collections.OrderedDict.__iter__": [],
    "requests.structures.CaseInsensitiveDict.__iter__": [],
    "requests.sessions.Session.merge_environment_settings": [
        "requests.sessions.merge_setting",
        "<map>.items",
        "requests.utils.get_environ_proxies"
    ],
    "requests.utils.get_environ_proxies": [
        "urllib.request.getproxies",
        "requests.utils.should_bypass_proxies"
    ],
    "requests.utils.should_bypass_proxies": [
        "requests.utils.is_valid_cidr",
        "urllib.parse.urlparse",
        "requests.utils.is_ipv4_address",
        "requests.utils.set_environ",
        "requests.utils.should_bypass_proxies.get_proxy",
        "requests.utils.address_in_network"
    ],
    "requests.utils.should_bypass_proxies.get_proxy": [
        "<str>.upper"
    ],
    "requests.utils.is_ipv4_address": [],
    "requests.utils.is_valid_cidr": [
        "<builtin>.int"
    ],
    "requests.utils.address_in_network": [
        "requests.utils.dotted_netmask",
        "<builtin>.int"
    ],
    "requests.utils.dotted_netmask": [],
    "requests.utils.set_environ": [],
    "urllib.request.getproxies": [
        "urllib.request.getproxies_environment",
        "urllib.request.getproxies_registry"
    ],
    "urllib.request.getproxies_environment": [
        "<map>.pop"
    ],
    "<map>.pop": [],
    "urllib.request.getproxies_registry": [
        "<builtin>.str",
        "re.match"
    ],
    "re.match": [
        "re._compile"
    ],
    "requests.sessions.Session.send": [
        "requests.cookies.extract_cookies_to_jar",
        "time.time",
        "requests.hooks.dispatch_hook",
        "<builtin>.isinstance",
        "requests.sessions.SessionRedirectMixin.resolve_redirects",
        "<builtin>.ValueError",
        "requests.utils.resolve_proxies",
        "<builtin>.next",
        "<list>.insert",
        "<list>.pop",
        "requests.sessions.Session.get_adapter"
    ],
    "requests.utils.resolve_proxies": [
        "urllib.parse.urlparse",
        "<map>.setdefault",
        "requests.utils.should_bypass_proxies",
        "<map>.get",
        "<map>.copy",
        "requests.utils.get_environ_proxies"
    ],
    "requests.sessions.Session.get_adapter": [
        "<str>.startswith",
        "requests.exceptions.RequestException.__init__",
        "<str>.lower",
        "collections.OrderedDict.items"
    ],
    "time.time": [],
    "requests.hooks.dispatch_hook": [
        "<builtin>.hasattr"
    ],
    "requests.cookies.extract_cookies_to_jar": [
        "http.cookiejar.CookieJar.extract_cookies",
        "<builtin>.hasattr",
        "requests.cookies.MockRequest.__init__",
        "requests.cookies.MockResponse.__init__"
    ],
    "requests.cookies.MockResponse.__init__": [],
    "http.cookiejar.CookieJar.extract_cookies": [
        "requests.cookies.RequestsCookieJar.set_cookie",
        "http.cookiejar.CookieJar.set_cookie",
        "http.cookiejar._debug",
        "http.cookiejar.CookieJar.make_cookies",
        "requests.cookies.MockResponse.info"
    ],
    "requests.cookies.MockResponse.info": [],
    "http.cookiejar.CookieJar.make_cookies": [
        "http.cookiejar.CookieJar._cookies_from_attrs_set",
        "<builtin>.int",
        "http.cookiejar.split_header_words",
        "http.cookiejar._warn_unhandled_exception",
        "http.cookiejar.CookieJar._process_rfc2109_cookies",
        "<builtin>.filter",
        "http.cookiejar.parse_ns_headers",
        "requests.cookies.MockResponse.info",
        "<list>.extend"
    ],
    "http.cookiejar.split_header_words": [
        "re.subn",
        "<builtin>.isinstance",
        "http.cookiejar.unmatched",
        "<list>.append",
        "<str>.rstrip"
    ],
    "re.subn": [
        "re._compile"
    ],
    "http.cookiejar.unmatched": [],
    "http.cookiejar.CookieJar._cookies_from_attrs_set": [
        "http.cookiejar.CookieJar._normalized_cookie_tuples",
        "http.cookiejar.CookieJar._cookie_from_cookie_tuple",
        "<list>.append"
    ],
    "http.cookiejar.CookieJar._normalized_cookie_tuples": [
        "<builtin>.int",
        "http.cookiejar._debug",
        "<list>.append"
    ],
    "http.cookiejar.CookieJar._cookie_from_cookie_tuple": [
        "http.cookiejar.escape_path",
        "<builtin>.int",
        "http.cookiejar._debug",
        "<str>.rfind",
        "<builtin>.bool",
        "http.cookiejar.eff_request_host",
        "re.sub",
        "<builtin>.len",
        "http.cookiejar.CookieJar.clear",
        "http.cookiejar.request_path",
        "http.cookiejar.Cookie.__init__",
        "http.cookiejar.request_port"
    ],
    "http.cookiejar.request_path": [
        "<str>.startswith",
        "http.cookiejar.escape_path",
        "requests.cookies.MockRequest.get_full_url"
    ],
    "requests.cookies.MockRequest.get_full_url": [
        "urllib.parse.urlparse",
        "requests._internal_utils.to_native_string",
        "urllib.parse.urlunparse"
    ],
    "http.cookiejar.escape_path": [],
    "http.cookiejar.eff_request_host": [
        "<str>.find",
        "http.cookiejar.request_host"
    ],
    "http.cookiejar.request_host": [
        "requests.cookies.MockRequest.get_full_url",
        "<str>.lower",
        "requests.cookies.MockRequest.get_header"
    ],
    "requests.cookies.MockRequest.get_header": [
        "<map>.get"
    ],
    "re.sub": [
        "re._compile"
    ],
    "http.cookiejar.request_port": [
        "<builtin>.int",
        "http.cookiejar._debug"
    ],
    "http.cookiejar._warn_unhandled_exception": [
        "warnings.warn",
        "traceback.print_exc",
        "io",
        "warnings",
        "traceback",
        "_io.StringIO"
    ],
    "traceback.print_exc": [
        "traceback.print_exception"
    ],
    "http.cookiejar.parse_ns_headers": [
        "http.cookiejar.strip_quotes",
        "http.cookiejar.http2time",
        "<builtin>.enumerate",
        "<list>.append"
    ],
    "http.cookiejar.strip_quotes": [],
    "http.cookiejar.http2time": [
        "<builtin>.int",
        "<builtin>.float",
        "http.cookiejar._timegm",
        "<list>.index",
        "http.cookiejar._str2time"
    ],
    "<list>.index": [],
    "http.cookiejar._timegm": [
        "calendar.timegm"
    ],
    "calendar.timegm": [
        "datetime.date.toordinal"
    ],
    "http.cookiejar._str2time": [
        "<builtin>.int",
        "<builtin>.abs",
        "http.cookiejar.offset_from_tz_string",
        "http.cookiejar._timegm",
        "<str>.upper",
        "<list>.index"
    ],
    "<builtin>.abs": [],
    "http.cookiejar.offset_from_tz_string": [
        "<builtin>.int"
    ],
    "http.cookiejar.CookieJar._process_rfc2109_cookies": [
        "<builtin>.getattr"
    ],
    "http.cookiejar.CookieJar.set_cookie": [],
    "requests.sessions.SessionRedirectMixin.resolve_redirects": [
        "requests._internal_utils.to_native_string",
        "requests.exceptions.RequestException.__init__",
        "requests.cookies.extract_cookies_to_jar",
        "requests.models.PreparedRequest.prepare_cookies",
        "requests.sessions.SessionRedirectMixin.rebuild_auth",
        "requests.models.PreparedRequest.copy",
        "urllib.parse.urlparse",
        "<str>.startswith",
        "requests.sessions.SessionRedirectMixin.rebuild_method",
        "<list>.append",
        "requests.sessions.SessionRedirectMixin.get_redirect_target",
        "<builtin>.len",
        "requests.utils.requote_uri",
        "requests.sessions.SessionRedirectMixin.rebuild_proxies",
        "requests.sessions.Session.send",
        "urllib.parse.urljoin",
        "requests.utils.rewind_body",
        "requests.cookies.merge_cookies"
    ],
    "requests.sessions.SessionRedirectMixin.get_redirect_target": [
        "requests._internal_utils.to_native_string"
    ],
    "requests.models.PreparedRequest.copy": [
        "requests.structures.CaseInsensitiveDict.copy",
        "requests.models.PreparedRequest.__init__",
        "requests.cookies._copy_cookie_jar"
    ],
    "requests.structures.CaseInsensitiveDict.copy": [
        "requests.structures.CaseInsensitiveDict.__init__",
        "collections.OrderedDict.values"
    ],
    "collections.OrderedDict.values": [],
    "requests.cookies._copy_cookie_jar": [
        "requests.cookies.RequestsCookieJar.set_cookie",
        "<map>.clear",
        "copy.copy",
        "<builtin>.hasattr",
        "http.cookiejar.CookieJar.clear",
        "requests.cookies.RequestsCookieJar.copy"
    ],
    "requests.cookies.RequestsCookieJar.copy": [
        "requests.cookies.RequestsCookieJar.get_policy",
        "http.cookiejar.CookieJar.set_policy",
        "requests.cookies.RequestsCookieJar.update"
    ],
    "requests.cookies.RequestsCookieJar.get_policy": [],
    "http.cookiejar.CookieJar.set_policy": [],
    "urllib.parse.urljoin": [
        "urllib.parse.urlparse",
        "urllib.parse.urlunparse",
        "<list>.append",
        "urllib.parse._coerce_args",
        "<builtin>.filter",
        "<list>.pop"
    ],
    "requests.sessions.SessionRedirectMixin.rebuild_method": [],
    "requests.sessions.SessionRedirectMixin.rebuild_proxies": [
        "urllib.parse.urlparse",
        "requests.auth._basic_auth_str",
        "requests.utils.get_auth_from_url",
        "requests.utils.resolve_proxies"
    ],
    "requests.auth._basic_auth_str": [
        "warnings.warn",
        "requests._internal_utils.to_native_string",
        "<builtin>.isinstance",
        "base64.b64encode",
        "<builtin>.type",
        "<builtin>.str"
    ],
    "requests.sessions.SessionRedirectMixin.rebuild_auth": [
        "requests.models.PreparedRequest.prepare_auth",
        "requests.sessions.SessionRedirectMixin.should_strip_auth",
        "requests.utils.get_netrc_auth"
    ],
    "requests.sessions.SessionRedirectMixin.should_strip_auth": [
        "urllib.parse.urlparse",
        "<map>.get"
    ],
    "requests.utils.rewind_body": [
        "<builtin>.isinstance",
        "requests.exceptions.RequestException.__init__",
        "<builtin>.getattr"
    ],
    "pygments.lexers.guess_lexer_for_filename": [
        "<list>.sort",
        "posixpath.basename",
        "pygments.lexers._iter_lexerclasses",
        "<builtin>.set",
        "<list>.append",
        "<builtin>.len",
        "fnmatch"
    ],
    "pygments.lexers._iter_lexerclasses": [
        "pygments.lexers._load_lexers",
        "pygments.plugin.find_plugin_lexers",
        "<builtin>.sorted"
    ],
    "pygments.lexers._load_lexers": [
        "<builtin>.__import__",
        "<builtin>.getattr"
    ],
    "pygments.plugin.find_plugin_lexers": [
        "pygments.plugin.iter_entry_points"
    ],
    "pygments.plugin.iter_entry_points": [
        "pkg_resources",
        "importlib_metadata.EntryPoints.select",
        "<builtin>.hasattr",
        "importlib.metadata",
        "importlib_metadata.entry_points",
        "importlib_metadata",
        "importlib.metadata.entry_points"
    ],
    "importlib.metadata": [
        "importlib.metadata.MetadataPathFinder",
        "io",
        "importlib.metadata.EntryPoint",
        "csv",
        "collections.namedtuple",
        "importlib.abc",
        "importlib.metadata.FileHash",
        "contextlib",
        "importlib",
        "importlib.metadata.PackagePath",
        "re",
        "email",
        "importlib.metadata.PackageNotFoundError",
        "zipfile",
        "importlib.metadata.Prepared",
        "importlib.metadata.Distribution",
        "posixpath",
        "abc",
        "importlib.metadata.DistributionFinder",
        "pathlib",
        "importlib.metadata.PathDistribution",
        "functools",
        "collections",
        "operator",
        "importlib.metadata.FastPath",
        "os",
        "configparser"
    ],
    "csv": [
        "csv.excel_tab",
        "csv.unix_dialect",
        "io",
        "_csv",
        "csv.Dialect",
        "csv.DictWriter",
        "re",
        "csv.Sniffer",
        "csv.DictReader",
        "csv.excel"
    ],
    "_csv": [],
    "csv.Dialect": [],
    "csv.excel": [],
    "csv.excel_tab": [],
    "csv.unix_dialect": [],
    "csv.DictReader": [
        "<builtin>.property"
    ],
    "csv.DictWriter": [],
    "csv.Sniffer": [],
    "importlib.metadata.PackageNotFoundError": [],
    "importlib.metadata.EntryPoint": [
        "<builtin>.property",
        "re.compile",
        "<builtin>.classmethod"
    ],
    "importlib.metadata.PackagePath": [],
    "importlib.metadata.FileHash": [],
    "importlib.metadata.Distribution": [
        "<builtin>.property",
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "importlib.metadata.DistributionFinder": [
        "importlib.metadata.DistributionFinder.Context.__init__",
        "abc.abstractmethod",
        "importlib.metadata.DistributionFinder.Context"
    ],
    "importlib.metadata.DistributionFinder.Context": [
        "<builtin>.property"
    ],
    "importlib.metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "<builtin>.vars": [],
    "importlib.metadata.FastPath": [],
    "importlib.metadata.Prepared": [],
    "importlib.metadata.MetadataPathFinder": [
        "importlib.metadata.DistributionFinder.Context.__init__",
        "<builtin>.classmethod"
    ],
    "importlib.metadata.PathDistribution": [],
    "importlib_metadata": [
        "csv",
        "importlib_metadata.PackageNotFoundError",
        "importlib.abc",
        "importlib_metadata.PathDistribution",
        "importlib_metadata.MetadataPathFinder",
        "importlib_metadata.FileHash",
        "importlib_metadata.PackagePath",
        "contextlib",
        "importlib_metadata.EntryPoint",
        "importlib",
        "importlib_metadata.DistributionFinder",
        "typing",
        "importlib_metadata.Prepared",
        "re",
        "email",
        "importlib_metadata.EntryPoints",
        "zipp",
        "importlib_metadata._compat",
        "importlib_metadata._itertools",
        "importlib_metadata.DeprecatedTuple",
        "posixpath",
        "abc",
        "importlib_metadata._py39compat",
        "warnings",
        "importlib_metadata.Sectioned",
        "pathlib",
        "importlib_metadata.FastPath",
        "importlib_metadata.Distribution",
        "functools",
        "importlib_metadata._meta",
        "collections",
        "textwrap",
        "importlib_metadata._adapters",
        "operator",
        "importlib_metadata.Lookup",
        "os"
    ],
    "zipp": [
        "zipp.Path",
        "contextlib",
        "io",
        "fnmatch",
        "pathlib",
        "zipp.py310compat",
        "zipp.CompleteDirs",
        "posixpath",
        "re",
        "zipp.InitializedState",
        "zipfile",
        "zipp.FastLookup"
    ],
    "zipp.py310compat": [
        "<str>.replace",
        "<builtin>.eval",
        "io"
    ],
    "zipp.InitializedState": [],
    "zipp.CompleteDirs": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "zipp.FastLookup": [],
    "zipp.Path": [
        "<builtin>.property"
    ],
    "importlib_metadata._adapters": [
        "importlib_metadata._adapters.Message",
        "textwrap",
        "re",
        "email.message",
        "importlib_metadata._text"
    ],
    "importlib_metadata._text": [
        "re",
        "importlib_metadata._text.FoldedCase"
    ],
    "importlib_metadata._text.FoldedCase": [
        "_functools.method_cache"
    ],
    "_functools.method_cache": [],
    "importlib_metadata._adapters.Message": [
        "<builtin>.property",
        "<builtin>.map",
        "<builtin>.set"
    ],
    "importlib_metadata._meta": [
        "importlib_metadata._meta.SimplePath",
        "importlib_metadata._compat",
        "typing",
        "importlib_metadata._meta.PackageMetadata",
        "typing.TypeVar.__init__"
    ],
    "importlib_metadata._compat": [
        "importlib_metadata._compat.NullFinder",
        "typing",
        "platform",
        "typing_extensions"
    ],
    "importlib_metadata._compat.NullFinder": [
        "<builtin>.staticmethod"
    ],
    "importlib_metadata._meta.PackageMetadata": [
        "<builtin>.property"
    ],
    "importlib_metadata._meta.SimplePath": [
        "<builtin>.property"
    ],
    "importlib_metadata._py39compat": [
        "typing"
    ],
    "importlib_metadata._itertools": [],
    "importlib_metadata.PackageNotFoundError": [
        "<builtin>.property"
    ],
    "importlib_metadata.Sectioned": [
        "<str>.lstrip",
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "textwrap.dedent"
    ],
    "textwrap.dedent": [
        "re.sub",
        "<builtin>.zip",
        "<builtin>.enumerate",
        "<str>.split"
    ],
    "<str>.lstrip": [],
    "importlib_metadata.DeprecatedTuple": [
        "importlib_metadata._compat.pypy_partial"
    ],
    "importlib_metadata._compat.pypy_partial": [
        "platform.python_implementation"
    ],
    "importlib_metadata.EntryPoint": [
        "<builtin>.property",
        "re.compile"
    ],
    "importlib_metadata.EntryPoints": [
        "<builtin>.property",
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "importlib_metadata.PackagePath": [],
    "importlib_metadata.FileHash": [],
    "importlib_metadata.Distribution": [
        "<builtin>.property",
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "importlib_metadata.DistributionFinder": [
        "importlib_metadata.DistributionFinder.Context.__init__",
        "importlib_metadata.DistributionFinder.Context",
        "abc.abstractmethod"
    ],
    "importlib_metadata.DistributionFinder.Context": [
        "<builtin>.property"
    ],
    "importlib_metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "importlib_metadata.FastPath": [
        "_functools.method_cache",
        "functools.lru_cache.decorating_function",
        "functools._lru_cache_wrapper.wrapper",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "importlib_metadata.Lookup": [],
    "importlib_metadata.Prepared": [
        "<builtin>.staticmethod"
    ],
    "importlib_metadata.MetadataPathFinder": [
        "importlib_metadata.DistributionFinder.Context.__init__",
        "<builtin>.classmethod"
    ],
    "importlib_metadata.PathDistribution": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "pkg_resources": [
        "pkg_resources.IResourceProvider",
        "io",
        "pkg_resources._call_aside",
        "pkg_resources.NoDists",
        "pkg_resources.VersionConflict",
        "<builtin>.hasattr",
        "pkg_resources.EggInfoDistribution",
        "pkg_resources.Requirement",
        "pkg_resources.MemoizedZipManifests",
        "re.compile",
        "imp",
        "pkg_resources.PathMetadata",
        "email.parser",
        "pkg_resources.ResolutionError",
        "pkg_resources.DistInfoDistribution",
        "pkg_resources._declare_state",
        "inspect",
        "pkg_resources.ContextualVersionConflict",
        "pkg_resources.NullProvider",
        "importlib",
        "pkg_resources.PkgResourcesDeprecationWarning",
        "<builtin>.globals",
        "pkg_resources.EggProvider",
        "re",
        "stat",
        "plistlib",
        "pkgutil",
        "zipfile",
        "pkg_resources.Environment",
        "pkg_resources.register_namespace_handler",
        "pkg_resources._ReqExtras",
        "<builtin>.RuntimeError",
        "pkg_resources.UnknownExtra",
        "pkg_resources.RequirementParseError",
        "pkg_resources.PEP440Warning",
        "pkg_resources.extern.jaraco.text",
        "pkg_resources.register_loader_type",
        "pkg_resources.EmptyProvider.__init__",
        "pkg_resources.ZipProvider",
        "pkg_resources.register_finder",
        "pkg_resources.EntryPoint",
        "pkg_resources.DefaultProvider._register",
        "pkg_resources.EggMetadata",
        "posixpath",
        "pkg_resources.Distribution",
        "pkg_resources.WorkingSet",
        "warnings.filterwarnings",
        "ntpath",
        "pkg_resources.ResourceManager",
        "warnings",
        "pkg_resources.FileMetadata",
        "pkg_resources.DefaultProvider",
        "pkg_resources.IMetadataProvider",
        "pkg_resources.DistributionNotFound",
        "pkg_resources.EmptyProvider",
        "tempfile",
        "functools",
        "collections",
        "pkg_resources.ZipManifests",
        "textwrap",
        "importlib.machinery",
        "operator",
        "<builtin>.__import__",
        "pkg_resources.ExtractionError",
        "os",
        "platform",
        "types"
    ],
    "pkgutil": [
        "importlib",
        "importlib.util",
        "functools",
        "collections",
        "collections.namedtuple",
        "pkgutil.ImpLoader",
        "importlib.machinery",
        "posixpath",
        "pkgutil.ImpImporter",
        "os",
        "functools.singledispatch",
        "warnings",
        "types"
    ],
    "functools.singledispatch": [
        "types",
        "weakref.WeakKeyDictionary.__init__",
        "weakref",
        "functools.update_wrapper",
        "<builtin>.getattr"
    ],
    "pkgutil.ImpImporter": [],
    "pkgutil.ImpLoader": [],
    "plistlib": [
        "io",
        "plistlib._PlistParser",
        "plistlib._PlistWriter",
        "plistlib._DumbXMLWriter",
        "re.compile",
        "plistlib.UID",
        "plistlib._BinaryPlistWriter",
        "plistlib.Data",
        "contextlib",
        "<builtin>.globals",
        "xml.parsers.expat",
        "<builtin>.object",
        "<builtin>.dict",
        "re",
        "contextlib.contextmanager",
        "plistlib._BinaryPlistParser",
        "datetime",
        "struct",
        "warnings",
        "plistlib.InvalidFileException",
        "binascii",
        "enum",
        "codecs",
        "os"
    ],
    "xml.parsers.expat": [
        "pyexpat"
    ],
    "pyexpat": [],
    "plistlib.Data": [
        "<builtin>.classmethod"
    ],
    "plistlib.UID": [],
    "plistlib._PlistParser": [],
    "plistlib._DumbXMLWriter": [],
    "plistlib._PlistWriter": [],
    "plistlib.InvalidFileException": [],
    "plistlib._BinaryPlistParser": [],
    "plistlib._BinaryPlistWriter": [],
    "imp": [
        "importlib._bootstrap_external",
        "warnings.warn",
        "imp._LoadCompiledCompatibility",
        "importlib._bootstrap",
        "tokenize",
        "importlib",
        "importlib.util",
        "imp._LoadSourceCompatibility",
        "importlib.machinery",
        "imp.NullImporter",
        "os",
        "imp._HackedGetData",
        "warnings",
        "types"
    ],
    "importlib._bootstrap": [
        "importlib._bootstrap._ImportLockContext",
        "importlib._bootstrap._DeadlockError",
        "importlib._bootstrap.FrozenImporter",
        "importlib._bootstrap.ModuleSpec",
        "importlib._bootstrap._DummyModuleLock",
        "<builtin>.object",
        "importlib._bootstrap._ModuleLock",
        "importlib._bootstrap.BuiltinImporter",
        "importlib._bootstrap._ModuleLockManager"
    ],
    "importlib._bootstrap._DeadlockError": [],
    "importlib._bootstrap._ModuleLock": [],
    "importlib._bootstrap._DummyModuleLock": [],
    "importlib._bootstrap._ModuleLockManager": [],
    "importlib._bootstrap.ModuleSpec": [
        "<builtin>.property"
    ],
    "importlib._bootstrap.BuiltinImporter": [
        "importlib._bootstrap._requires_builtin",
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap._requires_builtin": [
        "importlib._bootstrap._wrap"
    ],
    "importlib._bootstrap._wrap": [
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "<builtin>.setattr"
    ],
    "importlib._bootstrap.FrozenImporter": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "importlib._bootstrap._requires_frozen"
    ],
    "importlib._bootstrap._requires_frozen": [
        "importlib._bootstrap._wrap"
    ],
    "importlib._bootstrap._ImportLockContext": [],
    "importlib._bootstrap_external": [
        "importlib._bootstrap_external._NamespaceLoader",
        "importlib._bootstrap_external.FileFinder",
        "importlib._bootstrap_external.SourceFileLoader",
        "importlib._bootstrap_external._LoaderBasics",
        "importlib._bootstrap_external.PathFinder",
        "<builtin>.type",
        "importlib._bootstrap_external.WindowsRegistryFinder",
        "importlib._bootstrap_external.ExtensionFileLoader",
        "<builtin>.object",
        "importlib._bootstrap_external._NamespacePath",
        "<int>.to_bytes",
        "importlib._bootstrap_external.SourcelessFileLoader",
        "importlib._bootstrap_external.SourceLoader",
        "importlib._bootstrap_external.FileLoader"
    ],
    "<int>.to_bytes": [],
    "importlib._bootstrap_external.WindowsRegistryFinder": [
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap_external._LoaderBasics": [],
    "importlib._bootstrap_external.SourceLoader": [],
    "importlib._bootstrap_external.FileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external._check_name": [
        "importlib._bootstrap_external._check_name._wrap"
    ],
    "importlib._bootstrap_external._check_name._wrap": [
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "<builtin>.setattr"
    ],
    "importlib._bootstrap_external.SourceFileLoader": [],
    "importlib._bootstrap_external.SourcelessFileLoader": [],
    "importlib._bootstrap_external.ExtensionFileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external._NamespacePath": [],
    "importlib._bootstrap_external._NamespaceLoader": [
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap_external.PathFinder": [
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap_external.FileFinder": [
        "<builtin>.classmethod"
    ],
    "imp.NullImporter": [],
    "imp._HackedGetData": [],
    "imp._LoadSourceCompatibility": [],
    "imp._LoadCompiledCompatibility": [],
    "pkg_resources.extern.jaraco.text": [
        "pkg_resources.extern.jaraco.functools",
        "importlib.resources",
        "functools",
        "pkg_resources.extern.jaraco.text.WordSet",
        "pkg_resources.extern.jaraco.text.Stripper",
        "textwrap",
        "pkg_resources.extern.jaraco.text.Splitter",
        "pkg_resources.extern.jaraco.text.SeparatedValues",
        "re",
        "pkg_resources.extern.jaraco.context.ExceptionTrap.__init__",
        "pkg_resources.extern.jaraco.context.ExceptionTrap.passes",
        "functools.singledispatch",
        "pkg_resources.extern.jaraco.text.FoldedCase",
        "pkg_resources.extern.jaraco.context"
    ],
    "pkg_resources.extern.jaraco.functools": [
        "inspect",
        "functools",
        "typing",
        "collections",
        "pkg_resources.extern.jaraco.functools.Throttler",
        "typing.TypeVar.__init__",
        "types"
    ],
    "pkg_resources.extern.jaraco.functools.Throttler": [
        "<builtin>.float"
    ],
    "pkg_resources.extern.jaraco.context": [
        "contextlib",
        "pkg_resources.extern.jaraco.context.suppress",
        "tempfile",
        "shutil",
        "functools",
        "operator",
        "os",
        "subprocess",
        "pkg_resources.extern.jaraco.context.ExceptionTrap",
        "contextlib.contextmanager"
    ],
    "pkg_resources.extern.jaraco.context.ExceptionTrap": [
        "<builtin>.property"
    ],
    "pkg_resources.extern.jaraco.context.suppress": [],
    "pkg_resources.extern.jaraco.text.FoldedCase": [
        "pkg_resources.extern.jaraco.functools.method_cache"
    ],
    "pkg_resources.extern.jaraco.functools.method_cache": [
        "pkg_resources.extern.jaraco.functools._special_method_cache"
    ],
    "pkg_resources.extern.jaraco.functools._special_method_cache": [],
    "pkg_resources.extern.jaraco.context.ExceptionTrap.__init__": [],
    "pkg_resources.extern.jaraco.context.ExceptionTrap.passes": [
        "pkg_resources.extern.jaraco.context.ExceptionTrap.raises"
    ],
    "pkg_resources.extern.jaraco.context.ExceptionTrap.raises": [
        "functools.wraps"
    ],
    "pkg_resources.extern.jaraco.text.Splitter": [],
    "pkg_resources.extern.jaraco.text.WordSet": [
        "re.compile",
        "<builtin>.classmethod"
    ],
    "pkg_resources.extern.jaraco.text.SeparatedValues": [],
    "pkg_resources.extern.jaraco.text.Stripper": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "pkg_resources.PEP440Warning": [],
    "pkg_resources.ResolutionError": [],
    "pkg_resources.VersionConflict": [
        "<builtin>.property"
    ],
    "pkg_resources.ContextualVersionConflict": [
        "<builtin>.property"
    ],
    "pkg_resources.DistributionNotFound": [
        "<builtin>.property"
    ],
    "pkg_resources.UnknownExtra": [],
    "pkg_resources.IMetadataProvider": [],
    "pkg_resources.IResourceProvider": [],
    "pkg_resources.WorkingSet": [
        "<builtin>.classmethod"
    ],
    "pkg_resources._ReqExtras": [],
    "pkg_resources.Environment": [
        "pkg_resources.get_supported_platform"
    ],
    "pkg_resources.get_supported_platform": [
        "pkg_resources.get_build_platform",
        "pkg_resources._macos_vers"
    ],
    "pkg_resources.get_build_platform": [
        "<builtin>.int",
        "sysconfig",
        "<str>.startswith",
        "sysconfig.get_platform",
        "pkg_resources._macos_arch",
        "pkg_resources._macos_vers"
    ],
    "sysconfig": [
        "posixpath.normpath",
        "<str>.lower",
        "ntpath.join",
        "sysconfig._get_default_scheme",
        "sysconfig.is_python_build",
        "sysconfig._fix_pcbuild",
        "ntpath.dirname",
        "posixpath",
        "ntpath.normpath",
        "posixpath.dirname",
        "sysconfig._safe_realpath",
        "posixpath.join",
        "os",
        "<str>.endswith",
        "<builtin>.getattr"
    ],
    "ntpath.normpath": [
        "<builtin>.isinstance",
        "<str>.startswith",
        "<builtin>.len",
        "<str>.replace",
        "os._fspath",
        "<str>.lstrip",
        "ntpath.splitdrive",
        "<str>.split",
        "<str>.endswith"
    ],
    "sysconfig._safe_realpath": [
        "posixpath.realpath"
    ],
    "posixpath.realpath": [
        "os._fspath",
        "posixpath._joinrealpath",
        "posixpath.abspath"
    ],
    "posixpath._joinrealpath": [
        "posixpath._joinrealpath",
        "<builtin>.isinstance",
        "posixpath.split",
        "posixpath.join",
        "posixpath.islink",
        "posixpath.isabs"
    ],
    "posixpath.split": [
        "os._fspath",
        "posixpath._get_sep",
        "<str>.rfind",
        "<builtin>.len"
    ],
    "posixpath.islink": [
        "stat.S_ISLNK"
    ],
    "stat.S_ISLNK": [
        "stat.S_IFMT"
    ],
    "sysconfig._fix_pcbuild": [
        "<str>.startswith",
        "posixpath.normcase",
        "ntpath.normcase"
    ],
    "sysconfig.is_python_build": [
        "sysconfig._is_python_source_dir"
    ],
    "sysconfig._is_python_source_dir": [
        "genericpath.isfile",
        "posixpath.join",
        "ntpath.join"
    ],
    "sysconfig._get_default_scheme": [],
    "sysconfig.get_platform": [
        "_osx_support.get_platform_osx",
        "<builtin>.int",
        "_osx_support",
        "sysconfig.get_config_vars",
        "<builtin>.hasattr",
        "re",
        "re.compile"
    ],
    "_osx_support": [
        "re",
        "os"
    ],
    "sysconfig.get_config_vars": [
        "_osx_support.customize_config_vars",
        "_osx_support",
        "sysconfig._getuserbase",
        "ntpath.join",
        "sysconfig._init_non_posix",
        "ntpath.dirname",
        "<list>.append",
        "sysconfig.get_makefile_filename",
        "posixpath.dirname",
        "posixpath.join",
        "sysconfig._safe_realpath",
        "<map>.get",
        "sysconfig._init_posix"
    ],
    "sysconfig._init_non_posix": [
        "posixpath.dirname",
        "sysconfig.get_path",
        "ntpath.dirname",
        "sysconfig._safe_realpath"
    ],
    "sysconfig.get_path": [
        "sysconfig.get_paths"
    ],
    "sysconfig.get_paths": [
        "sysconfig._expand_vars"
    ],
    "sysconfig._expand_vars": [
        "sysconfig._extend_dict",
        "sysconfig._subst_vars",
        "sysconfig.get_config_vars",
        "ntpath.expanduser",
        "posixpath.normpath",
        "posixpath.expanduser",
        "ntpath.normpath"
    ],
    "sysconfig._extend_dict": [
        "<map>.keys"
    ],
    "sysconfig._subst_vars": [
        "<builtin>.AttributeError"
    ],
    "<builtin>.AttributeError": [],
    "sysconfig._init_posix": [
        "<builtin>.__import__",
        "<builtin>.globals",
        "sysconfig._get_sysconfigdata_name",
        "<builtin>.locals"
    ],
    "sysconfig._get_sysconfigdata_name": [
        "<builtin>.getattr"
    ],
    "sysconfig._getuserbase": [
        "sysconfig._getuserbase.joinuser"
    ],
    "sysconfig._getuserbase.joinuser": [
        "posixpath.join",
        "posixpath.expanduser",
        "ntpath.expanduser",
        "ntpath.join"
    ],
    "sysconfig.get_makefile_filename": [
        "sysconfig.get_path",
        "posixpath.join",
        "<builtin>.hasattr",
        "ntpath.join"
    ],
    "_osx_support.customize_config_vars": [
        "_osx_support._remove_universal_flags",
        "_osx_support._override_all_archs",
        "_osx_support._supports_universal_builds",
        "_osx_support._check_for_unavailable_sdk"
    ],
    "_osx_support._supports_universal_builds": [
        "<builtin>.int",
        "<builtin>.tuple",
        "<builtin>.bool",
        "<str>.split",
        "_osx_support._get_system_version"
    ],
    "_osx_support._get_system_version": [
        "<builtin>.open"
    ],
    "_osx_support._remove_universal_flags": [
        "re.sub",
        "_osx_support._save_modified_value"
    ],
    "_osx_support._save_modified_value": [],
    "_osx_support._override_all_archs": [
        "re.sub",
        "_osx_support._save_modified_value"
    ],
    "_osx_support._check_for_unavailable_sdk": [
        "_osx_support._save_modified_value",
        "re.sub",
        "re.search",
        "genericpath.exists"
    ],
    "re.search": [
        "re._compile"
    ],
    "_osx_support.get_platform_osx": [
        "<builtin>.int",
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.set",
        "<builtin>.len",
        "<map>.get",
        "re.findall",
        "<builtin>.sorted",
        "_osx_support._get_system_version"
    ],
    "re.findall": [
        "re._compile"
    ],
    "pkg_resources._macos_vers": [
        "plistlib.readPlist",
        "<builtin>.hasattr",
        "<list>.append",
        "platform.mac_ver",
        "genericpath.exists"
    ],
    "platform.mac_ver": [
        "platform._mac_ver_xml"
    ],
    "platform._mac_ver_xml": [
        "<builtin>.open",
        "plistlib",
        "plistlib.load",
        "genericpath.exists"
    ],
    "plistlib.load": [
        "<map>.values"
    ],
    "plistlib.readPlist": [
        "warnings.warn",
        "plistlib.load",
        "plistlib._maybe_open"
    ],
    "plistlib._maybe_open": [
        "<builtin>.open",
        "<builtin>.isinstance"
    ],
    "pkg_resources._macos_arch": [
        "<map>.get"
    ],
    "pkg_resources.ExtractionError": [],
    "pkg_resources.ResourceManager": [
        "<builtin>.staticmethod"
    ],
    "pkg_resources.NullProvider": [
        "<builtin>.staticmethod"
    ],
    "pkg_resources.register_loader_type": [],
    "pkg_resources.EggProvider": [],
    "pkg_resources.DefaultProvider": [
        "<builtin>.classmethod"
    ],
    "pkg_resources.DefaultProvider._register": [
        "<builtin>.type",
        "pkg_resources.register_loader_type",
        "<builtin>.getattr"
    ],
    "pkg_resources.EmptyProvider": [],
    "pkg_resources.EmptyProvider.__init__": [],
    "pkg_resources.ZipManifests": [
        "<builtin>.classmethod"
    ],
    "pkg_resources.MemoizedZipManifests": [
        "collections.namedtuple"
    ],
    "pkg_resources.ZipProvider": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "pkg_resources.FileMetadata": [],
    "pkg_resources.PathMetadata": [],
    "pkg_resources.EggMetadata": [],
    "pkg_resources._declare_state": [
        "<map>.update",
        "<builtin>.globals"
    ],
    "pkg_resources.register_finder": [],
    "pkg_resources.NoDists": [],
    "pkg_resources.register_namespace_handler": [],
    "pkg_resources.EntryPoint": [
        "re.compile",
        "<builtin>.classmethod"
    ],
    "pkg_resources.Distribution": [
        "<builtin>.property",
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "pkg_resources.EggInfoDistribution": [],
    "pkg_resources.DistInfoDistribution": [
        "<builtin>.property",
        "re.compile"
    ],
    "pkg_resources.RequirementParseError": [],
    "pkg_resources.Requirement": [
        "<builtin>.staticmethod"
    ],
    "pkg_resources._call_aside": [
        "pkg_resources._initialize",
        "pkg_resources._initialize_master_working_set"
    ],
    "pkg_resources._initialize": [
        "pkg_resources.ResourceManager.__init__",
        "<builtin>.dir",
        "<builtin>.getattr"
    ],
    "pkg_resources.ResourceManager.__init__": [],
    "<builtin>.dir": [],
    "pkg_resources.PkgResourcesDeprecationWarning": [],
    "pkg_resources._initialize_master_working_set": [
        "<builtin>.map",
        "<builtin>.tuple",
        "<builtin>.locals",
        "<builtin>.globals",
        "pkg_resources.WorkingSet.subscribe",
        "pkg_resources.WorkingSet._build_master",
        "<builtin>.list",
        "pkg_resources._declare_state"
    ],
    "pkg_resources.WorkingSet._build_master": [
        "__main__",
        "pkg_resources.WorkingSet.__init__",
        "pkg_resources.WorkingSet.require",
        "pkg_resources.WorkingSet._build_from_requirements"
    ],
    "pkg_resources.WorkingSet.__init__": [
        "pkg_resources.WorkingSet.add_entry"
    ],
    "pkg_resources.WorkingSet.add_entry": [
        "pkg_resources.find_distributions",
        "pkg_resources.WorkingSet.add"
    ],
    "pkg_resources.find_distributions": [
        "pkg_resources._find_adapter",
        "pkgutil.get_importer"
    ],
    "pkgutil.get_importer": [],
    "pkg_resources._find_adapter": [
        "inspect.getmro",
        "<builtin>.type",
        "pkg_resources._always_object",
        "<builtin>.getattr"
    ],
    "inspect.getmro": [],
    "pkg_resources._always_object": [],
    "pkg_resources.WorkingSet.add": [
        "pkg_resources.WorkingSet._added_new"
    ],
    "pkg_resources.WorkingSet._added_new": [],
    "__main__": [
        "json",
        "formats",
        "utils.constants",
        "argparse",
        "pythoncg"
    ],
    "argparse": [
        "argparse._StoreAction",
        "argparse.ArgumentError",
        "argparse._SubParsersAction",
        "argparse.RawTextHelpFormatter",
        "argparse.MetavarTypeHelpFormatter",
        "argparse.HelpFormatter",
        "argparse._AppendConstAction",
        "argparse._StoreFalseAction",
        "gettext",
        "argparse.Action",
        "argparse.Namespace",
        "re",
        "argparse._CountAction",
        "argparse._MutuallyExclusiveGroup",
        "argparse.RawDescriptionHelpFormatter",
        "argparse._StoreTrueAction",
        "argparse._HelpAction",
        "argparse._ActionsContainer",
        "argparse.ArgumentParser",
        "argparse.FileType",
        "argparse._AppendAction",
        "shutil",
        "argparse._AttributeHolder",
        "argparse._ArgumentGroup",
        "argparse._ExtendAction",
        "os",
        "argparse.ArgumentDefaultsHelpFormatter",
        "argparse.ArgumentTypeError",
        "argparse._VersionAction",
        "argparse._StoreConstAction"
    ],
    "argparse._AttributeHolder": [],
    "argparse.HelpFormatter": [
        "argparse.HelpFormatter._Section"
    ],
    "argparse.HelpFormatter._Section": [],
    "argparse.RawDescriptionHelpFormatter": [],
    "argparse.RawTextHelpFormatter": [],
    "argparse.ArgumentDefaultsHelpFormatter": [],
    "argparse.MetavarTypeHelpFormatter": [],
    "argparse.ArgumentError": [],
    "argparse.ArgumentTypeError": [],
    "argparse.Action": [],
    "argparse._StoreAction": [],
    "argparse._StoreConstAction": [],
    "argparse._StoreTrueAction": [],
    "argparse._StoreFalseAction": [],
    "argparse._AppendAction": [],
    "argparse._AppendConstAction": [],
    "argparse._CountAction": [],
    "argparse._HelpAction": [],
    "argparse._VersionAction": [],
    "argparse._SubParsersAction": [
        "argparse._SubParsersAction._ChoicesPseudoAction"
    ],
    "argparse._SubParsersAction._ChoicesPseudoAction": [],
    "argparse._ExtendAction": [],
    "argparse.FileType": [],
    "argparse.Namespace": [],
    "argparse._ActionsContainer": [],
    "argparse._ArgumentGroup": [],
    "argparse._MutuallyExclusiveGroup": [],
    "argparse.ArgumentParser": [],
    "formats": [],
    "pythoncg": [
        "pythoncg.CallGraphGenerator",
        "machinery.scopes",
        "machinery.nodes",
        "processing.cgprocessor",
        "machinery.modules",
        "machinery.classes",
        "typing",
        "machinery.definitions",
        "processing.extProcessor",
        "machinery.callgraph",
        "utils",
        "machinery.key_err",
        "machinery.calls",
        "machinery.returns",
        "os",
        "machinery.imports",
        "machinery.gol"
    ],
    "processing.cgprocessor": [
        "machinery.scopes",
        "processing.cgprocessor.NsRow",
        "machinery.modules",
        "processing.cgprocessor.CallGraphProcessor",
        "functools",
        "machinery.definitions",
        "machinery.callgraph",
        "utils",
        "ast",
        "machinery.calls",
        "machinery.returns",
        "copy",
        "math"
    ],
    "utils": [],
    "machinery.callgraph": [
        "machinery.callgraph.CallGraphError",
        "re",
        "machinery.callgraph.CallGraph",
        "utils"
    ],
    "machinery.callgraph.CallGraph": [],
    "machinery.callgraph.CallGraphError": [],
    "machinery.calls": [
        "machinery.calls.CallItem",
        "heapq",
        "machinery.calls.CallManager",
        "utils"
    ],
    "machinery.calls.CallManager": [],
    "machinery.calls.CallItem": [],
    "machinery.scopes": [
        "symtable",
        "machinery.scopes.ScopeItem",
        "machinery.scopes.ScopeManager",
        "utils",
        "copy",
        "machinery.scopes.ScopeError"
    ],
    "symtable": [
        "symtable.SymbolTableFactory",
        "symtable.Symbol",
        "weakref",
        "symtable.Function",
        "symtable.SymbolTable",
        "symtable.Class",
        "symtable.SymbolTableFactory.__init__"
    ],
    "symtable.SymbolTableFactory": [],
    "symtable.SymbolTableFactory.__init__": [
        "weakref.WeakValueDictionary.__init__"
    ],
    "symtable.SymbolTable": [],
    "symtable.Function": [],
    "symtable.Class": [],
    "symtable.Symbol": [],
    "machinery.scopes.ScopeManager": [],
    "machinery.scopes.ScopeItem": [],
    "machinery.scopes.ScopeError": [],
    "machinery.definitions": [
        "heapq",
        "machinery.definitions.ChangeManager",
        "machinery.definitions.Definition",
        "machinery.definitions.DefinitionError",
        "machinery.definitions.ChangeItem",
        "utils",
        "machinery.definitions.PointItem",
        "machinery.gol",
        "machinery.definitions.DefinitionManager",
        "math"
    ],
    "machinery.gol": [],
    "machinery.definitions.PointItem": [
        "<builtin>.set"
    ],
    "machinery.definitions.DefinitionManager": [],
    "machinery.definitions.Definition": [],
    "machinery.definitions.ChangeManager": [],
    "machinery.definitions.ChangeItem": [],
    "machinery.definitions.DefinitionError": [],
    "machinery.modules": [
        "machinery.modules.ModuleManager",
        "machinery.modules.Module"
    ],
    "machinery.modules.ModuleManager": [],
    "machinery.modules.Module": [],
    "machinery.returns": [
        "machinery.returns.ReturnManager",
        "machinery.returns.ReturnItem",
        "utils"
    ],
    "machinery.returns.ReturnManager": [],
    "machinery.returns.ReturnItem": [],
    "processing.cgprocessor.NsRow": [],
    "processing.cgprocessor.CallGraphProcessor": [],
    "processing.extProcessor": [
        "machinery.scopes",
        "machinery.nodes",
        "machinery.modules",
        "processing.extProcessor.ExtProcessor",
        "machinery.classes",
        "functools",
        "machinery.definitions",
        "machinery.callgraph",
        "random",
        "utils",
        "processing.base",
        "ast",
        "machinery.imports"
    ],
    "machinery.classes": [
        "machinery.classes.ClassManager",
        "machinery.classes.ClassNode"
    ],
    "machinery.classes.ClassManager": [],
    "machinery.classes.ClassNode": [],
    "processing.base": [
        "machinery.definitions",
        "utils",
        "ast",
        "os",
        "processing.base.ProcessingBase"
    ],
    "processing.base.ProcessingBase": [
        "<builtin>.property"
    ],
    "machinery.imports": [
        "importlib",
        "machinery.imports.ImportManagerError",
        "utils",
        "ast",
        "machinery.imports.ImportManager",
        "os",
        "copy"
    ],
    "machinery.imports.ImportManager": [],
    "machinery.imports.ImportManagerError": [],
    "machinery.nodes": [
        "machinery.nodes.NodeManager"
    ],
    "machinery.nodes.NodeManager": [],
    "processing.extProcessor.ExtProcessor": [
        "<builtin>.set"
    ],
    "machinery.key_err": [
        "machinery.key_err.KeyErrors"
    ],
    "machinery.key_err.KeyErrors": [],
    "pythoncg.CallGraphGenerator": [
        "<builtin>.set"
    ],
    "utils.constants": [],
    "pkg_resources.WorkingSet.require": [
        "pkg_resources.parse_requirements",
        "pkg_resources.WorkingSet.resolve",
        "pkg_resources.WorkingSet.add"
    ],
    "pkg_resources.parse_requirements": [
        "pkg_resources.extern.jaraco.text.join_continuation",
        "<builtin>.map",
        "pkg_resources.extern.jaraco.text.yield_lines"
    ],
    "pkg_resources.extern.jaraco.text.yield_lines": [
        "<builtin>.map"
    ],
    "pkg_resources.extern.jaraco.text.join_continuation": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "pkg_resources.WorkingSet.resolve": [
        "pkg_resources.Environment.best_match",
        "pkg_resources.WorkingSet.__init__",
        "_collections.defaultdict",
        "pkg_resources._ReqExtras.markers_pass",
        "<list>.append",
        "pkg_resources.VersionConflict.with_context",
        "pkg_resources.Environment.__init__",
        "<map>.get",
        "<builtin>.list"
    ],
    "pkg_resources._ReqExtras.markers_pass": [
        "<builtin>.any"
    ],
    "pkg_resources.Environment.__init__": [
        "pkg_resources.Environment.scan"
    ],
    "pkg_resources.Environment.scan": [
        "pkg_resources.Environment.add",
        "pkg_resources.find_distributions"
    ],
    "pkg_resources.Environment.add": [
        "pkg_resources.Environment.can_add",
        "operator.attrgetter.__init__"
    ],
    "pkg_resources.Environment.can_add": [
        "pkg_resources.compatible_platforms"
    ],
    "pkg_resources.compatible_platforms": [
        "<builtin>.int"
    ],
    "pkg_resources.Environment.best_match": [
        "pkg_resources.WorkingSet.find",
        "pkg_resources.Environment.obtain"
    ],
    "pkg_resources.WorkingSet.find": [
        "<map>.get"
    ],
    "pkg_resources.Environment.obtain": [],
    "pkg_resources.VersionConflict.with_context": [],
    "pkg_resources.WorkingSet._build_from_requirements": [
        "pkg_resources.WorkingSet.__init__",
        "pkg_resources.WorkingSet.add_entry",
        "pkg_resources.WorkingSet.add",
        "pkg_resources.WorkingSet.resolve",
        "pkg_resources.Environment.__init__",
        "pkg_resources.parse_requirements"
    ],
    "pkg_resources.WorkingSet.subscribe": [
        "pkg_resources.WorkingSet.__iter__",
        "<list>.append",
        "pkg_resources._initialize_master_working_set.<lambda1>"
    ],
    "pkg_resources.WorkingSet.__iter__": [],
    "pkg_resources._initialize_master_working_set.<lambda1>": [],
    "importlib_metadata.entry_points": [
        "importlib_metadata.EntryPoints.select",
        "importlib_metadata.distributions"
    ],
    "importlib_metadata.distributions": [
        "importlib_metadata.Distribution.discover"
    ],
    "importlib_metadata.Distribution.discover": [
        "<builtin>.ValueError",
        "importlib_metadata.DistributionFinder.Context.__init__",
        "importlib_metadata.Distribution._discover_resolvers"
    ],
    "importlib_metadata.Distribution._discover_resolvers": [
        "<builtin>.filter",
        "<builtin>.getattr"
    ],
    "importlib_metadata.EntryPoints.select": [
        "importlib_metadata._py39compat.ep_matches"
    ],
    "importlib_metadata._py39compat.ep_matches": [
        "EntryPoint"
    ],
    "EntryPoint": [],
    "importlib.metadata.entry_points": [
        "operator.attrgetter.__init__",
        "<builtin>.tuple",
        "importlib.metadata.distributions",
        "<builtin>.sorted"
    ],
    "importlib.metadata.distributions": [
        "importlib.metadata.Distribution.discover"
    ],
    "importlib.metadata.Distribution.discover": [
        "<builtin>.ValueError",
        "importlib.metadata.DistributionFinder.Context.__init__",
        "importlib.metadata.Distribution._discover_resolvers"
    ],
    "importlib.metadata.Distribution._discover_resolvers": [
        "<builtin>.filter",
        "<builtin>.getattr"
    ],
    "rich.markup.escape": [],
    "rich_cli.__main__._line_range": [
        "rich_cli.__main__.on_error"
    ],
    "rich.syntax.Syntax.__init__": [
        "rich.syntax.Syntax.get_theme",
        "rich.style.Style.__init__",
        "<builtin>.set"
    ],
    "rich.syntax.Syntax.get_theme": [
        "rich.syntax.ANSISyntaxTheme.__init__",
        "<builtin>.isinstance",
        "rich.syntax.PygmentsSyntaxTheme.__init__"
    ],
    "rich.syntax.PygmentsSyntaxTheme.__init__": [
        "rich.style.Style.__init__",
        "pygments.styles.get_style_by_name",
        "<builtin>.isinstance"
    ],
    "pygments.styles.get_style_by_name": [
        "<builtin>.__import__",
        "<str>.title",
        "pygments.plugin.find_plugin_styles",
        "<builtin>.getattr"
    ],
    "pygments.plugin.find_plugin_styles": [
        "pygments.plugin.iter_entry_points"
    ],
    "<str>.title": [],
    "rich.syntax.ANSISyntaxTheme.__init__": [
        "rich.style.Style.null"
    ],
    "rich_cli.__main__.render_ipynb": [
        "rich.text.Text.from_markup",
        "json.loads",
        "<builtin>.len",
        "rich_cli.__main__._line_range",
        "json",
        "rich.syntax.Syntax.__init__",
        "rich.console.Group.__init__",
        "rich.panel",
        "rich.console",
        "rich.panel.Panel.__init__",
        "<str>.splitlines",
        "<builtin>.isinstance",
        "<str>.rstrip",
        "rich.text.Text.__init__",
        "rich.text.Text.from_ansi",
        "rich.syntax",
        "rich_cli.__main__.read_resource",
        "rich_cli.markdown",
        "rich.markdown.Markdown.__init__"
    ],
    "rich_cli.markdown": [
        "rich.console",
        "rich.markdown",
        "rich_cli.markdown.CodeBlock",
        "rich.syntax",
        "typing",
        "rich.padding"
    ],
    "rich.markdown": [
        "rich.segment",
        "rich.markdown.Markdown",
        "rich._loop",
        "rich.markdown.ImageItem",
        "rich.markdown.MarkdownElement",
        "rich.markdown.CodeBlock",
        "rich.rule",
        "commonmark.blocks",
        "typing",
        "rich.markdown.ListItem",
        "rich.markdown.TextElement",
        "rich.panel",
        "rich.containers",
        "rich.text",
        "rich.console",
        "rich.style",
        "rich._stack",
        "rich.markdown.ListElement",
        "rich.markdown.HorizontalRule",
        "rich.markdown.Heading",
        "rich.syntax",
        "rich.markdown.BlockQuote",
        "rich.markdown.MarkdownContext",
        "rich.jupyter",
        "rich.markdown.Paragraph",
        "rich.markdown.UnknownElement",
        "rich.box"
    ],
    "commonmark.blocks": [
        "commonmark.blocks.Heading",
        "commonmark.node",
        "commonmark.blocks.Item",
        "commonmark.blocks.Parser",
        "commonmark.blocks.ThematicBreak",
        "re.compile",
        "commonmark.blocks.Block",
        "commonmark.blocks.HtmlBlock",
        "commonmark.blocks.BlockQuote",
        "commonmark.common",
        "<str>.lower",
        "<builtin>.dict",
        "__future__",
        "commonmark.blocks.List",
        "re",
        "commonmark.blocks.CodeBlock",
        "commonmark.blocks.Document",
        "commonmark.blocks.Paragraph",
        "commonmark.blocks.BlockStarts",
        "commonmark.inlines"
    ],
    "commonmark.common": [
        "html",
        "urllib.parse",
        "__future__",
        "re",
        "urllib",
        "re.compile",
        "commonmark.entitytrans"
    ],
    "urllib": [],
    "commonmark.entitytrans": [
        "re",
        "<builtin>.set",
        "re.compile",
        "__future__"
    ],
    "commonmark.inlines": [
        "commonmark.common",
        "commonmark.node",
        "html",
        "commonmark.normalize_reference",
        "__future__",
        "re",
        "re.compile",
        "commonmark.inlines.InlineParser",
        "commonmark.entitytrans"
    ],
    "commonmark.node": [
        "__future__",
        "commonmark.node.NodeWalker",
        "commonmark.node.Node",
        "re",
        "re.compile"
    ],
    "commonmark.node.NodeWalker": [],
    "commonmark.node.Node": [],
    "commonmark.normalize_reference": [
        "commonmark.normalize_reference._check_native",
        "commonmark.normalize_reference._parse_table",
        "re",
        "re.compile",
        "commonmark.normalize_reference._get_smp_regex"
    ],
    "commonmark.normalize_reference._parse_table": [
        "<builtin>.map",
        "<builtin>.int",
        "<builtin>.chr",
        "<builtin>.len",
        "<str>.split",
        "<builtin>.any"
    ],
    "commonmark.normalize_reference._check_native": [
        "<builtin>.chr"
    ],
    "commonmark.normalize_reference._get_smp_regex": [
        "<list>.append",
        "re.compile",
        "<builtin>.str",
        "<builtin>.sorted"
    ],
    "commonmark.inlines.InlineParser": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.Block": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.Document": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.List": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.BlockQuote": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.Item": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.Heading": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.ThematicBreak": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.CodeBlock": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.HtmlBlock": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.Paragraph": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.BlockStarts": [
        "<builtin>.staticmethod"
    ],
    "commonmark.blocks.Parser": [],
    "rich._stack": [
        "typing",
        "typing.TypeVar.__init__",
        "rich._stack.Stack"
    ],
    "rich._stack.Stack": [
        "<builtin>.property"
    ],
    "rich.rule": [
        "rich.text",
        "rich.console",
        "rich.measure",
        "rich.style",
        "typing",
        "rich.jupyter",
        "rich.align",
        "rich.rule.Rule",
        "rich.cells"
    ],
    "rich.rule.Rule": [],
    "rich.markdown.MarkdownElement": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.UnknownElement": [],
    "rich.markdown.TextElement": [],
    "rich.markdown.Paragraph": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.Heading": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.CodeBlock": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.BlockQuote": [],
    "rich.markdown.HorizontalRule": [],
    "rich.markdown.ListElement": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.ListItem": [],
    "rich.markdown.ImageItem": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.MarkdownContext": [
        "<builtin>.property"
    ],
    "rich.markdown.Markdown": [],
    "rich_cli.markdown.CodeBlock": [
        "<builtin>.classmethod"
    ],
    "json.loads": [
        "warnings.warn",
        "<builtin>.isinstance",
        "<str>.startswith",
        "<builtin>.TypeError",
        "decoder.JSONDecoder",
        "decoder.JSONDecodeError",
        "warnings",
        "json.detect_encoding"
    ],
    "json.detect_encoding": [
        "<map>",
        "<builtin>.len"
    ],
    "decoder.JSONDecodeError": [],
    "rich.markdown.Markdown.__init__": [
        "commonmark.blocks.Parser.parse",
        "commonmark.blocks.Parser.__init__"
    ],
    "commonmark.blocks.Parser.__init__": [
        "commonmark.inlines.InlineParser.__init__",
        "commonmark.node.Node.__init__"
    ],
    "commonmark.node.Node.__init__": [],
    "commonmark.inlines.InlineParser.__init__": [],
    "commonmark.blocks.Parser.parse": [
        "commonmark.blocks.Parser.process_inlines",
        "commonmark.blocks.Parser.incorporate_line",
        "re.split",
        "commonmark.blocks.Parser.finalize",
        "<builtin>.len",
        "<builtin>.range",
        "commonmark.node.Node.__init__"
    ],
    "commonmark.blocks.Parser.incorporate_line": [
        "commonmark.blocks.Parser.finalize",
        "<builtin>.ValueError",
        "commonmark.blocks.Parser.find_next_nonspace",
        "commonmark.blocks.Parser.advance_next_nonspace",
        "re.sub",
        "commonmark.blocks.Parser.add_line",
        "<builtin>.len",
        "re.search",
        "commonmark.blocks.Parser.add_child",
        "commonmark.blocks.Parser.close_unmatched_blocks",
        "<builtin>.getattr"
    ],
    "commonmark.blocks.Parser.find_next_nonspace": [],
    "commonmark.blocks.Parser.advance_next_nonspace": [],
    "commonmark.blocks.Parser.close_unmatched_blocks": [
        "commonmark.blocks.Parser.finalize"
    ],
    "commonmark.blocks.Parser.finalize": [],
    "commonmark.blocks.Parser.add_child": [
        "commonmark.node.Node.append_child",
        "commonmark.node.Node.__init__",
        "commonmark.blocks.Parser.finalize"
    ],
    "commonmark.node.Node.append_child": [
        "commonmark.node.Node.unlink"
    ],
    "commonmark.node.Node.unlink": [],
    "commonmark.blocks.Parser.add_line": [],
    "commonmark.blocks.Parser.process_inlines": [
        "commonmark.node.NodeWalker.nxt",
        "commonmark.node.Node.walker",
        "commonmark.inlines.InlineParser.parseInlines"
    ],
    "commonmark.node.Node.walker": [
        "commonmark.node.NodeWalker.__init__"
    ],
    "commonmark.node.NodeWalker.__init__": [],
    "commonmark.node.NodeWalker.nxt": [
        "<builtin>.next"
    ],
    "commonmark.inlines.InlineParser.parseInlines": [
        "commonmark.inlines.InlineParser.parseInline",
        "commonmark.inlines.InlineParser.processEmphasis"
    ],
    "commonmark.inlines.InlineParser.parseInline": [
        "commonmark.inlines.InlineParser.parseOpenBracket",
        "commonmark.inlines.InlineParser.parseString",
        "commonmark.inlines.InlineParser.parseCloseBracket",
        "commonmark.inlines.InlineParser.peek",
        "commonmark.inlines.InlineParser.parseBackslash",
        "commonmark.inlines.InlineParser.parseAutolink",
        "commonmark.inlines.InlineParser.parseEntity",
        "commonmark.inlines.InlineParser.parseBang",
        "commonmark.inlines.InlineParser.parseNewline",
        "<map>.get",
        "commonmark.inlines.InlineParser.parseBackticks",
        "commonmark.inlines.text",
        "commonmark.inlines.InlineParser.handleDelim",
        "commonmark.inlines.InlineParser.parseHtmlTag"
    ],
    "commonmark.inlines.InlineParser.peek": [
        "<builtin>.len"
    ],
    "commonmark.inlines.InlineParser.parseString": [
        "commonmark.inlines.InlineParser.match",
        "re.sub",
        "<map>.get",
        "commonmark.inlines.text"
    ],
    "commonmark.inlines.InlineParser.match": [
        "re.search"
    ],
    "commonmark.inlines.text": [
        "commonmark.node.Node.__init__"
    ],
    "commonmark.inlines.InlineParser.parseEntity": [
        "commonmark.inlines.InlineParser.match",
        "html.unescape",
        "commonmark.inlines.text",
        "commonmark.entitytrans._unescape"
    ],
    "html.unescape": [],
    "commonmark.entitytrans._unescape": [],
    "commonmark.inlines.InlineParser.parseAutolink": [
        "commonmark.common.normalize_uri",
        "commonmark.node.Node.__init__",
        "commonmark.inlines.text",
        "commonmark.inlines.InlineParser.match",
        "commonmark.node.Node.append_child"
    ],
    "commonmark.common.normalize_uri": [
        "urllib.parse.quote",
        "re.sub",
        "<builtin>.str"
    ],
    "commonmark.inlines.InlineParser.parseHtmlTag": [
        "commonmark.inlines.InlineParser.match",
        "commonmark.node.Node.__init__"
    ],
    "commonmark.inlines.InlineParser.parseCloseBracket": [
        "commonmark.inlines.InlineParser.spnl",
        "commonmark.inlines.InlineParser.peek",
        "commonmark.node.Node.__init__",
        "commonmark.inlines.InlineParser.processEmphasis",
        "commonmark.inlines.InlineParser.parseLinkTitle",
        "commonmark.inlines.InlineParser.removeBracket",
        "<map>.get",
        "commonmark.inlines.text",
        "re.search",
        "commonmark.inlines.InlineParser.parseLinkDestination",
        "commonmark.inlines.InlineParser.parseLinkLabel",
        "commonmark.node.Node.append_child"
    ],
    "commonmark.inlines.InlineParser.removeBracket": [],
    "commonmark.inlines.InlineParser.spnl": [
        "commonmark.inlines.InlineParser.match"
    ],
    "commonmark.inlines.InlineParser.parseLinkDestination": [
        "commonmark.common.unescape_string",
        "commonmark.inlines.InlineParser.peek",
        "commonmark.common.normalize_uri",
        "re.search",
        "commonmark.inlines.InlineParser.match"
    ],
    "commonmark.common.unescape_string": [
        "re.sub",
        "re.search"
    ],
    "commonmark.inlines.InlineParser.parseLinkTitle": [
        "commonmark.inlines.InlineParser.match",
        "commonmark.common.unescape_string"
    ],
    "commonmark.inlines.InlineParser.parseLinkLabel": [
        "commonmark.inlines.InlineParser.match",
        "<builtin>.len"
    ],
    "commonmark.inlines.InlineParser.processEmphasis": [
        "commonmark.inlines.InlineParser.removeDelimitersBetween",
        "commonmark.node.Node.__init__",
        "<builtin>.len",
        "commonmark.inlines.InlineParser.removeDelimiter",
        "commonmark.node.Node.append_child"
    ],
    "commonmark.inlines.InlineParser.removeDelimitersBetween": [],
    "commonmark.inlines.InlineParser.removeDelimiter": [],
    "commonmark.inlines.InlineParser.parseBang": [
        "commonmark.inlines.InlineParser.peek",
        "commonmark.inlines.InlineParser.addBracket",
        "commonmark.inlines.text"
    ],
    "commonmark.inlines.InlineParser.addBracket": [],
    "commonmark.inlines.InlineParser.parseOpenBracket": [
        "commonmark.inlines.InlineParser.addBracket",
        "commonmark.inlines.text"
    ],
    "commonmark.inlines.InlineParser.handleDelim": [
        "<map>.get",
        "commonmark.inlines.text",
        "commonmark.inlines.InlineParser.scanDelims"
    ],
    "commonmark.inlines.InlineParser.scanDelims": [
        "commonmark.inlines.InlineParser.peek",
        "re.search"
    ],
    "commonmark.inlines.InlineParser.parseBackticks": [
        "commonmark.inlines.InlineParser.match",
        "<builtin>.len",
        "commonmark.inlines.text",
        "commonmark.node.Node.__init__"
    ],
    "commonmark.inlines.InlineParser.parseBackslash": [
        "commonmark.inlines.InlineParser.peek",
        "commonmark.inlines.text",
        "re.search",
        "commonmark.node.Node.__init__"
    ],
    "commonmark.inlines.InlineParser.parseNewline": [
        "<builtin>.len",
        "re.sub",
        "commonmark.inlines.InlineParser.match",
        "commonmark.node.Node.__init__"
    ],
    "rich.panel.Panel.__init__": [],
    "rich.text.Text.from_markup": [
        "rich.markup.render",
        "rich.markup"
    ],
    "rich.markup.render": [
        "rich.text.Text.__init__",
        "<builtin>.isinstance",
        "rich.style.Style.__init__",
        "operator.attrgetter.__init__",
        "<builtin>.len",
        "rich.markup.render.pop_style",
        "rich.text.Text.append",
        "rich.style.Style.normalize",
        "ast.literal_eval",
        "<builtin>.str",
        "<builtin>.sorted",
        "rich.markup._parse",
        "rich._emoji_replace._emoji_replace"
    ],
    "rich._emoji_replace._emoji_replace": [
        "<map>.get"
    ],
    "rich.markup._parse": [
        "<builtin>.len"
    ],
    "rich.style.Style.normalize": [
        "rich.style.Style.parse",
        "<builtin>.str"
    ],
    "rich.markup.render.pop_style": [
        "<builtin>.KeyError",
        "<builtin>.reversed",
        "<builtin>.enumerate"
    ],
    "ast.literal_eval": [
        "ast.parse",
        "ast.literal_eval._convert",
        "<builtin>.isinstance"
    ],
    "ast.parse": [
        "<builtin>.compile",
        "<builtin>.isinstance"
    ],
    "ast.literal_eval._convert": [
        "ast.literal_eval._convert_signed_num",
        "<builtin>.map",
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "ast.literal_eval._convert_num",
        "<builtin>.set",
        "<builtin>.dict",
        "<builtin>.zip",
        "<builtin>.list"
    ],
    "ast.literal_eval._convert_signed_num": [
        "<builtin>.isinstance",
        "ast.literal_eval._convert_num"
    ],
    "ast.literal_eval._convert_num": [
        "<builtin>.ValueError",
        "<builtin>.type",
        "<builtin>.repr",
        "<builtin>.isinstance"
    ],
    "rich.text.Text.from_ansi": [
        "rich.text.Text.__init__",
        "rich.ansi",
        "rich.text.Text.join",
        "rich.ansi.AnsiDecoder.__init__",
        "rich.ansi.AnsiDecoder.decode"
    ],
    "rich.text.Text.join": [
        "rich.text.Text.join.iter_text",
        "<builtin>.len",
        "rich.text.Text.blank_copy",
        "<list>"
    ],
    "rich.text.Text.blank_copy": [
        "rich.text.Text.__init__"
    ],
    "rich.text.Text.join.iter_text": [
        "rich._loop.loop_last"
    ],
    "rich._loop.loop_last": [
        "<builtin>.iter",
        "<builtin>.next"
    ],
    "rich.console.Group.__init__": [],
    "rich_cli.__main__.render_csv": [
        "io",
        "csv",
        "rich.table.Table.add_column",
        "re.compile",
        "<builtin>.str",
        "rich.table.Table.__init__",
        "_io.StringIO",
        "re",
        "rich_cli.__main__.on_error",
        "rich.table.Table.add_row",
        "csv.Sniffer.sniff",
        "rich.table",
        "csv.Sniffer.has_header",
        "<builtin>.next",
        "operator.itemgetter.__init__",
        "rich_cli.__main__.read_resource",
        "csv.Sniffer.__init__",
        "<builtin>.enumerate",
        "operator",
        "<builtin>.iter",
        "rich.box"
    ],
    "csv.Sniffer.__init__": [],
    "csv.Sniffer.sniff": [
        "csv.Sniffer._guess_quote_and_delimiter",
        "csv.Sniffer.sniff.dialect",
        "csv.Sniffer._guess_delimiter"
    ],
    "csv.Sniffer._guess_quote_and_delimiter": [
        "re.compile",
        "<builtin>.max",
        "<map>.get",
        "re.escape"
    ],
    "csv.Sniffer._guess_delimiter": [
        "<builtin>.float",
        "<map>.keys",
        "<builtin>.chr",
        "<builtin>.sum",
        "<builtin>.len",
        "<builtin>.range",
        "<map>.items",
        "<map>.get",
        "<builtin>.max",
        "<builtin>.min",
        "<builtin>.filter",
        "<builtin>.list"
    ],
    "csv.Sniffer.sniff.dialect": [],
    "csv.Sniffer.has_header": [
        "csv.Sniffer.sniff",
        "_io.StringIO",
        "<map>.keys",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.range",
        "<map>.items",
        "<builtin>.list",
        "<builtin>.next"
    ],
    "rich.table.Table.__init__": [
        "<builtin>.isinstance",
        "rich.table.Table.add_column",
        "<builtin>.len",
        "rich.padding.Padding.unpack",
        "<builtin>.list"
    ],
    "rich.padding.Padding.unpack": [
        "<builtin>.ValueError",
        "typing.cast",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "typing.cast": [],
    "rich.table.Table.add_column": [
        "<builtin>.len"
    ],
    "rich.table.Table.add_row": [
        "rich.text.Text.__init__",
        "rich.protocol.is_renderable",
        "<builtin>.type",
        "<builtin>.enumerate",
        "<builtin>.len",
        "rich.table.Table.add_row.add_cell",
        "<builtin>.list"
    ],
    "rich.table.Table.add_row.add_cell": [],
    "rich.protocol.is_renderable": [
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "rich.console.Console.print_exception": [
        "rich.traceback.Traceback.__init__",
        "rich.traceback",
        "rich.console.Console.print"
    ],
    "rich.traceback": [
        "rich.pretty",
        "rich._loop",
        "rich.traceback.PathHighlighter",
        "rich.traceback.Frame",
        "rich.traceback.Stack",
        "rich.constrain",
        "pygments.lexers",
        "typing",
        "__future__",
        "rich.traceback.Traceback",
        "rich.scope",
        "rich.panel",
        "pygments.util",
        "pygments.token",
        "rich.text",
        "rich.console",
        "rich.traceback.Trace",
        "rich.theme",
        "rich.style",
        "dataclasses",
        "rich.highlighter",
        "traceback",
        "rich.traceback._SyntaxError",
        "rich.syntax",
        "platform",
        "os",
        "platform.system",
        "rich.columns",
        "types"
    ],
    "rich.columns": [
        "rich.constrain",
        "rich.text",
        "rich.console",
        "rich.measure",
        "rich.table",
        "typing",
        "collections",
        "operator",
        "rich.padding",
        "rich.jupyter",
        "rich.columns.Columns",
        "rich.align"
    ],
    "rich.columns.Columns": [],
    "rich.traceback.Frame": [],
    "rich.traceback._SyntaxError": [],
    "rich.traceback.Stack": [
        "dataclasses.field"
    ],
    "rich.traceback.Trace": [],
    "rich.traceback.PathHighlighter": [],
    "rich.traceback.Traceback": [
        "rich.console.group",
        "<builtin>.classmethod",
        "rich.console.group.decorator"
    ],
    "rich.console.group": [],
    "rich.console.group.decorator": [
        "functools.wraps"
    ],
    "rich.traceback.Traceback.__init__": [
        "posixpath.abspath",
        "posixpath.normpath",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "ntpath.abspath",
        "ntpath.dirname",
        "rich.syntax.Syntax.get_theme",
        "posixpath.dirname",
        "ntpath.normpath",
        "rich.traceback.Traceback.extract",
        "<builtin>.max"
    ],
    "rich.traceback.Traceback.extract": [
        "<builtin>.isinstance",
        "ntpath.join",
        "ntpath.isabs",
        "rich.pretty.traverse",
        "posixpath.join",
        "traceback.walk_tb",
        "rich",
        "rich.traceback.Traceback.extract.safe_str",
        "posixpath.isabs",
        "<builtin>.getattr"
    ],
    "rich": [
        "rich.console",
        "posixpath.abspath",
        "ntpath.abspath",
        "typing",
        "os",
        "rich._extension"
    ],
    "rich._extension": [
        "typing"
    ],
    "rich.traceback.Traceback.extract.safe_str": [
        "<builtin>.str"
    ],
    "rich.pretty.traverse": [
        "<builtin>.set",
        "rich.pretty.traverse._traverse"
    ],
    "rich.pretty.traverse._traverse": [
        "<builtin>.hasattr",
        "<builtin>.len",
        "rich._loop.loop_last",
        "rich.pretty._has_default_namedtuple_repr",
        "rich.pretty.traverse._traverse",
        "<builtin>.id",
        "<builtin>.str",
        "<builtin>.list",
        "itertools.islice",
        "rich.pretty._is_namedtuple",
        "rich.pretty.traverse.to_repr",
        "dataclasses.fields",
        "rich.pretty._is_dataclass_repr",
        "inspect.isclass",
        "<builtin>.type",
        "rich.pretty.traverse._traverse.iter_attrs",
        "<list>",
        "rich.pretty._is_attr_object",
        "rich.pretty._get_attr_fields",
        "<builtin>.enumerate",
        "rich.pretty._safe_isinstance",
        "rich.pretty.traverse._traverse.iter_rich_args",
        "<builtin>.iter",
        "dataclasses.is_dataclass",
        "<builtin>.getattr"
    ],
    "inspect.isclass": [
        "<builtin>.isinstance"
    ],
    "rich.pretty._is_attr_object": [
        "<builtin>.type"
    ],
    "dataclasses.is_dataclass": [
        "<builtin>.type",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "rich.pretty._safe_isinstance": [
        "<builtin>.isinstance"
    ],
    "rich.pretty._is_dataclass_repr": [],
    "rich.pretty._is_namedtuple": [
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "rich.pretty._has_default_namedtuple_repr": [
        "inspect.getfile"
    ],
    "inspect.getfile": [
        "inspect.ismodule",
        "<builtin>.type",
        "inspect.ismethod",
        "<builtin>.hasattr",
        "inspect.isframe",
        "<builtin>.TypeError",
        "inspect.iscode",
        "inspect.isclass",
        "inspect.istraceback",
        "inspect.isfunction",
        "<builtin>.getattr"
    ],
    "inspect.ismodule": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "inspect.istraceback": [
        "<builtin>.isinstance"
    ],
    "inspect.isframe": [
        "<builtin>.isinstance"
    ],
    "inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "rich.pretty.traverse.to_repr": [
        "rich.pretty._safe_isinstance",
        "<builtin>.repr",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "itertools.islice": [],
    "dataclasses.fields": [
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "<builtin>.getattr"
    ],
    "rich.pretty._get_attr_fields": [
        "<builtin>.type"
    ],
    "rich.pretty.traverse._traverse.iter_attrs": [
        "<builtin>.getattr"
    ],
    "rich.pretty.traverse._traverse.iter_rich_args": [
        "rich.pretty._safe_isinstance",
        "<builtin>.len"
    ],
    "rich._inspect": [
        "rich.pretty",
        "inspect",
        "rich.console",
        "rich.text",
        "rich.table",
        "typing",
        "rich.control",
        "rich.highlighter",
        "__future__",
        "rich._inspect.Inspect",
        "rich.jupyter",
        "rich.panel"
    ],
    "rich._inspect.Inspect": [],
    "rich._inspect.Inspect.__init__": [
        "rich._inspect.Inspect._make_title"
    ],
    "rich._inspect.Inspect._make_title": [
        "inspect.ismodule",
        "<builtin>.type",
        "<builtin>.callable",
        "inspect.isclass",
        "<builtin>.str"
    ],
    "rich_rst": [
        "io",
        "docutils.utils",
        "html.parser",
        "docutils.parsers.rst",
        "rich",
        "rich.align",
        "rich.rule",
        "pygments.lexers",
        "typing",
        "rich_rst.RestructuredText",
        "rich.traceback",
        "pygments.util",
        "rich.panel",
        "rich.text",
        "rich.traceback.install",
        "rich.console",
        "rich.table",
        "rich.style",
        "docutils.io",
        "rich_rst.MLStripper",
        "docutils.nodes",
        "rich_rst.RSTVisitor",
        "rich.syntax",
        "rich.jupyter",
        "rich.box"
    ],
    "html.parser": [
        "html",
        "re",
        "re.compile",
        "html.parser.HTMLParser",
        "_markupbase",
        "warnings"
    ],
    "_markupbase": [
        "_markupbase.ParserBase",
        "re",
        "re.compile"
    ],
    "_markupbase.ParserBase": [],
    "html.parser.HTMLParser": [],
    "docutils.io": [
        "docutils.io.ErrorOutput",
        "docutils.io.FileOutput",
        "docutils.io.StringInput",
        "docutils.io.InputError",
        "docutils.io.DocTreeInput",
        "docutils.io.BinaryFileOutput",
        "docutils.io.Output",
        "locale.getdefaultlocale",
        "re",
        "docutils.io.StringOutput",
        "locale",
        "docutils.io.OutputError",
        "docutils.io.Input",
        "locale.getlocale",
        "docutils.io.NullOutput",
        "warnings",
        "docutils.io.FileInput",
        "docutils.io.NullInput",
        "codecs",
        "os",
        "docutils"
    ],
    "docutils": [
        "docutils.ApplicationError",
        "docutils.Component",
        "collections",
        "collections.namedtuple",
        "docutils.SettingsSpec",
        "docutils.DataError",
        "docutils.TransformSpec",
        "docutils.VersionInfo"
    ],
    "docutils.VersionInfo": [],
    "docutils.ApplicationError": [],
    "docutils.DataError": [],
    "docutils.SettingsSpec": [],
    "docutils.TransformSpec": [],
    "docutils.Component": [],
    "locale.getlocale": [
        "locale._parse_localename",
        "<builtin>.TypeError",
        "locale.setlocale"
    ],
    "locale.setlocale": [],
    "locale._parse_localename": [
        "<builtin>.ValueError",
        "locale.normalize",
        "<builtin>.tuple",
        "<str>.split"
    ],
    "locale.normalize": [
        "<str>.lower",
        "<str>.replace",
        "<map>.get",
        "locale._append_modifier",
        "<str>.split",
        "locale._replace_encoding"
    ],
    "locale._append_modifier": [
        "<str>.partition",
        "locale._replace_encoding"
    ],
    "<str>.partition": [],
    "locale._replace_encoding": [
        "<str>.index",
        "encodings.normalize_encoding",
        "<str>.lower",
        "<str>.replace",
        "<map>.get"
    ],
    "<str>.index": [],
    "encodings.normalize_encoding": [
        "<list>.append",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "locale.getdefaultlocale": [
        "locale._parse_localename",
        "os"
    ],
    "docutils.io.InputError": [],
    "docutils.io.OutputError": [],
    "docutils.io.Input": [
        "re.compile"
    ],
    "docutils.io.Output": [],
    "docutils.io.ErrorOutput": [],
    "docutils.io.FileInput": [],
    "docutils.io.FileOutput": [],
    "docutils.io.BinaryFileOutput": [],
    "docutils.io.StringInput": [],
    "docutils.io.StringOutput": [],
    "docutils.io.NullInput": [],
    "docutils.io.NullOutput": [],
    "docutils.io.DocTreeInput": [],
    "docutils.nodes": [
        "docutils.nodes.PreBibliographic",
        "docutils.nodes.doctest_block",
        "docutils.nodes.NodeVisitor",
        "docutils.nodes.field",
        "docutils.nodes.option_argument",
        "docutils.nodes.date",
        "docutils.nodes.entry",
        "docutils.nodes.footer",
        "docutils.nodes.NodeFound",
        "docutils.nodes.field_name",
        "docutils.nodes.line_block",
        "docutils.nodes.Invisible",
        "docutils.nodes.rubric",
        "docutils.nodes._add_node_class_names",
        "docutils.nodes.error",
        "docutils.nodes.Referential",
        "docutils.nodes.Root",
        "docutils.nodes.topic",
        "docutils.nodes.danger",
        "docutils.nodes.row",
        "docutils.nodes.contact",
        "docutils.nodes.target",
        "docutils.nodes.admonition",
        "docutils.nodes.Targetable",
        "docutils.nodes.FixedTextElement",
        "docutils.nodes.version",
        "docutils.nodes.title",
        "docutils.nodes.important",
        "docutils.nodes.Part",
        "docutils.nodes.tgroup",
        "docutils.nodes.tip",
        "docutils.nodes.transition",
        "docutils.nodes.hint",
        "docutils.nodes.substitution_reference",
        "docutils.nodes.definition_list",
        "docutils.nodes.attribution",
        "docutils.nodes.field_list",
        "docutils.nodes.sidebar",
        "docutils.nodes.option_list",
        "docutils.nodes.enumerated_list",
        "docutils.nodes.line",
        "docutils.nodes.Element",
        "re.compile",
        "docutils.nodes.field_body",
        "docutils.nodes.SkipNode",
        "docutils.nodes.option_group",
        "docutils.nodes.meta",
        "docutils.nodes.bullet_list",
        "docutils.nodes.subtitle",
        "docutils.nodes.math_block",
        "docutils.nodes.description",
        "docutils.nodes.system_message",
        "re",
        "docutils.nodes.organization",
        "docutils.nodes.Resolvable",
        "docutils.nodes.SkipChildren",
        "docutils.nodes.Text",
        "docutils.nodes.literal_block",
        "docutils.nodes.container",
        "docutils.nodes.footnote_reference",
        "docutils.nodes.decoration",
        "docutils.nodes.Admonition",
        "docutils.nodes.citation_reference",
        "docutils.nodes.superscript",
        "docutils.nodes.comment",
        "docutils.nodes.paragraph",
        "docutils.nodes.TextElement",
        "<str>.split",
        "docutils.nodes.Titular",
        "docutils.nodes.term",
        "docutils.nodes.abbreviation",
        "docutils.nodes.colspec",
        "docutils.nodes.classifier",
        "docutils.nodes.Body",
        "docutils.nodes.citation",
        "docutils.nodes.TreePruningException",
        "docutils.nodes.Special",
        "docutils.nodes.subscript",
        "docutils.nodes.caption",
        "docutils.nodes.problematic",
        "docutils.nodes.document",
        "docutils.nodes.section",
        "docutils.nodes.tbody",
        "docutils.nodes.Sequential",
        "docutils.nodes.SkipDeparture",
        "docutils.nodes.Structural",
        "docutils.nodes.label",
        "docutils.nodes.option_list_item",
        "docutils.nodes.authors",
        "docutils.nodes.SparseNodeVisitor",
        "docutils.nodes.address",
        "docutils.nodes.thead",
        "docutils.nodes.table",
        "docutils.nodes.block_quote",
        "docutils.nodes.literal",
        "docutils.nodes.definition",
        "docutils.nodes.GenericNodeVisitor",
        "docutils.nodes.option",
        "docutils.nodes.generated",
        "docutils.nodes.copyright",
        "docutils.nodes.revision",
        "docutils.nodes.reprunicode",
        "warnings",
        "docutils.nodes.warning",
        "docutils.nodes.Decorative",
        "docutils.nodes.reference",
        "docutils.nodes.Bibliographic",
        "docutils.nodes.footnote",
        "docutils.nodes.SkipSiblings",
        "collections",
        "docutils.nodes.author",
        "docutils.nodes.header",
        "docutils.nodes.list_item",
        "docutils.nodes.StopTraversal",
        "docutils.nodes.option_string",
        "docutils.nodes.attention",
        "docutils.nodes.math",
        "docutils.nodes.General",
        "docutils.nodes.image",
        "docutils.nodes.BackLinkable",
        "docutils.nodes.definition_list_item",
        "docutils.nodes.acronym",
        "docutils.nodes.substitution_definition",
        "docutils.nodes.legend",
        "docutils.nodes.emphasis",
        "docutils.nodes.title_reference",
        "docutils.nodes.raw",
        "docutils.nodes.Labeled",
        "docutils.nodes.figure",
        "docutils.nodes.TreeCopyVisitor",
        "docutils.nodes.docinfo",
        "docutils.nodes.inline",
        "docutils.nodes.caution",
        "unicodedata",
        "docutils.nodes.pending",
        "docutils.nodes.strong",
        "docutils.nodes.Inline",
        "docutils.nodes.status",
        "docutils.nodes.compound",
        "docutils.nodes.Node",
        "docutils.nodes.note"
    ],
    "docutils.nodes.Node": [
        "<builtin>.property"
    ],
    "docutils.nodes.reprunicode": [],
    "docutils.nodes.Text": [],
    "docutils.nodes.Element": [
        "<builtin>.classmethod"
    ],
    "docutils.nodes.TextElement": [],
    "docutils.nodes.FixedTextElement": [],
    "docutils.nodes.Resolvable": [],
    "docutils.nodes.BackLinkable": [],
    "docutils.nodes.Root": [],
    "docutils.nodes.Titular": [],
    "docutils.nodes.PreBibliographic": [],
    "docutils.nodes.Bibliographic": [],
    "docutils.nodes.Decorative": [],
    "docutils.nodes.Structural": [],
    "docutils.nodes.Body": [],
    "docutils.nodes.General": [],
    "docutils.nodes.Sequential": [],
    "docutils.nodes.Admonition": [],
    "docutils.nodes.Special": [],
    "docutils.nodes.Invisible": [],
    "docutils.nodes.Part": [],
    "docutils.nodes.Inline": [],
    "docutils.nodes.Referential": [],
    "docutils.nodes.Targetable": [],
    "docutils.nodes.Labeled": [],
    "docutils.nodes.document": [],
    "docutils.nodes.title": [],
    "docutils.nodes.subtitle": [],
    "docutils.nodes.rubric": [],
    "docutils.nodes.meta": [],
    "docutils.nodes.docinfo": [],
    "docutils.nodes.author": [],
    "docutils.nodes.authors": [],
    "docutils.nodes.organization": [],
    "docutils.nodes.address": [],
    "docutils.nodes.contact": [],
    "docutils.nodes.version": [],
    "docutils.nodes.revision": [],
    "docutils.nodes.status": [],
    "docutils.nodes.date": [],
    "docutils.nodes.copyright": [],
    "docutils.nodes.decoration": [],
    "docutils.nodes.header": [],
    "docutils.nodes.footer": [],
    "docutils.nodes.section": [],
    "docutils.nodes.topic": [],
    "docutils.nodes.sidebar": [],
    "docutils.nodes.transition": [],
    "docutils.nodes.paragraph": [],
    "docutils.nodes.compound": [],
    "docutils.nodes.container": [],
    "docutils.nodes.bullet_list": [],
    "docutils.nodes.enumerated_list": [],
    "docutils.nodes.list_item": [],
    "docutils.nodes.definition_list": [],
    "docutils.nodes.definition_list_item": [],
    "docutils.nodes.term": [],
    "docutils.nodes.classifier": [],
    "docutils.nodes.definition": [],
    "docutils.nodes.field_list": [],
    "docutils.nodes.field": [],
    "docutils.nodes.field_name": [],
    "docutils.nodes.field_body": [],
    "docutils.nodes.option": [],
    "docutils.nodes.option_argument": [],
    "docutils.nodes.option_group": [],
    "docutils.nodes.option_list": [],
    "docutils.nodes.option_list_item": [],
    "docutils.nodes.option_string": [],
    "docutils.nodes.description": [],
    "docutils.nodes.literal_block": [],
    "docutils.nodes.doctest_block": [],
    "docutils.nodes.math_block": [],
    "docutils.nodes.line_block": [],
    "docutils.nodes.line": [],
    "docutils.nodes.block_quote": [],
    "docutils.nodes.attribution": [],
    "docutils.nodes.attention": [],
    "docutils.nodes.caution": [],
    "docutils.nodes.danger": [],
    "docutils.nodes.error": [],
    "docutils.nodes.important": [],
    "docutils.nodes.note": [],
    "docutils.nodes.tip": [],
    "docutils.nodes.hint": [],
    "docutils.nodes.warning": [],
    "docutils.nodes.admonition": [],
    "docutils.nodes.comment": [],
    "docutils.nodes.substitution_definition": [],
    "docutils.nodes.target": [],
    "docutils.nodes.footnote": [],
    "docutils.nodes.citation": [],
    "docutils.nodes.label": [],
    "docutils.nodes.figure": [],
    "docutils.nodes.caption": [],
    "docutils.nodes.legend": [],
    "docutils.nodes.table": [],
    "docutils.nodes.tgroup": [],
    "docutils.nodes.colspec": [],
    "docutils.nodes.thead": [],
    "docutils.nodes.tbody": [],
    "docutils.nodes.row": [],
    "docutils.nodes.entry": [],
    "docutils.nodes.system_message": [],
    "docutils.nodes.pending": [],
    "docutils.nodes.raw": [],
    "docutils.nodes.emphasis": [],
    "docutils.nodes.strong": [],
    "docutils.nodes.literal": [],
    "docutils.nodes.reference": [],
    "docutils.nodes.footnote_reference": [],
    "docutils.nodes.citation_reference": [],
    "docutils.nodes.substitution_reference": [],
    "docutils.nodes.title_reference": [],
    "docutils.nodes.abbreviation": [],
    "docutils.nodes.acronym": [],
    "docutils.nodes.superscript": [],
    "docutils.nodes.subscript": [],
    "docutils.nodes.math": [],
    "docutils.nodes.image": [],
    "docutils.nodes.inline": [],
    "docutils.nodes.problematic": [],
    "docutils.nodes.generated": [],
    "docutils.nodes.NodeVisitor": [],
    "docutils.nodes.SparseNodeVisitor": [],
    "docutils.nodes.GenericNodeVisitor": [],
    "docutils.nodes._add_node_class_names": [
        "<builtin>.setattr"
    ],
    "docutils.nodes.TreeCopyVisitor": [],
    "docutils.nodes.TreePruningException": [],
    "docutils.nodes.SkipChildren": [],
    "docutils.nodes.SkipSiblings": [],
    "docutils.nodes.SkipNode": [],
    "docutils.nodes.SkipDeparture": [],
    "docutils.nodes.NodeFound": [],
    "docutils.nodes.StopTraversal": [],
    "docutils.parsers.rst": [
        "docutils",
        "docutils.parsers",
        "docutils.frontend",
        "docutils.parsers.rst.Parser",
        "docutils.parsers.rst.DirectiveError",
        "docutils.parsers.rst.roles",
        "docutils.statemachine",
        "docutils.nodes",
        "docutils.parsers.rst.Directive",
        "docutils.transforms.universal",
        "docutils.parsers.rst.states"
    ],
    "docutils.parsers": [
        "importlib",
        "docutils.parsers.Parser",
        "docutils.frontend",
        "docutils"
    ],
    "docutils.frontend": [
        "optparse",
        "docutils.utils",
        "warnings",
        "docutils.io",
        "docutils.frontend.ConfigParser",
        "docutils.frontend.Values",
        "posixpath",
        "codecs",
        "docutils.frontend.Option",
        "os",
        "docutils.frontend.ConfigDeprecationWarning",
        "configparser",
        "docutils.frontend.OptionParser",
        "docutils"
    ],
    "optparse": [
        "optparse.Option",
        "gettext",
        "optparse.OptionConflictError",
        "optparse.OptionValueError",
        "optparse.gettext",
        "optparse.OptionParser",
        "optparse.OptParseError",
        "textwrap",
        "optparse.HelpFormatter",
        "optparse.OptionError",
        "optparse.TitledHelpFormatter",
        "optparse.OptionContainer",
        "optparse.BadOptionError",
        "os",
        "optparse.AmbiguousOptionError",
        "optparse.IndentedHelpFormatter",
        "optparse.Values",
        "optparse.OptionGroup"
    ],
    "optparse.OptParseError": [],
    "optparse.OptionError": [],
    "optparse.OptionConflictError": [],
    "optparse.OptionValueError": [],
    "optparse.BadOptionError": [],
    "optparse.AmbiguousOptionError": [],
    "optparse.HelpFormatter": [],
    "optparse.IndentedHelpFormatter": [],
    "optparse.TitledHelpFormatter": [],
    "optparse.gettext": [],
    "optparse.Option": [],
    "optparse.Values": [],
    "optparse.OptionContainer": [],
    "optparse.OptionGroup": [],
    "optparse.OptionParser": [],
    "docutils.utils": [
        "docutils.utils.Reporter",
        "docutils.io",
        "docutils.utils.BadOptionError",
        "docutils.utils.BadOptionDataError",
        "docutils.utils.SystemMessage",
        "posixpath",
        "re",
        "docutils.utils.ExtensionOptionError",
        "docutils.utils.DuplicateOptionError",
        "os",
        "docutils.nodes",
        "docutils.utils.SystemMessagePropagation",
        "unicodedata",
        "docutils.utils.NameValueError",
        "docutils.utils.DependencyList",
        "warnings",
        "docutils"
    ],
    "docutils.utils.SystemMessage": [],
    "docutils.utils.SystemMessagePropagation": [],
    "docutils.utils.Reporter": [
        "<builtin>.range"
    ],
    "docutils.utils.ExtensionOptionError": [],
    "docutils.utils.BadOptionError": [],
    "docutils.utils.BadOptionDataError": [],
    "docutils.utils.DuplicateOptionError": [],
    "docutils.utils.NameValueError": [],
    "docutils.utils.DependencyList": [],
    "docutils.frontend.Values": [],
    "docutils.frontend.Option": [],
    "docutils.frontend.OptionParser": [
        "<builtin>.classmethod",
        "<builtin>.getattr"
    ],
    "docutils.frontend.ConfigParser": [],
    "docutils.frontend.ConfigDeprecationWarning": [],
    "docutils.parsers.Parser": [],
    "docutils.statemachine": [
        "docutils.utils",
        "re.compile",
        "docutils.statemachine.UnexpectedIndentationError",
        "docutils.statemachine.StateCorrection",
        "docutils.statemachine.StateMachineError",
        "re",
        "docutils.statemachine.TransitionPatternNotFound",
        "docutils.statemachine.TransitionMethodNotFound",
        "docutils.statemachine.SearchStateMachine",
        "docutils.statemachine.UnknownTransitionError",
        "docutils.statemachine.State",
        "docutils.statemachine.DuplicateStateError",
        "docutils.statemachine.StateWS",
        "docutils.statemachine.StringList",
        "unicodedata",
        "docutils.statemachine.TransitionCorrection",
        "docutils.statemachine.StateMachineWS",
        "docutils.statemachine.StateMachine",
        "docutils.statemachine.SearchStateMachineWS",
        "docutils.statemachine.UnknownStateError",
        "docutils.statemachine.DuplicateTransitionError",
        "docutils.statemachine._SearchOverride",
        "docutils.statemachine.ViewList"
    ],
    "docutils.statemachine.StateMachine": [],
    "docutils.statemachine.State": [],
    "docutils.statemachine.StateMachineWS": [],
    "docutils.statemachine.StateWS": [
        "re.compile"
    ],
    "docutils.statemachine._SearchOverride": [],
    "docutils.statemachine.SearchStateMachine": [],
    "docutils.statemachine.SearchStateMachineWS": [],
    "docutils.statemachine.ViewList": [],
    "docutils.statemachine.StringList": [],
    "docutils.statemachine.StateMachineError": [],
    "docutils.statemachine.UnknownStateError": [],
    "docutils.statemachine.DuplicateStateError": [],
    "docutils.statemachine.UnknownTransitionError": [],
    "docutils.statemachine.DuplicateTransitionError": [],
    "docutils.statemachine.TransitionPatternNotFound": [],
    "docutils.statemachine.TransitionMethodNotFound": [],
    "docutils.statemachine.UnexpectedIndentationError": [],
    "docutils.statemachine.TransitionCorrection": [],
    "docutils.statemachine.StateCorrection": [],
    "docutils.parsers.rst.roles": [
        "docutils.parsers.rst.roles.register_canonical_role",
        "docutils.parsers.rst.roles.CustomRole",
        "docutils.parsers.rst.directives",
        "docutils.parsers.rst.roles.GenericRole",
        "docutils.parsers.rst.roles.register_generic_role",
        "docutils.utils.code_analyzer",
        "docutils.nodes",
        "docutils.parsers.rst.languages.en"
    ],
    "docutils.parsers.rst.directives": [
        "docutils.utils",
        "docutils.parsers",
        "importlib",
        "re",
        "codecs",
        "re.compile",
        "docutils.parsers.rst.languages.en",
        "docutils.nodes"
    ],
    "docutils.parsers.rst.languages.en": [],
    "docutils.utils.code_analyzer": [
        "pygments.lexers",
        "pygments.formatters.html",
        "docutils.utils.code_analyzer.Lexer",
        "pygments",
        "docutils.utils.code_analyzer.NumberLines",
        "docutils.utils.code_analyzer.LexerError",
        "docutils"
    ],
    "pygments": [
        "io"
    ],
    "pygments.formatters.html": [
        "pygments.token",
        "io",
        "functools",
        "posixpath",
        "<builtin>.ord",
        "os",
        "pygments.formatters.html.HtmlFormatter",
        "pygments.util",
        "pygments.formatter"
    ],
    "pygments.formatter": [
        "pygments.styles",
        "codecs",
        "pygments.util",
        "pygments.formatter.Formatter"
    ],
    "pygments.formatter.Formatter": [],
    "pygments.formatters.html.HtmlFormatter": [
        "functools._lru_cache_wrapper.wrapper",
        "<builtin>.property",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "docutils.utils.code_analyzer.LexerError": [],
    "docutils.utils.code_analyzer.Lexer": [],
    "docutils.utils.code_analyzer.NumberLines": [],
    "docutils.parsers.rst.roles.GenericRole": [],
    "docutils.parsers.rst.roles.CustomRole": [],
    "docutils.parsers.rst.roles.register_generic_role": [
        "docutils.parsers.rst.roles.register_canonical_role",
        "docutils.parsers.rst.roles.GenericRole.__init__"
    ],
    "docutils.parsers.rst.roles.GenericRole.__init__": [],
    "docutils.parsers.rst.roles.register_canonical_role": [
        "docutils.parsers.rst.roles.set_implicit_options",
        "<str>.lower"
    ],
    "docutils.parsers.rst.roles.set_implicit_options": [
        "<builtin>.hasattr"
    ],
    "docutils.parsers.rst.states": [
        "docutils.parsers.rst.states.RFC2822Body",
        "docutils.utils",
        "docutils.parsers.rst.states.Line",
        "docutils.parsers.rst.states.SubstitutionDef",
        "<builtin>.ord",
        "docutils.parsers.rst.states.FieldList",
        "docutils.parsers.rst",
        "docutils.parsers.rst.states.Body",
        "docutils.parsers.rst.states.NestedStateMachine",
        "docutils.parsers.rst.states.BulletList",
        "docutils.parsers.rst.states.InterpretedRoleNotImplementedError",
        "docutils.parsers.rst.states.RFC2822List",
        "docutils.parsers.rst.states.DefinitionList",
        "docutils.parsers.rst.states.RSTStateMachine",
        "docutils.parsers.rst.states.Struct",
        "docutils.parsers.rst.tableparser",
        "docutils.parsers.rst.states.MarkupError",
        "re",
        "docutils.parsers.rst.states.SpecializedBody",
        "docutils.parsers.rst.roles",
        "docutils.statemachine",
        "docutils.parsers.rst.states.ParserError",
        "docutils.parsers.rst.states.MarkupMismatch",
        "docutils.parsers.rst.states.SpecializedText",
        "docutils.parsers.rst.states.RSTState",
        "docutils.parsers.rst.states.Text",
        "docutils.parsers.rst.states.UnknownInterpretedRoleError",
        "docutils.parsers.rst.directives",
        "docutils.parsers.rst.languages",
        "docutils.utils.urischemes",
        "docutils.parsers.rst.states.EnumeratedList",
        "docutils.parsers.rst.states.Definition",
        "docutils.parsers.rst.states.Inliner",
        "docutils.nodes",
        "docutils.utils.roman",
        "docutils.parsers.rst.states.QuotedLiteralBlock",
        "docutils.parsers.rst.states.OptionList",
        "docutils.utils.punctuation_chars",
        "docutils.parsers.rst.states.Explicit",
        "docutils.parsers.rst.states.ExtensionOptions",
        "docutils.parsers.rst.states.LineBlock",
        "types",
        "docutils"
    ],
    "docutils.parsers.rst.languages": [
        "docutils.languages",
        "docutils.parsers.rst.languages.RstLanguageImporter"
    ],
    "docutils.languages": [
        "importlib",
        "docutils.languages.LanguageImporter",
        "docutils.utils",
        "docutils.languages.LanguageImporter.__init__"
    ],
    "docutils.languages.LanguageImporter": [],
    "docutils.languages.LanguageImporter.__init__": [],
    "docutils.parsers.rst.languages.RstLanguageImporter": [],
    "docutils.parsers.rst.tableparser": [
        "docutils.utils",
        "docutils.parsers.rst.tableparser.GridTableParser",
        "re",
        "docutils.parsers.rst.tableparser.TableParser",
        "docutils.parsers.rst.tableparser.TableMarkupError",
        "docutils.parsers.rst.tableparser.SimpleTableParser",
        "docutils"
    ],
    "docutils.parsers.rst.tableparser.TableMarkupError": [],
    "docutils.parsers.rst.tableparser.TableParser": [],
    "docutils.parsers.rst.tableparser.GridTableParser": [
        "re.compile"
    ],
    "docutils.parsers.rst.tableparser.SimpleTableParser": [
        "re.compile"
    ],
    "docutils.utils.punctuation_chars": [],
    "docutils.utils.roman": [
        "docutils.utils.roman.NotIntegerError",
        "docutils.utils.roman.RomanError",
        "docutils.utils.roman.OutOfRangeError",
        "docutils.utils.roman.InvalidRomanNumeralError",
        "re",
        "re.compile"
    ],
    "docutils.utils.roman.RomanError": [],
    "docutils.utils.roman.OutOfRangeError": [],
    "docutils.utils.roman.NotIntegerError": [],
    "docutils.utils.roman.InvalidRomanNumeralError": [],
    "docutils.utils.urischemes": [],
    "docutils.parsers.rst.states.MarkupError": [],
    "docutils.parsers.rst.states.UnknownInterpretedRoleError": [],
    "docutils.parsers.rst.states.InterpretedRoleNotImplementedError": [],
    "docutils.parsers.rst.states.ParserError": [],
    "docutils.parsers.rst.states.MarkupMismatch": [],
    "docutils.parsers.rst.states.Struct": [],
    "docutils.parsers.rst.states.RSTStateMachine": [],
    "docutils.parsers.rst.states.NestedStateMachine": [],
    "docutils.parsers.rst.states.RSTState": [],
    "docutils.parsers.rst.states.Inliner": [
        "<builtin>.locals"
    ],
    "docutils.parsers.rst.states.Body": [
        "<map>.keys",
        "<builtin>.vars",
        "re.compile",
        "docutils.parsers.rst.states.Struct.__init__",
        "re.escape"
    ],
    "docutils.parsers.rst.states.Struct.__init__": [],
    "docutils.parsers.rst.states.RFC2822Body": [
        "<map>.copy"
    ],
    "docutils.parsers.rst.states.SpecializedBody": [],
    "docutils.parsers.rst.states.BulletList": [],
    "docutils.parsers.rst.states.DefinitionList": [],
    "docutils.parsers.rst.states.EnumeratedList": [],
    "docutils.parsers.rst.states.FieldList": [],
    "docutils.parsers.rst.states.OptionList": [],
    "docutils.parsers.rst.states.RFC2822List": [],
    "docutils.parsers.rst.states.ExtensionOptions": [],
    "docutils.parsers.rst.states.LineBlock": [],
    "docutils.parsers.rst.states.Explicit": [],
    "docutils.parsers.rst.states.SubstitutionDef": [
        "re.compile"
    ],
    "docutils.parsers.rst.states.Text": [
        "re.compile"
    ],
    "docutils.parsers.rst.states.SpecializedText": [],
    "docutils.parsers.rst.states.Definition": [],
    "docutils.parsers.rst.states.Line": [],
    "docutils.parsers.rst.states.QuotedLiteralBlock": [],
    "docutils.transforms.universal": [
        "docutils.utils.smartquotes",
        "docutils.transforms.universal.StripClassesAndElements",
        "docutils.transforms.universal.SmartQuotes",
        "docutils.utils",
        "docutils.transforms.universal.FilterMessages",
        "re",
        "docutils.transforms.universal.ExposeInternals",
        "docutils.transforms.universal.Decorations",
        "docutils.transforms.universal.TestMessages",
        "docutils.transforms.universal.StripComments",
        "docutils.transforms.universal.Messages",
        "docutils.transforms",
        "docutils.nodes"
    ],
    "docutils.transforms": [
        "docutils.transforms.TransformError",
        "docutils.transforms.Transformer",
        "docutils.languages",
        "docutils.transforms.Transform",
        "docutils"
    ],
    "docutils.transforms.TransformError": [],
    "docutils.transforms.Transform": [],
    "docutils.transforms.Transformer": [],
    "docutils.utils.smartquotes": [
        "re",
        "docutils.utils.smartquotes.smartchars"
    ],
    "docutils.utils.smartquotes.smartchars": [],
    "docutils.transforms.universal.Decorations": [],
    "docutils.transforms.universal.ExposeInternals": [],
    "docutils.transforms.universal.Messages": [],
    "docutils.transforms.universal.FilterMessages": [],
    "docutils.transforms.universal.TestMessages": [],
    "docutils.transforms.universal.StripComments": [],
    "docutils.transforms.universal.StripClassesAndElements": [],
    "docutils.transforms.universal.SmartQuotes": [],
    "docutils.parsers.rst.Parser": [],
    "docutils.parsers.rst.DirectiveError": [],
    "docutils.parsers.rst.Directive": [],
    "rich.traceback.install": [
        "rich.console.Console.__init__",
        "rich.traceback.install.ipy_excepthook_closure"
    ],
    "rich.traceback.install.ipy_excepthook_closure": [],
    "rich_rst.MLStripper": [],
    "rich_rst.RSTVisitor": [],
    "rich_rst.RestructuredText": [],
    "rich_rst.RestructuredText.__init__": [],
    "rich.json": [
        "json",
        "rich.json.JSON",
        "rich.text",
        "typing",
        "rich.highlighter"
    ],
    "rich.json.JSON": [
        "<builtin>.classmethod"
    ],
    "rich.json.JSON.__init__": [
        "json.loads",
        "json.dumps"
    ],
    "rich.rule.Rule.__init__": [
        "<builtin>.ValueError",
        "rich.cells.cell_len"
    ],
    "rich.cells.cell_len": [
        "rich.cells.get_character_cell_size",
        "rich.cells.cached_cell_len",
        "<builtin>.sum",
        "<builtin>.len"
    ],
    "rich.cells.cached_cell_len": [
        "<builtin>.sum",
        "rich.cells.get_character_cell_size"
    ],
    "rich.cells.get_character_cell_size": [
        "<builtin>.ord",
        "rich.cells._get_codepoint_cell_size"
    ],
    "rich.cells._get_codepoint_cell_size": [
        "<builtin>.len"
    ],
    "rich.padding.Padding.__init__": [
        "rich.padding.Padding.unpack"
    ],
    "rich_cli.__main__.ForceWidth.__init__": [],
    "rich.align.Align.__init__": [
        "<builtin>.ValueError"
    ],
    "rich_cli.pager": [
        "rich.console",
        "rich.measure",
        "rich.segment",
        "rich_cli.pager.PagerRenderable",
        "enum",
        "typing",
        "textual.app",
        "textual.events",
        "rich_cli.pager.PagerApp",
        "textual.widgets"
    ],
    "textual.events": [
        "textual.events.DoubleClick",
        "textual.events.Show",
        "textual.events.Key",
        "textual.events.Callback",
        "textual._types",
        "textual.events.Click",
        "textual.events.Resize",
        "rich.repr",
        "textual.keys",
        "textual.events.Focus",
        "typing",
        "__future__",
        "textual.events.Shutdown",
        "textual.events.Mount",
        "textual.message",
        "textual.events.Leave",
        "textual.events.InputEvent",
        "textual.geometry",
        "textual.events.ShutdownRequest",
        "textual.events.Blur",
        "rich.style",
        "textual.events.Enter",
        "textual.events.Null",
        "textual.events.MouseScrollUp",
        "textual.events.Event",
        "textual.events.Load",
        "textual.events.MouseMove",
        "textual.events.Unmount",
        "textual.events.MouseUp",
        "textual.events.Idle",
        "textual.events.MouseCapture",
        "textual.events.MouseRelease",
        "textual.events.MouseDown",
        "textual.events.Timer",
        "textual.events.Action",
        "textual.events.Hide",
        "textual.events.MouseScrollDown",
        "textual.events.MouseEvent",
        "textual._timer",
        "typing.TypeVar.__init__"
    ],
    "textual.geometry": [
        "textual.geometry.Spacing",
        "textual.geometry.Region",
        "typing",
        "__future__",
        "textual.geometry.Offset",
        "textual.geometry.Size",
        "typing.TypeVar.__init__"
    ],
    "textual.geometry.Offset": [
        "<builtin>.property"
    ],
    "textual.geometry.Size": [
        "<builtin>.property"
    ],
    "textual.geometry.Region": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "textual.geometry.Spacing": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "textual.message": [
        "textual.case",
        "textual.message.Message",
        "typing",
        "__future__",
        "asyncio",
        "textual._types",
        "rich.repr"
    ],
    "asyncio": [
        "asyncio.queues",
        "asyncio.tasks",
        "asyncio.protocols",
        "asyncio.coroutines",
        "asyncio.futures",
        "asyncio.transports",
        "asyncio.locks",
        "asyncio.windows_events",
        "asyncio.runners",
        "asyncio.base_events",
        "asyncio.streams",
        "asyncio.subprocess",
        "asyncio.exceptions",
        "asyncio.events"
    ],
    "asyncio.base_events": [
        "threading",
        "heapq",
        "asyncio.tasks",
        "asyncio.coroutines",
        "asyncio.base_events.BaseEventLoop",
        "asyncio.log",
        "<builtin>.hasattr",
        "asyncio.sslproto",
        "subprocess",
        "ssl",
        "asyncio.base_events.Server",
        "asyncio.constants",
        "asyncio.staggered",
        "weakref",
        "asyncio.base_events._SendfileFallbackProtocol",
        "<builtin>.object",
        "stat",
        "collections.abc",
        "asyncio.events",
        "concurrent.futures",
        "asyncio.futures",
        "asyncio.transports",
        "warnings",
        "traceback",
        "asyncio.protocols",
        "functools",
        "collections",
        "asyncio.trsock",
        "os",
        "socket",
        "asyncio.exceptions"
    ],
    "concurrent.futures": [
        "concurrent.futures._base"
    ],
    "concurrent.futures._base": [
        "threading",
        "concurrent.futures._base.TimeoutError",
        "concurrent.futures._base.Future",
        "concurrent.futures._base._Waiter",
        "logging",
        "concurrent.futures._base._FirstCompletedWaiter",
        "concurrent.futures._base._AcquireFutures",
        "collections",
        "concurrent.futures._base.InvalidStateError",
        "collections.namedtuple",
        "concurrent.futures._base.CancelledError",
        "concurrent.futures._base.Executor",
        "concurrent.futures._base.BrokenExecutor",
        "logging.getLogger",
        "concurrent.futures._base.Error",
        "concurrent.futures._base._AllCompletedWaiter",
        "concurrent.futures._base._AsCompletedWaiter"
    ],
    "concurrent.futures._base.Error": [],
    "concurrent.futures._base.CancelledError": [],
    "concurrent.futures._base.TimeoutError": [],
    "concurrent.futures._base.InvalidStateError": [],
    "concurrent.futures._base._Waiter": [],
    "concurrent.futures._base._AsCompletedWaiter": [],
    "concurrent.futures._base._FirstCompletedWaiter": [],
    "concurrent.futures._base._AllCompletedWaiter": [],
    "concurrent.futures._base._AcquireFutures": [],
    "concurrent.futures._base.Future": [],
    "concurrent.futures._base.Executor": [],
    "concurrent.futures._base.BrokenExecutor": [],
    "asyncio.constants": [
        "asyncio.constants._SendfileMode",
        "enum"
    ],
    "asyncio.constants._SendfileMode": [],
    "asyncio.coroutines": [
        "inspect",
        "warnings",
        "asyncio.constants",
        "asyncio.log",
        "functools",
        "asyncio.base_futures",
        "asyncio.format_helpers",
        "<builtin>.set",
        "<builtin>.object",
        "asyncio.coroutines._is_debug_mode",
        "collections.abc",
        "os",
        "asyncio.coroutines.CoroWrapper",
        "traceback",
        "types"
    ],
    "asyncio.base_futures": [
        "asyncio.format_helpers",
        "reprlib"
    ],
    "asyncio.format_helpers": [
        "inspect",
        "reprlib",
        "asyncio.constants",
        "functools",
        "traceback"
    ],
    "asyncio.log": [
        "logging.getLogger",
        "logging"
    ],
    "asyncio.coroutines._is_debug_mode": [
        "<builtin>.bool"
    ],
    "asyncio.coroutines.CoroWrapper": [
        "<builtin>.property"
    ],
    "asyncio.events": [
        "_asyncio",
        "contextvars",
        "threading",
        "asyncio.events.BaseDefaultEventLoopPolicy",
        "asyncio.events.AbstractServer",
        "asyncio.events.Handle",
        "asyncio.events.AbstractEventLoopPolicy",
        "asyncio.format_helpers",
        "os",
        "subprocess",
        "asyncio.events._RunningLoop",
        "asyncio.events.AbstractEventLoop",
        "asyncio.events.TimerHandle",
        "socket",
        "asyncio.exceptions"
    ],
    "asyncio.exceptions": [
        "asyncio.exceptions.InvalidStateError",
        "asyncio.exceptions.SendfileNotAvailableError",
        "asyncio.exceptions.CancelledError",
        "asyncio.exceptions.TimeoutError",
        "asyncio.exceptions.LimitOverrunError",
        "asyncio.exceptions.IncompleteReadError"
    ],
    "asyncio.exceptions.CancelledError": [],
    "asyncio.exceptions.TimeoutError": [],
    "asyncio.exceptions.InvalidStateError": [],
    "asyncio.exceptions.SendfileNotAvailableError": [],
    "asyncio.exceptions.IncompleteReadError": [],
    "asyncio.exceptions.LimitOverrunError": [],
    "asyncio.events.Handle": [],
    "asyncio.events.TimerHandle": [],
    "asyncio.events.AbstractServer": [],
    "asyncio.events.AbstractEventLoop": [],
    "asyncio.events.AbstractEventLoopPolicy": [],
    "asyncio.events.BaseDefaultEventLoopPolicy": [
        "asyncio.events.BaseDefaultEventLoopPolicy._Local"
    ],
    "asyncio.events.BaseDefaultEventLoopPolicy._Local": [],
    "asyncio.events._RunningLoop": [],
    "_asyncio": [],
    "asyncio.futures": [
        "_asyncio",
        "contextvars",
        "logging",
        "asyncio.base_futures",
        "asyncio.format_helpers",
        "asyncio.futures.Future",
        "asyncio.events",
        "concurrent.futures",
        "asyncio.exceptions"
    ],
    "asyncio.futures.Future": [
        "<builtin>.property"
    ],
    "asyncio.protocols": [
        "asyncio.protocols.BaseProtocol",
        "asyncio.protocols.SubprocessProtocol",
        "asyncio.protocols.Protocol",
        "asyncio.protocols.DatagramProtocol",
        "asyncio.protocols.BufferedProtocol"
    ],
    "asyncio.protocols.BaseProtocol": [],
    "asyncio.protocols.Protocol": [],
    "asyncio.protocols.BufferedProtocol": [],
    "asyncio.protocols.DatagramProtocol": [],
    "asyncio.protocols.SubprocessProtocol": [],
    "asyncio.sslproto": [
        "ssl",
        "asyncio.protocols",
        "asyncio.constants",
        "asyncio.log",
        "collections",
        "asyncio.sslproto.SSLProtocol",
        "asyncio.sslproto._SSLPipe",
        "asyncio.sslproto._SSLProtocolTransport",
        "asyncio.base_events",
        "asyncio.transports",
        "warnings"
    ],
    "asyncio.transports": [
        "asyncio.transports.WriteTransport",
        "asyncio.transports.BaseTransport",
        "asyncio.transports.ReadTransport",
        "asyncio.transports.SubprocessTransport",
        "asyncio.transports._FlowControlMixin",
        "asyncio.transports.Transport",
        "asyncio.transports.DatagramTransport"
    ],
    "asyncio.transports.BaseTransport": [],
    "asyncio.transports.ReadTransport": [],
    "asyncio.transports.WriteTransport": [],
    "asyncio.transports.Transport": [],
    "asyncio.transports.DatagramTransport": [],
    "asyncio.transports.SubprocessTransport": [],
    "asyncio.transports._FlowControlMixin": [],
    "asyncio.sslproto._SSLPipe": [
        "<builtin>.property"
    ],
    "asyncio.sslproto._SSLProtocolTransport": [
        "<builtin>.property"
    ],
    "asyncio.sslproto.SSLProtocol": [],
    "asyncio.staggered": [
        "asyncio.tasks",
        "contextlib",
        "typing",
        "asyncio.locks",
        "asyncio.events",
        "asyncio.exceptions"
    ],
    "asyncio.locks": [
        "asyncio.locks.BoundedSemaphore",
        "asyncio.locks.Semaphore",
        "asyncio.coroutines",
        "asyncio.futures",
        "collections",
        "asyncio.locks._ContextManagerMixin",
        "asyncio.locks.Condition",
        "asyncio.exceptions",
        "asyncio.locks._ContextManager",
        "asyncio.events",
        "asyncio.locks.Event",
        "asyncio.locks.Lock",
        "warnings",
        "types"
    ],
    "asyncio.locks._ContextManager": [],
    "asyncio.locks._ContextManagerMixin": [
        "types.coroutine"
    ],
    "types.coroutine": [
        "functools.wraps",
        "functools",
        "<builtin>.callable",
        "<builtin>.TypeError",
        "collections.abc",
        "<builtin>.getattr"
    ],
    "asyncio.locks.Lock": [],
    "asyncio.locks.Event": [],
    "asyncio.locks.Condition": [],
    "asyncio.locks.Semaphore": [],
    "asyncio.locks.BoundedSemaphore": [],
    "asyncio.tasks": [
        "_asyncio",
        "contextvars",
        "inspect",
        "_weakrefset.WeakSet.__init__",
        "asyncio.coroutines",
        "asyncio.tasks.Task",
        "asyncio.futures",
        "functools",
        "weakref",
        "asyncio.tasks._GatheringFuture",
        "asyncio.base_tasks",
        "asyncio.exceptions",
        "asyncio.events",
        "concurrent.futures",
        "types.coroutine",
        "warnings",
        "types"
    ],
    "asyncio.base_tasks": [
        "asyncio.base_futures",
        "traceback",
        "linecache",
        "asyncio.coroutines"
    ],
    "asyncio.tasks.Task": [
        "<builtin>.classmethod"
    ],
    "asyncio.tasks._GatheringFuture": [],
    "asyncio.trsock": [
        "asyncio.trsock.TransportSocket",
        "warnings",
        "socket"
    ],
    "asyncio.trsock.TransportSocket": [
        "<builtin>.property"
    ],
    "asyncio.base_events._SendfileFallbackProtocol": [],
    "asyncio.base_events.Server": [
        "<builtin>.property"
    ],
    "asyncio.base_events.BaseEventLoop": [],
    "asyncio.runners": [
        "asyncio.events",
        "asyncio.tasks",
        "asyncio.coroutines"
    ],
    "asyncio.queues": [
        "asyncio.queues.LifoQueue",
        "heapq",
        "asyncio.queues.PriorityQueue",
        "collections",
        "asyncio.locks",
        "asyncio.queues.QueueEmpty",
        "asyncio.events",
        "asyncio.queues.QueueFull",
        "warnings",
        "asyncio.queues.Queue"
    ],
    "asyncio.queues.QueueEmpty": [],
    "asyncio.queues.QueueFull": [],
    "asyncio.queues.Queue": [
        "<builtin>.property"
    ],
    "asyncio.queues.PriorityQueue": [],
    "asyncio.queues.LifoQueue": [],
    "asyncio.streams": [
        "asyncio.tasks",
        "asyncio.streams.StreamReader",
        "asyncio.protocols",
        "asyncio.coroutines",
        "asyncio.streams.StreamReaderProtocol",
        "asyncio.log",
        "weakref",
        "asyncio.format_helpers",
        "<builtin>.hasattr",
        "asyncio.streams.FlowControlMixin",
        "asyncio.streams.StreamWriter",
        "asyncio.events",
        "warnings",
        "socket",
        "asyncio.exceptions"
    ],
    "asyncio.streams.FlowControlMixin": [],
    "asyncio.streams.StreamReaderProtocol": [
        "<builtin>.property"
    ],
    "asyncio.streams.StreamWriter": [
        "<builtin>.property"
    ],
    "asyncio.streams.StreamReader": [],
    "asyncio.subprocess": [
        "asyncio.tasks",
        "asyncio.protocols",
        "asyncio.subprocess.SubprocessStreamProtocol",
        "asyncio.log",
        "asyncio.subprocess.Process",
        "asyncio.streams",
        "subprocess",
        "asyncio.events",
        "warnings"
    ],
    "asyncio.subprocess.SubprocessStreamProtocol": [],
    "asyncio.subprocess.Process": [
        "<builtin>.property"
    ],
    "asyncio.windows_events": [
        "asyncio.proactor_events",
        "asyncio.tasks",
        "asyncio.windows_events._WindowsSelectorEventLoop",
        "asyncio.log",
        "asyncio.selector_events",
        "asyncio.windows_events._WaitCancelFuture",
        "asyncio.windows_events.WindowsSelectorEventLoopPolicy",
        "weakref",
        "asyncio.windows_utils",
        "asyncio.windows_events.ProactorEventLoop",
        "asyncio.events",
        "asyncio.windows_events.IocpProactor",
        "asyncio.futures",
        "asyncio.windows_events.WindowsProactorEventLoopPolicy",
        "asyncio.windows_events._OverlappedFuture",
        "asyncio.windows_events._WindowsSubprocessTransport",
        "struct",
        "math",
        "asyncio.windows_events.PipeServer",
        "asyncio.windows_events._BaseWaitHandleFuture",
        "asyncio.base_subprocess",
        "asyncio.windows_events._WaitHandleFuture",
        "socket",
        "asyncio.exceptions"
    ],
    "asyncio.base_subprocess": [
        "asyncio.base_subprocess.ReadSubprocessPipeProto",
        "asyncio.protocols",
        "asyncio.log",
        "asyncio.base_subprocess.BaseSubprocessTransport",
        "collections",
        "asyncio.base_subprocess.WriteSubprocessPipeProto",
        "subprocess",
        "asyncio.transports",
        "warnings"
    ],
    "asyncio.base_subprocess.BaseSubprocessTransport": [],
    "asyncio.base_subprocess.WriteSubprocessPipeProto": [],
    "asyncio.base_subprocess.ReadSubprocessPipeProto": [],
    "asyncio.proactor_events": [
        "asyncio.proactor_events._ProactorDatagramTransport",
        "threading",
        "io",
        "asyncio.log",
        "asyncio.sslproto",
        "signal",
        "asyncio.constants",
        "asyncio.base_events",
        "asyncio.futures",
        "asyncio.proactor_events._ProactorSocketTransport",
        "asyncio.proactor_events._ProactorWritePipeTransport",
        "asyncio.proactor_events._ProactorDuplexPipeTransport",
        "asyncio.transports",
        "warnings",
        "asyncio.proactor_events.BaseProactorEventLoop",
        "asyncio.protocols",
        "asyncio.proactor_events._ProactorBasePipeTransport",
        "collections",
        "asyncio.proactor_events._ProactorBaseWritePipeTransport",
        "asyncio.trsock",
        "asyncio.proactor_events._ProactorReadPipeTransport",
        "os",
        "socket",
        "asyncio.exceptions"
    ],
    "asyncio.proactor_events._ProactorBasePipeTransport": [],
    "asyncio.proactor_events._ProactorReadPipeTransport": [],
    "asyncio.proactor_events._ProactorBaseWritePipeTransport": [],
    "asyncio.proactor_events._ProactorWritePipeTransport": [],
    "asyncio.proactor_events._ProactorDatagramTransport": [],
    "asyncio.proactor_events._ProactorDuplexPipeTransport": [],
    "asyncio.proactor_events._ProactorSocketTransport": [],
    "asyncio.proactor_events.BaseProactorEventLoop": [],
    "asyncio.selector_events": [
        "asyncio.log",
        "asyncio.sslproto",
        "asyncio.selector_events.BaseSelectorEventLoop",
        "ssl",
        "asyncio.constants",
        "selectors",
        "weakref",
        "asyncio.base_events",
        "asyncio.events",
        "asyncio.futures",
        "asyncio.selector_events._SelectorSocketTransport",
        "asyncio.selector_events._SelectorDatagramTransport",
        "asyncio.selector_events._SelectorTransport",
        "asyncio.transports",
        "warnings",
        "asyncio.protocols",
        "functools",
        "collections",
        "asyncio.trsock",
        "socket"
    ],
    "asyncio.selector_events.BaseSelectorEventLoop": [],
    "asyncio.selector_events._SelectorTransport": [],
    "asyncio.selector_events._SelectorSocketTransport": [],
    "asyncio.selector_events._SelectorDatagramTransport": [],
    "asyncio.windows_utils": [
        "asyncio.windows_utils.Popen",
        "<builtin>.ImportError",
        "tempfile",
        "os",
        "asyncio.windows_utils.PipeHandle",
        "subprocess",
        "warnings"
    ],
    "asyncio.windows_utils.PipeHandle": [
        "<builtin>.property"
    ],
    "asyncio.windows_utils.Popen": [],
    "asyncio.windows_events._OverlappedFuture": [],
    "asyncio.windows_events._BaseWaitHandleFuture": [],
    "asyncio.windows_events._WaitCancelFuture": [],
    "asyncio.windows_events._WaitHandleFuture": [],
    "asyncio.windows_events.PipeServer": [],
    "asyncio.windows_events._WindowsSelectorEventLoop": [],
    "asyncio.windows_events.ProactorEventLoop": [],
    "asyncio.windows_events.IocpProactor": [],
    "asyncio.windows_events._WindowsSubprocessTransport": [],
    "asyncio.windows_events.WindowsSelectorEventLoopPolicy": [],
    "asyncio.windows_events.WindowsProactorEventLoopPolicy": [],
    "textual.case": [
        "re",
        "typing",
        "re.compile"
    ],
    "textual._types": [
        "rich.segment",
        "typing",
        "textual._types.MessageTarget",
        "textual.events",
        "typing_extensions",
        "textual._types.EventTarget",
        "textual.message"
    ],
    "textual._types.MessageTarget": [],
    "textual._types.EventTarget": [],
    "textual.message.Message": [
        "<builtin>.property"
    ],
    "textual.keys": [
        "textual.keys.Binding",
        "enum",
        "dataclasses",
        "textual.keys.Keys"
    ],
    "textual.keys.Keys": [],
    "textual.keys.Binding": [],
    "textual._timer": [
        "textual._timer.Timer",
        "weakref",
        "typing",
        "__future__",
        "asyncio",
        "textual._types",
        "textual.events",
        "textual._timer.EventTargetGone",
        "rich.repr"
    ],
    "textual._timer.EventTargetGone": [],
    "textual._timer.Timer": [
        "<builtin>.property"
    ],
    "textual.events.Event": [],
    "textual.events.Null": [],
    "textual.events.Callback": [],
    "textual.events.ShutdownRequest": [],
    "textual.events.Shutdown": [],
    "textual.events.Load": [],
    "textual.events.Idle": [],
    "textual.events.Action": [],
    "textual.events.Resize": [
        "<builtin>.property"
    ],
    "textual.events.Mount": [],
    "textual.events.Unmount": [],
    "textual.events.Show": [],
    "textual.events.Hide": [],
    "textual.events.MouseCapture": [],
    "textual.events.MouseRelease": [],
    "textual.events.InputEvent": [],
    "textual.events.Key": [],
    "textual.events.MouseEvent": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "textual.events.MouseMove": [],
    "textual.events.MouseDown": [],
    "textual.events.MouseUp": [],
    "textual.events.MouseScrollDown": [],
    "textual.events.MouseScrollUp": [],
    "textual.events.Click": [],
    "textual.events.DoubleClick": [],
    "textual.events.Timer": [],
    "textual.events.Enter": [],
    "textual.events.Leave": [],
    "textual.events.Focus": [],
    "textual.events.Blur": [],
    "textual.app": [
        "textual._context",
        "warnings.simplefilter",
        "rich.repr",
        "platform.system",
        "textual.message_pump",
        "rich.measure",
        "typing",
        "rich.control",
        "__future__",
        "textual.views",
        "rich.screen",
        "textual.events",
        "rich.traceback",
        "textual.app.App",
        "rich.console",
        "textual.actions",
        "textual.geometry",
        "textual._callback",
        "asyncio",
        "textual.view",
        "textual.app.ActionError",
        "textual._event_broker",
        "warnings",
        "textual.widget",
        "textual.driver",
        "textual._profile",
        "textual._animator",
        "platform",
        "os",
        "textual.layouts.dock",
        "textual.binding",
        "typing.TypeVar.__init__"
    ],
    "textual.actions": [
        "typing",
        "__future__",
        "re",
        "ast",
        "re.compile",
        "textual.actions.ActionError"
    ],
    "textual.actions.ActionError": [],
    "textual._animator": [
        "textual._easing",
        "textual._animator.BoundAnimator",
        "typing",
        "textual._animator.Animation",
        "dataclasses",
        "__future__",
        "asyncio",
        "textual._types",
        "textual._animator.Animator",
        "typing_extensions",
        "tracemalloc",
        "textual._animator.Animatable",
        "textual._timer",
        "typing.TypeVar.__init__"
    ],
    "textual._easing": [
        "math"
    ],
    "textual._animator.Animatable": [],
    "textual._animator.Animation": [],
    "textual._animator.BoundAnimator": [],
    "textual._animator.Animator": [],
    "textual.binding": [
        "textual.binding.BindingStack",
        "textual.binding.Bindings",
        "dataclasses",
        "__future__",
        "textual.binding.Binding",
        "textual.binding.NoBinding"
    ],
    "textual.binding.NoBinding": [],
    "textual.binding.Binding": [],
    "textual.binding.Bindings": [
        "<builtin>.property"
    ],
    "textual.binding.BindingStack": [],
    "textual._callback": [
        "inspect",
        "functools.lru_cache.decorating_function",
        "functools",
        "typing",
        "__future__",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache"
    ],
    "textual._context": [
        "contextvars",
        "typing",
        "textual.app"
    ],
    "textual._event_broker": [
        "textual._event_broker.HandlerArguments",
        "textual._event_broker.NoHandler",
        "typing",
        "__future__"
    ],
    "textual._event_broker.NoHandler": [],
    "textual._event_broker.HandlerArguments": [],
    "textual.driver": [
        "rich.console",
        "typing",
        "__future__",
        "asyncio",
        "textual._types",
        "abc",
        "platform",
        "textual.events",
        "textual.driver.Driver"
    ],
    "textual.driver.Driver": [
        "abc.abstractmethod"
    ],
    "textual.layouts.dock": [
        "rich.console",
        "textual.geometry",
        "textual.layouts.dock.Dock",
        "textual.layout",
        "typing",
        "collections",
        "dataclasses",
        "__future__",
        "textual._layout_resolve",
        "textual.layouts.dock.DockLayout",
        "typing_extensions",
        "textual.widget",
        "textual.layout_map",
        "textual.layouts.dock.DockOptions"
    ],
    "textual._layout_resolve": [
        "fractions",
        "typing",
        "__future__",
        "typing_extensions",
        "textual._layout_resolve.Edge"
    ],
    "textual._layout_resolve.Edge": [],
    "textual.layout": [
        "textual.layout.ReflowResult",
        "textual._loop",
        "rich.segment",
        "textual.layout.OrderedRegion",
        "textual._types",
        "rich.repr",
        "textual._lines",
        "textual.layout.NoWidget",
        "typing",
        "rich.control",
        "__future__",
        "rich.console",
        "textual.geometry",
        "rich.style",
        "dataclasses",
        "textual.view",
        "abc",
        "textual.widget",
        "textual.layout.WidgetPlacement",
        "textual.layout.LayoutUpdate",
        "operator",
        "textual._profile",
        "textual.layout.Layout",
        "textual.layout_map"
    ],
    "textual._loop": [
        "typing",
        "typing.TypeVar.__init__",
        "__future__"
    ],
    "textual.layout_map": [
        "rich.console",
        "textual.geometry",
        "typing",
        "__future__",
        "textual.layout_map.LayoutMap",
        "textual.layout_map.RenderRegion",
        "textual.widget"
    ],
    "textual.widget": [
        "rich.pretty",
        "textual._types",
        "textual._context",
        "logging.getLogger",
        "rich.align",
        "rich.repr",
        "textual.message_pump",
        "typing",
        "__future__",
        "rich.styled",
        "rich.padding",
        "textual.events",
        "rich.panel",
        "textual.message",
        "rich.text",
        "rich.console",
        "textual._callback",
        "textual.geometry",
        "textual.widget.Widget",
        "logging",
        "rich.style",
        "textual.messages",
        "textual.widget.RenderCache",
        "textual.view",
        "textual.reactive",
        "textual.app",
        "textual._animator",
        "rich.box"
    ],
    "textual.message_pump": [
        "textual.message_pump.NoParent",
        "textual._callback",
        "textual.message_pump.MessagePump",
        "functools",
        "typing",
        "weakref",
        "__future__",
        "asyncio",
        "textual.app",
        "textual._context",
        "textual.events",
        "textual.message_pump.MessagePumpClosed",
        "textual._timer",
        "textual.message",
        "textual.message_pump.CallbackError"
    ],
    "textual.message_pump.NoParent": [],
    "textual.message_pump.CallbackError": [],
    "textual.message_pump.MessagePumpClosed": [],
    "textual.message_pump.MessagePump": [
        "<builtin>.property"
    ],
    "textual.messages": [
        "textual.message_pump",
        "textual.messages.Layout",
        "textual.messages.CursorMove",
        "typing",
        "__future__",
        "textual.widget",
        "textual.messages.Update",
        "rich.repr",
        "textual.message"
    ],
    "textual.messages.Update": [],
    "textual.messages.Layout": [],
    "textual.messages.CursorMove": [],
    "textual.reactive": [
        "inspect",
        "textual._callback",
        "functools",
        "typing",
        "__future__",
        "textual.app",
        "textual._types",
        "textual.events",
        "textual.reactive.Reactive",
        "textual.widget",
        "typing.TypeVar.__init__"
    ],
    "textual.reactive.Reactive": [
        "<builtin>.classmethod"
    ],
    "textual.view": [
        "rich.console",
        "textual.geometry",
        "rich.style",
        "textual.reactive",
        "textual.messages",
        "typing",
        "textual.layout",
        "__future__",
        "textual.app",
        "textual.events",
        "textual.view.View",
        "rich.repr",
        "textual.widget"
    ],
    "textual.view.View": [
        "<builtin>.property",
        "textual.reactive.Reactive.__init__"
    ],
    "textual.reactive.Reactive.__init__": [],
    "textual.widget.RenderCache": [
        "<builtin>.property"
    ],
    "textual.widget.Widget": [
        "<builtin>.property",
        "textual.reactive.Reactive.__init__"
    ],
    "textual.layout_map.RenderRegion": [],
    "textual.layout_map.LayoutMap": [],
    "textual._profile": [
        "contextlib.contextmanager",
        "contextlib",
        "typing"
    ],
    "textual._lines": [
        "rich.segment",
        "textual._types",
        "textual.geometry",
        "__future__"
    ],
    "textual.layout.NoWidget": [],
    "textual.layout.OrderedRegion": [],
    "textual.layout.ReflowResult": [],
    "textual.layout.WidgetPlacement": [],
    "textual.layout.LayoutUpdate": [],
    "textual.layout.Layout": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "textual.layouts.dock.DockOptions": [],
    "textual.layouts.dock.Dock": [],
    "textual.layouts.dock.DockLayout": [],
    "textual.views": [
        "textual.views._dock_view",
        "textual.views._grid_view",
        "textual.views._window_view"
    ],
    "textual.views._dock_view": [
        "textual.layouts.grid",
        "typing",
        "textual.views._dock_view.DockView",
        "__future__",
        "textual.view",
        "textual.views._dock_view.DoNotSet",
        "textual.layouts.dock",
        "textual.widget"
    ],
    "textual.layouts.grid": [
        "rich.console",
        "textual.geometry",
        "logging",
        "textual.layout",
        "typing",
        "collections",
        "dataclasses",
        "__future__",
        "textual._layout_resolve",
        "operator",
        "logging.getLogger",
        "typing_extensions",
        "textual.layouts.grid.GridArea",
        "textual.layouts.grid.GridOptions",
        "textual.widget",
        "textual.layout_map",
        "textual.layouts.grid.GridLayout"
    ],
    "textual.layouts.grid.GridOptions": [],
    "textual.layouts.grid.GridArea": [],
    "textual.layouts.grid.GridLayout": [
        "<builtin>.classmethod"
    ],
    "textual.views._dock_view.DoNotSet": [],
    "textual.views._dock_view.DockView": [],
    "textual.views._grid_view": [
        "textual.view",
        "textual.layouts.grid",
        "textual.views._grid_view.GridView"
    ],
    "textual.views._grid_view.GridView": [
        "<builtin>.property"
    ],
    "textual.views._window_view": [
        "rich.console",
        "textual.geometry",
        "textual.views._window_view.WindowChange",
        "textual",
        "textual.widgets",
        "textual.views._window_view.WindowView",
        "textual.layouts.vertical",
        "__future__",
        "textual.widget",
        "textual.view",
        "textual.message"
    ],
    "textual": [
        "typing"
    ],
    "textual.layouts.vertical": [
        "textual.geometry",
        "textual._loop",
        "textual.layouts.vertical.VerticalLayout",
        "textual.layout",
        "typing",
        "__future__",
        "textual.widget"
    ],
    "textual.layouts.vertical.VerticalLayout": [],
    "textual.widgets": [
        "textual.widgets._footer",
        "textual.widgets._placeholder",
        "textual.widgets._header",
        "textual.widgets._button",
        "textual.widgets._static",
        "textual.widgets._tree_control",
        "textual.widgets._directory_tree",
        "textual.widgets._scroll_view"
    ],
    "textual.widgets._footer": [
        "rich.text",
        "rich.console",
        "rich.style",
        "textual",
        "textual.reactive",
        "__future__",
        "textual.widgets._footer.Footer",
        "rich.repr",
        "textual.widget"
    ],
    "textual.widgets._footer.Footer": [
        "textual.reactive.Reactive.__init__"
    ],
    "textual.widgets._header": [
        "rich.text",
        "rich.console",
        "rich.table",
        "logging",
        "rich.style",
        "textual",
        "textual.reactive",
        "textual.widget",
        "datetime",
        "textual.widgets._header.Header",
        "logging.getLogger",
        "rich.repr",
        "rich.panel"
    ],
    "textual.widgets._header.Header": [
        "<builtin>.property",
        "textual.reactive.Reactive.__init__"
    ],
    "textual.widgets._button": [
        "rich.console",
        "textual.widgets._button.ButtonPressed",
        "rich.style",
        "textual.widgets._button.Button",
        "textual",
        "textual.reactive",
        "textual.widgets._button.ButtonRenderable",
        "__future__",
        "textual.widget",
        "textual.widgets._button.Expand",
        "rich.align",
        "textual.message"
    ],
    "textual.widgets._button.ButtonPressed": [],
    "textual.widgets._button.Expand": [],
    "textual.widgets._button.ButtonRenderable": [],
    "textual.widgets._button.Button": [
        "textual.reactive.Reactive.__init__"
    ],
    "textual.widgets._placeholder": [
        "rich.pretty",
        "rich.console",
        "textual.geometry",
        "logging",
        "textual.widgets._placeholder.Placeholder",
        "textual",
        "__future__",
        "textual.widget",
        "logging.getLogger",
        "rich.align",
        "rich.repr",
        "rich.panel",
        "rich.box"
    ],
    "textual.widgets._placeholder.Placeholder": [
        "textual.reactive.Reactive.__init__"
    ],
    "textual.widgets._scroll_view": [
        "rich.console",
        "textual.geometry",
        "textual.layouts.grid",
        "rich.style",
        "textual",
        "textual.messages",
        "textual.reactive",
        "__future__",
        "textual.widget",
        "textual.view",
        "textual.widgets._scroll_view.ScrollView",
        "textual.scrollbar",
        "textual.message"
    ],
    "textual.scrollbar": [
        "textual.scrollbar.ScrollLeft",
        "rich.console",
        "textual.geometry",
        "textual.scrollbar.ScrollTo",
        "rich.style",
        "rich.segment",
        "__future__",
        "textual.widget",
        "textual._types",
        "textual.scrollbar.ScrollUp",
        "textual.scrollbar.ScrollDown",
        "textual.events",
        "textual.scrollbar.ScrollBar",
        "textual.scrollbar.ScrollRight",
        "rich.repr",
        "textual.message",
        "textual.scrollbar.ScrollBarRender",
        "rich.color"
    ],
    "textual.scrollbar.ScrollUp": [],
    "textual.scrollbar.ScrollDown": [],
    "textual.scrollbar.ScrollLeft": [],
    "textual.scrollbar.ScrollRight": [],
    "textual.scrollbar.ScrollTo": [],
    "textual.scrollbar.ScrollBarRender": [
        "rich.color.Color.parse",
        "<builtin>.classmethod"
    ],
    "textual.scrollbar.ScrollBar": [
        "textual.reactive.Reactive.__init__"
    ],
    "textual.widgets._scroll_view.ScrollView": [
        "<builtin>.property",
        "textual.reactive.Reactive.__init__"
    ],
    "textual.widgets._static": [
        "rich.console",
        "textual.widgets._static.Static",
        "rich.style",
        "__future__",
        "rich.styled",
        "rich.padding",
        "textual.widget"
    ],
    "textual.widgets._static.Static": [],
    "textual.widgets._tree_control": [
        "rich.text",
        "rich.console",
        "textual.widgets._tree_control.TreeNode",
        "textual",
        "textual.reactive",
        "typing",
        "textual.messages",
        "__future__",
        "rich.padding",
        "textual._types",
        "typing.NewType",
        "textual.widgets._tree_control.TreeClick",
        "textual.widgets._tree_control.TreeControl",
        "rich.tree",
        "rich.repr",
        "textual.widget",
        "typing.TypeVar.__init__",
        "textual.message"
    ],
    "rich.tree": [
        "rich.console",
        "rich.measure",
        "rich.style",
        "rich.segment",
        "rich.tree.Tree",
        "typing",
        "rich._loop",
        "rich.styled",
        "rich.jupyter"
    ],
    "rich.tree.Tree": [],
    "typing.NewType": [],
    "textual.widgets._tree_control.TreeNode": [
        "<builtin>.property"
    ],
    "textual.widgets._tree_control.TreeClick": [],
    "textual.widgets._tree_control.TreeControl": [
        "typing.NewType.new_type",
        "textual.reactive.Reactive.__init__"
    ],
    "typing.NewType.new_type": [],
    "textual.widgets._directory_tree": [
        "rich.text",
        "rich.console",
        "textual.widgets._directory_tree.FileClick",
        "textual.widgets._directory_tree.DirEntry",
        "textual",
        "functools",
        "textual.reactive",
        "dataclasses",
        "__future__",
        "posixpath",
        "textual._types",
        "textual.widgets._directory_tree.DirectoryTree",
        "os",
        "rich.repr",
        "textual.message"
    ],
    "textual.widgets._directory_tree.DirEntry": [],
    "textual.widgets._directory_tree.FileClick": [],
    "textual.widgets._directory_tree.DirectoryTree": [
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache",
        "textual.reactive.Reactive.__init__"
    ],
    "textual.views._window_view.WindowChange": [],
    "textual.views._window_view.WindowView": [],
    "textual.app.ActionError": [],
    "textual.app.App": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "textual.reactive.Reactive.__init__"
    ],
    "rich_cli.pager.PagerRenderable": [],
    "rich_cli.pager.PagerApp": [],
    "rich.console.Console.render_lines": [],
    "rich_cli.pager.PagerRenderable.__init__": [
        "<builtin>.list"
    ],
    "textual.app.App.run": [
        "textual.app.App.run.run_app",
        "asyncio.runners.run"
    ],
    "textual.app.App.run.run_app": [
        "rich_cli.pager.PagerApp.__init__",
        "textual.app.App.process_messages",
        "textual.app.App.__init__"
    ],
    "rich_cli.pager.PagerApp.__init__": [
        "<builtin>.super"
    ],
    "textual.app.App.__init__": [
        "textual._animator.Animator.__init__",
        "<builtin>.super",
        "textual._animator.Animator.bind",
        "rich.console.Console.__init__",
        "textual.layouts.dock.DockLayout.__init__",
        "<builtin>.set",
        "textual.binding.Bindings.__init__",
        "<builtin>.open",
        "textual.app.App.get_driver_class",
        "textual.binding.Bindings.bind"
    ],
    "textual.app.App.get_driver_class": [
        "textual.drivers.linux_driver",
        "textual.drivers.windows_driver"
    ],
    "textual.drivers.linux_driver": [
        "threading",
        "rich.console",
        "tty",
        "signal",
        "textual.geometry",
        "selectors",
        "textual",
        "typing",
        "textual.drivers.linux_driver.LinuxDriver",
        "textual.driver",
        "__future__",
        "asyncio",
        "textual._types",
        "textual._xterm_parser",
        "codecs",
        "textual._profile",
        "os",
        "termios"
    ],
    "textual._xterm_parser": [
        "textual._ansi_sequences",
        "typing",
        "__future__",
        "textual._types",
        "re",
        "re.compile",
        "textual.events",
        "textual._xterm_parser.XTermParser",
        "re.escape",
        "textual._parser"
    ],
    "textual._parser": [
        "io",
        "textual._parser.Parser",
        "textual._parser._Read1",
        "textual._parser.ParseEOF",
        "typing",
        "collections",
        "textual._parser._Read",
        "textual._parser.ParseError",
        "__future__",
        "textual._parser.Awaitable",
        "textual._parser._ReadUntil",
        "typing.TypeVar.__init__",
        "textual._parser.PeekBuffer"
    ],
    "textual._parser.ParseError": [],
    "textual._parser.ParseEOF": [],
    "textual._parser.Awaitable": [],
    "textual._parser._Read": [],
    "textual._parser._Read1": [],
    "textual._parser._ReadUntil": [],
    "textual._parser.PeekBuffer": [],
    "textual._parser.Parser": [
        "<builtin>.property"
    ],
    "textual._ansi_sequences": [
        "typing",
        "textual.keys"
    ],
    "textual._xterm_parser.XTermParser": [
        "re.compile"
    ],
    "textual.drivers.linux_driver.LinuxDriver": [
        "<builtin>.classmethod"
    ],
    "textual.drivers.windows_driver": [
        "threading",
        "textual.drivers.win32",
        "rich.console",
        "textual.drivers.windows_driver.WindowsDriver",
        "typing",
        "__future__",
        "asyncio",
        "textual._types",
        "textual._context",
        "textual.driver"
    ],
    "textual.drivers.win32": [
        "threading",
        "textual._xterm_parser",
        "textual._types",
        "textual.drivers.win32.INPUT_RECORD",
        "typing",
        "textual.events",
        "textual.geometry",
        "textual.drivers.win32.uChar",
        "asyncio",
        "textual.drivers.win32.InputEvent",
        "textual.drivers.win32.COORD",
        "textual.drivers.win32.KEY_EVENT_RECORD",
        "textual.drivers.win32.MOUSE_EVENT_RECORD",
        "textual.drivers.win32.WINDOW_BUFFER_SIZE_RECORD",
        "textual.drivers.win32.EventMonitor",
        "textual.drivers.win32.MENU_EVENT_RECORD",
        "ctypes",
        "textual.drivers.win32.FOCUS_EVENT_RECORD",
        "ctypes.wintypes"
    ],
    "textual.drivers.win32.COORD": [],
    "textual.drivers.win32.uChar": [],
    "textual.drivers.win32.KEY_EVENT_RECORD": [],
    "textual.drivers.win32.MOUSE_EVENT_RECORD": [],
    "textual.drivers.win32.WINDOW_BUFFER_SIZE_RECORD": [],
    "textual.drivers.win32.MENU_EVENT_RECORD": [],
    "textual.drivers.win32.FOCUS_EVENT_RECORD": [],
    "textual.drivers.win32.InputEvent": [],
    "textual.drivers.win32.INPUT_RECORD": [],
    "textual.drivers.win32.EventMonitor": [],
    "textual.drivers.windows_driver.WindowsDriver": [],
    "textual.layouts.dock.DockLayout.__init__": [
        "<builtin>.super"
    ],
    "textual._animator.Animator.__init__": [
        "textual._timer.Timer.__init__"
    ],
    "textual._timer.Timer.__init__": [
        "_weakref.ref",
        "asyncio.locks.Event.__init__",
        "<builtin>.repr"
    ],
    "asyncio.locks.Event.__init__": [
        "warnings.warn",
        "asyncio.events.get_event_loop",
        "_collections.deque"
    ],
    "asyncio.events.get_event_loop": [
        "asyncio.events._get_running_loop",
        "asyncio.events.get_event_loop_policy"
    ],
    "asyncio.events._get_running_loop": [],
    "asyncio.events.get_event_loop_policy": [
        "asyncio.events._init_event_loop_policy"
    ],
    "asyncio.events._init_event_loop_policy": [],
    "textual._animator.Animator.bind": [
        "textual._animator.BoundAnimator.__init__"
    ],
    "textual._animator.BoundAnimator.__init__": [],
    "textual.binding.Bindings.__init__": [],
    "textual.binding.Bindings.bind": [],
    "textual.app.App.process_messages": [
        "textual.message.Message.wait",
        "textual.views._dock_view.DockView.__init__",
        "textual.message_pump.MessagePump.post_message",
        "rich.console.Console.print_exception",
        "textual.app.App.push_view",
        "textual.message_pump.MessagePump.dispatch_message",
        "textual.app.App.log"
    ],
    "textual.app.App.log": [
        "<builtin>.str"
    ],
    "textual.message_pump.MessagePump.dispatch_message": [
        "textual.message_pump.MessagePump.on_event",
        "textual.app.App.on_event",
        "textual.message_pump.MessagePump.on_message",
        "<builtin>.isinstance"
    ],
    "textual.message_pump.MessagePump.on_message": [
        "textual._callback.invoke",
        "textual.message_pump.MessagePump.log",
        "<builtin>.getattr",
        "textual.message.Message.stop"
    ],
    "textual.message_pump.MessagePump.log": [],
    "textual._callback.invoke": [
        "textual._callback.count_parameters",
        "inspect.isawaitable"
    ],
    "textual._callback.count_parameters": [
        "inspect.signature",
        "<builtin>.len"
    ],
    "inspect.signature": [
        "inspect.Signature.from_callable"
    ],
    "inspect.Signature.from_callable": [
        "inspect._signature_from_callable"
    ],
    "inspect._signature_from_callable": [
        "inspect._signature_is_functionlike",
        "inspect._signature_get_partial",
        "inspect._signature_bound_method",
        "inspect._signature_is_builtin",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "inspect._signature_from_function",
        "<builtin>.type",
        "inspect._signature_get_user_defined_method",
        "<builtin>.callable",
        "<builtin>.TypeError",
        "inspect.unwrap",
        "inspect._signature_from_callable",
        "inspect.Signature.from_callable",
        "inspect.isfunction",
        "inspect._signature_from_builtin"
    ],
    "inspect._signature_bound_method": [
        "<builtin>.ValueError",
        "inspect.Signature.replace",
        "<builtin>.tuple"
    ],
    "inspect.unwrap": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.id",
        "inspect.unwrap._is_wrapper"
    ],
    "inspect.unwrap._is_wrapper": [
        "inspect._signature_from_callable.<lambda1>",
        "<builtin>.hasattr"
    ],
    "inspect._signature_from_callable.<lambda1>": [],
    "inspect._signature_is_functionlike": [
        "<builtin>.isinstance",
        "inspect.isclass",
        "<builtin>.callable",
        "<builtin>.getattr"
    ],
    "inspect._signature_from_function": [
        "inspect._signature_is_functionlike",
        "inspect.Signature.__init__",
        "<builtin>.enumerate",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<list>.append",
        "inspect._signature_fromstr",
        "inspect.isfunction",
        "<builtin>.getattr"
    ],
    "inspect._signature_fromstr": [
        "inspect.Signature.__init__",
        "inspect.ismodule",
        "<builtin>.isinstance",
        "inspect._signature_fromstr.p",
        "<builtin>.ValueError",
        "inspect._signature_strip_non_python_syntax",
        "ast.parse",
        "<builtin>.enumerate",
        "<builtin>.object",
        "<list>.pop",
        "ast",
        "<builtin>.zip",
        "inspect._signature_fromstr.RewriteSymbolics",
        "<builtin>.list",
        "<builtin>.reversed",
        "<builtin>.getattr"
    ],
    "inspect._signature_strip_non_python_syntax": [
        "tokenize.tokenize",
        "<builtin>.iter",
        "<list>",
        "<builtin>.next"
    ],
    "tokenize.tokenize": [
        "tokenize._tokenize",
        "tokenize.detect_encoding",
        "<builtin>.iter"
    ],
    "tokenize._tokenize": [
        "<list>.append",
        "<builtin>.len",
        "<builtin>.IndentationError",
        "tokenize._compile",
        "<map>.get"
    ],
    "<builtin>.IndentationError": [],
    "tokenize._compile": [
        "re.compile"
    ],
    "inspect._signature_fromstr.RewriteSymbolics": [],
    "inspect._signature_fromstr.p": [
        "ast.NodeVisitor.visit",
        "inspect._signature_fromstr.parse_name",
        "ast.literal_eval",
        "<list>.append"
    ],
    "inspect._signature_fromstr.parse_name": [
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "ast.NodeVisitor.visit": [
        "<builtin>.getattr"
    ],
    "inspect.Signature.__init__": [
        "<builtin>.ValueError",
        "collections.OrderedDict.__init__",
        "<builtin>.enumerate"
    ],
    "inspect._signature_is_builtin": [
        "<builtin>.isinstance",
        "inspect.isbuiltin",
        "inspect.ismethoddescriptor"
    ],
    "inspect.isbuiltin": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethoddescriptor": [
        "<builtin>.type",
        "inspect.ismethod",
        "<builtin>.hasattr",
        "inspect.isclass",
        "inspect.isfunction"
    ],
    "inspect._signature_from_builtin": [
        "inspect._signature_is_builtin",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "inspect._signature_fromstr",
        "<builtin>.getattr"
    ],
    "inspect._signature_get_partial": [
        "collections.OrderedDict.move_to_end",
        "<builtin>.ValueError",
        "collections.OrderedDict.__init__",
        "collections.OrderedDict.values",
        "inspect.Signature.bind_partial",
        "inspect.Signature.replace",
        "collections.OrderedDict.pop"
    ],
    "inspect.Signature.bind_partial": [
        "inspect.Signature._bind"
    ],
    "inspect.Signature._bind": [
        "collections.OrderedDict.__init__",
        "<builtin>.TypeError",
        "<builtin>.iter",
        "inspect.BoundArguments.__init__",
        "<builtin>.next"
    ],
    "inspect.BoundArguments.__init__": [],
    "collections.OrderedDict.pop": [
        "<builtin>.KeyError"
    ],
    "collections.OrderedDict.move_to_end": [],
    "inspect.Signature.replace": [
        "<builtin>.type"
    ],
    "inspect._signature_get_user_defined_method": [
        "<builtin>.getattr"
    ],
    "inspect.isawaitable": [
        "<builtin>.bool",
        "<builtin>.isinstance"
    ],
    "textual.message.Message.stop": [],
    "textual.app.App.on_event": [
        "textual.binding.Bindings.allow_forward",
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "textual.binding.Bindings.allow_forward": [],
    "textual.message_pump.MessagePump.on_event": [
        "textual._callback.invoke",
        "textual.message_pump.MessagePump._get_dispatch_methods",
        "textual.message_pump.MessagePump.log",
        "textual.message.Message.stop"
    ],
    "textual.message_pump.MessagePump._get_dispatch_methods": [],
    "textual.message_pump.MessagePump.post_message": [
        "textual.message_pump.MessagePump.check_message_enabled"
    ],
    "textual.message_pump.MessagePump.check_message_enabled": [
        "<builtin>.type"
    ],
    "textual.views._dock_view.DockView.__init__": [
        "textual.layouts.dock.DockLayout.__init__",
        "<builtin>.super"
    ],
    "textual.app.App.push_view": [
        "textual.app.App.register"
    ],
    "textual.app.App.register": [],
    "textual.message.Message.wait": [],
    "asyncio.runners.run": [
        "asyncio.events._get_running_loop",
        "<builtin>.RuntimeError",
        "<builtin>.ValueError",
        "asyncio.events.new_event_loop",
        "asyncio.coroutines.iscoroutine",
        "asyncio.events.set_event_loop"
    ],
    "asyncio.coroutines.iscoroutine": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "asyncio.events.new_event_loop": [
        "asyncio.events.get_event_loop_policy"
    ],
    "asyncio.events.set_event_loop": [
        "asyncio.events.get_event_loop_policy"
    ],
    "rich.console.Console.save_html": [
        "<builtin>.open",
        "rich.console.Console.export_html"
    ],
    "rich.console.Console.export_html": [],
    "rich.console.Console.save_svg": [
        "<builtin>.open",
        "rich.console.Console.export_svg"
    ],
    "rich.console.Console.export_svg": [
        "rich.segment.Segment.split_and_crop_lines",
        "rich.cells.cell_len",
        "rich.console.Console.export_svg.make_tag",
        "rich.style.Style.__init__",
        "rich.console.Console.export_svg.get_svg_style",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.repr",
        "<builtin>.str",
        "rich.console.Console.export_svg.escape_text",
        "rich.cells"
    ],
    "rich.segment.Segment.split_and_crop_lines": [
        "<list>.append",
        "rich.segment.Segment.adjust_line_length"
    ],
    "rich.segment.Segment.adjust_line_length": [
        "rich.cells.set_cell_size",
        "<builtin>.sum",
        "<list>"
    ],
    "rich.cells.set_cell_size": [
        "rich.cells.cell_len",
        "<builtin>.len"
    ],
    "rich.console.Console.export_svg.get_svg_style": [
        "rich.color.blend_rgb",
        "<list>.append"
    ],
    "rich.color.blend_rgb": [
        "<builtin>.int"
    ],
    "rich.console.Console.export_svg.make_tag": [
        "rich.console.Console.export_svg.make_tag.stringify"
    ],
    "rich.console.Console.export_svg.make_tag.stringify": [
        "<builtin>.str",
        "<builtin>.format",
        "<builtin>.isinstance"
    ],
    "<builtin>.format": [],
    "rich.console.Console.export_svg.escape_text": [
        "html.escape"
    ],
    "html.escape": [],
    "rich_cli.win_vt": [
        "contextlib",
        "platform",
        "platform.system",
        "ctypes",
        "contextlib.contextmanager",
        "ctypes.wintypes"
    ]
}